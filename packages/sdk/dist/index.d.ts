import { DeferredTopicFilter, EventFragment, EventLog, ContractTransactionResponse, FunctionFragment, ContractTransaction, LogDescription, TransactionRequest, Typed, BaseContract, ContractRunner, Listener, BytesLike, AddressLike, ContractMethod, Interface, Result, BigNumberish, ContractFactory, ContractDeployTransaction, Signer } from 'ethers';
import * as node_modules from './node_modules';
export { node_modules as nodeModules };
export { BeaconProxy } from './node_modules/hardhat-deploy/extendedArtifacts/BeaconProxy';
export { BeaconProxy__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/BeaconProxy__factory';
export { Diamond } from './node_modules/hardhat-deploy/extendedArtifacts/Diamond';
export { Diamond__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/Diamond__factory';
export { DiamondCutFacet } from './node_modules/hardhat-deploy/extendedArtifacts/DiamondCutFacet';
export { DiamondCutFacet__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/DiamondCutFacet__factory';
export { DiamondERC165Init } from './node_modules/hardhat-deploy/extendedArtifacts/DiamondERC165Init';
export { DiamondERC165Init__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/DiamondERC165Init__factory';
export { DiamondLoupeFacet } from './node_modules/hardhat-deploy/extendedArtifacts/DiamondLoupeFacet';
export { DiamondLoupeFacet__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/DiamondLoupeFacet__factory';
export { DiamondLoupeFacetWithoutSupportsInterface } from './node_modules/hardhat-deploy/extendedArtifacts/DiamondLoupeFacetWithoutSupportsInterface';
export { DiamondLoupeFacetWithoutSupportsInterface__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/DiamondLoupeFacetWithoutSupportsInterface__factory';
export { EIP173Proxy } from './node_modules/hardhat-deploy/extendedArtifacts/EIP173Proxy';
export { EIP173Proxy__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/EIP173Proxy__factory';
export { EIP173ProxyWithReceive } from './node_modules/hardhat-deploy/extendedArtifacts/EIP173ProxyWithReceive';
export { EIP173ProxyWithReceive__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/EIP173ProxyWithReceive__factory';
export { ERC165Storage } from './node_modules/hardhat-deploy/extendedArtifacts/ERC165Storage';
export { ERC165Storage__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/ERC165Storage__factory';
export { IDiamondCut } from './node_modules/hardhat-deploy/extendedArtifacts/IDiamondCut';
export { IDiamondCut__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/IDiamondCut__factory';
export { IDiamondLoupe } from './node_modules/hardhat-deploy/extendedArtifacts/IDiamondLoupe';
export { IDiamondLoupe__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/IDiamondLoupe__factory';
export { IERC173 } from './node_modules/hardhat-deploy/extendedArtifacts/IERC173';
export { IERC173__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/IERC173__factory';
export { LibDiamond } from './node_modules/hardhat-deploy/extendedArtifacts/LibDiamond';
export { LibDiamond__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/LibDiamond__factory';
export { OptimizedTransparentUpgradeableProxy } from './node_modules/hardhat-deploy/extendedArtifacts/OptimizedTransparentUpgradeableProxy';
export { OptimizedTransparentUpgradeableProxy__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/OptimizedTransparentUpgradeableProxy__factory';
export { OwnershipFacet } from './node_modules/hardhat-deploy/extendedArtifacts/OwnershipFacet';
export { OwnershipFacet__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/OwnershipFacet__factory';
export { UpgradeableBeacon } from './node_modules/hardhat-deploy/extendedArtifacts/UpgradeableBeacon';
export { UpgradeableBeacon__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/UpgradeableBeacon__factory';
export { UUPSUpgradeable } from './node_modules/hardhat-deploy/extendedArtifacts/UUPSUpgradeable';
export { UUPSUpgradeable__factory } from './factories/node_modules/hardhat-deploy/extendedArtifacts/UUPSUpgradeable__factory';

interface TypedDeferredTopicFilter<_TCEvent extends TypedContractEvent> extends DeferredTopicFilter {
}
interface TypedContractEvent<InputTuple extends Array<any> = any, OutputTuple extends Array<any> = any, OutputObject = any> {
    (...args: Partial<InputTuple>): TypedDeferredTopicFilter<TypedContractEvent<InputTuple, OutputTuple, OutputObject>>;
    name: string;
    fragment: EventFragment;
    getFragment(...args: Partial<InputTuple>): EventFragment;
}
type __TypechainAOutputTuple<T> = T extends TypedContractEvent<infer _U, infer W> ? W : never;
type __TypechainOutputObject<T> = T extends TypedContractEvent<infer _U, infer _W, infer V> ? V : never;
interface TypedEventLog<TCEvent extends TypedContractEvent> extends Omit<EventLog, "args"> {
    args: __TypechainAOutputTuple<TCEvent> & __TypechainOutputObject<TCEvent>;
}
interface TypedLogDescription<TCEvent extends TypedContractEvent> extends Omit<LogDescription, "args"> {
    args: __TypechainAOutputTuple<TCEvent> & __TypechainOutputObject<TCEvent>;
}
type TypedListener<TCEvent extends TypedContractEvent> = (...listenerArg: [
    ...__TypechainAOutputTuple<TCEvent>,
    TypedEventLog<TCEvent>,
    ...undefined[]
]) => void;
type StateMutability = "nonpayable" | "payable" | "view";
type BaseOverrides = Omit<TransactionRequest, "to" | "data">;
type NonPayableOverrides = Omit<BaseOverrides, "value" | "blockTag" | "enableCcipRead">;
type PayableOverrides = Omit<BaseOverrides, "blockTag" | "enableCcipRead">;
type ViewOverrides = Omit<TransactionRequest, "to" | "data">;
type Overrides<S extends StateMutability> = S extends "nonpayable" ? NonPayableOverrides : S extends "payable" ? PayableOverrides : ViewOverrides;
type PostfixOverrides<A extends Array<any>, S extends StateMutability> = A | [...A, Overrides<S>];
type ContractMethodArgs<A extends Array<any>, S extends StateMutability> = PostfixOverrides<{
    [I in keyof A]-?: A[I] | Typed;
}, S>;
type DefaultReturnType<R> = R extends Array<any> ? R[0] : R;
interface TypedContractMethod<A extends Array<any> = Array<any>, R = any, S extends StateMutability = "payable"> {
    (...args: ContractMethodArgs<A, S>): S extends "view" ? Promise<DefaultReturnType<R>> : Promise<ContractTransactionResponse>;
    name: string;
    fragment: FunctionFragment;
    getFragment(...args: ContractMethodArgs<A, S>): FunctionFragment;
    populateTransaction(...args: ContractMethodArgs<A, S>): Promise<ContractTransaction>;
    staticCall(...args: ContractMethodArgs<A, "view">): Promise<DefaultReturnType<R>>;
    send(...args: ContractMethodArgs<A, S>): Promise<ContractTransactionResponse>;
    estimateGas(...args: ContractMethodArgs<A, S>): Promise<bigint>;
    staticCallResult(...args: ContractMethodArgs<A, "view">): Promise<R>;
}

interface AccessControlInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "getRoleAdmin" | "grantRole" | "hasRole" | "renounceRole" | "revokeRole" | "supportsInterface"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged" | "RoleGranted" | "RoleRevoked"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
}
declare namespace RoleAdminChangedEvent$7 {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleGrantedEvent$7 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleRevokedEvent$7 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface AccessControl extends BaseContract {
    connect(runner?: ContractRunner | null): AccessControl;
    waitForDeployment(): Promise<this>;
    interface: AccessControlInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent$7.InputTuple, RoleAdminChangedEvent$7.OutputTuple, RoleAdminChangedEvent$7.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent$7.InputTuple, RoleGrantedEvent$7.OutputTuple, RoleGrantedEvent$7.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent$7.InputTuple, RoleRevokedEvent$7.OutputTuple, RoleRevokedEvent$7.OutputObject>;
    filters: {
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent$7.InputTuple, RoleAdminChangedEvent$7.OutputTuple, RoleAdminChangedEvent$7.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent$7.InputTuple, RoleAdminChangedEvent$7.OutputTuple, RoleAdminChangedEvent$7.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent$7.InputTuple, RoleGrantedEvent$7.OutputTuple, RoleGrantedEvent$7.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent$7.InputTuple, RoleGrantedEvent$7.OutputTuple, RoleGrantedEvent$7.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent$7.InputTuple, RoleRevokedEvent$7.OutputTuple, RoleRevokedEvent$7.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent$7.InputTuple, RoleRevokedEvent$7.OutputTuple, RoleRevokedEvent$7.OutputObject>;
    };
}

interface IAccessControlInterface extends Interface {
    getFunction(nameOrSignature: "getRoleAdmin" | "grantRole" | "hasRole" | "renounceRole" | "revokeRole"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged" | "RoleGranted" | "RoleRevoked"): EventFragment;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
}
declare namespace RoleAdminChangedEvent$6 {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleGrantedEvent$6 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleRevokedEvent$6 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface IAccessControl extends BaseContract {
    connect(runner?: ContractRunner | null): IAccessControl;
    waitForDeployment(): Promise<this>;
    interface: IAccessControlInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent$6.InputTuple, RoleAdminChangedEvent$6.OutputTuple, RoleAdminChangedEvent$6.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent$6.InputTuple, RoleGrantedEvent$6.OutputTuple, RoleGrantedEvent$6.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent$6.InputTuple, RoleRevokedEvent$6.OutputTuple, RoleRevokedEvent$6.OutputObject>;
    filters: {
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent$6.InputTuple, RoleAdminChangedEvent$6.OutputTuple, RoleAdminChangedEvent$6.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent$6.InputTuple, RoleAdminChangedEvent$6.OutputTuple, RoleAdminChangedEvent$6.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent$6.InputTuple, RoleGrantedEvent$6.OutputTuple, RoleGrantedEvent$6.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent$6.InputTuple, RoleGrantedEvent$6.OutputTuple, RoleGrantedEvent$6.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent$6.InputTuple, RoleRevokedEvent$6.OutputTuple, RoleRevokedEvent$6.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent$6.InputTuple, RoleRevokedEvent$6.OutputTuple, RoleRevokedEvent$6.OutputObject>;
    };
}

interface OwnableInterface extends Interface {
    getFunction(nameOrSignature: "owner" | "renounceOwnership" | "transferOwnership"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$q {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface Ownable extends BaseContract {
    connect(runner?: ContractRunner | null): Ownable;
    waitForDeployment(): Promise<this>;
    interface: OwnableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$q.InputTuple, OwnershipTransferredEvent$q.OutputTuple, OwnershipTransferredEvent$q.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$q.InputTuple, OwnershipTransferredEvent$q.OutputTuple, OwnershipTransferredEvent$q.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$q.InputTuple, OwnershipTransferredEvent$q.OutputTuple, OwnershipTransferredEvent$q.OutputObject>;
    };
}

type index$1A_AccessControl = AccessControl;
type index$1A_IAccessControl = IAccessControl;
type index$1A_Ownable = Ownable;
declare namespace index$1A {
  export {
    index$1A_AccessControl as AccessControl,
    index$1A_IAccessControl as IAccessControl,
    index$1A_Ownable as Ownable,
  };
}

interface IERC1822ProxiableInterface extends Interface {
    getFunction(nameOrSignature: "proxiableUUID"): FunctionFragment;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
}
interface IERC1822Proxiable extends BaseContract {
    connect(runner?: ContractRunner | null): IERC1822Proxiable;
    waitForDeployment(): Promise<this>;
    interface: IERC1822ProxiableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    proxiableUUID: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "proxiableUUID"): TypedContractMethod<[], [string], "view">;
    filters: {};
}

type index$1z_IERC1822Proxiable = IERC1822Proxiable;
declare namespace index$1z {
  export {
    index$1z_IERC1822Proxiable as IERC1822Proxiable,
  };
}

interface IERC1967Interface extends Interface {
    getEvent(nameOrSignatureOrTopic: "AdminChanged" | "BeaconUpgraded" | "Upgraded"): EventFragment;
}
declare namespace AdminChangedEvent$3 {
    type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
    type OutputTuple = [previousAdmin: string, newAdmin: string];
    interface OutputObject {
        previousAdmin: string;
        newAdmin: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace BeaconUpgradedEvent$3 {
    type InputTuple = [beacon: AddressLike];
    type OutputTuple = [beacon: string];
    interface OutputObject {
        beacon: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UpgradedEvent$3 {
    type InputTuple = [implementation: AddressLike];
    type OutputTuple = [implementation: string];
    interface OutputObject {
        implementation: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface IERC1967 extends BaseContract {
    connect(runner?: ContractRunner | null): IERC1967;
    waitForDeployment(): Promise<this>;
    interface: IERC1967Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getEvent(key: "AdminChanged"): TypedContractEvent<AdminChangedEvent$3.InputTuple, AdminChangedEvent$3.OutputTuple, AdminChangedEvent$3.OutputObject>;
    getEvent(key: "BeaconUpgraded"): TypedContractEvent<BeaconUpgradedEvent$3.InputTuple, BeaconUpgradedEvent$3.OutputTuple, BeaconUpgradedEvent$3.OutputObject>;
    getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent$3.InputTuple, UpgradedEvent$3.OutputTuple, UpgradedEvent$3.OutputObject>;
    filters: {
        "AdminChanged(address,address)": TypedContractEvent<AdminChangedEvent$3.InputTuple, AdminChangedEvent$3.OutputTuple, AdminChangedEvent$3.OutputObject>;
        AdminChanged: TypedContractEvent<AdminChangedEvent$3.InputTuple, AdminChangedEvent$3.OutputTuple, AdminChangedEvent$3.OutputObject>;
        "BeaconUpgraded(address)": TypedContractEvent<BeaconUpgradedEvent$3.InputTuple, BeaconUpgradedEvent$3.OutputTuple, BeaconUpgradedEvent$3.OutputObject>;
        BeaconUpgraded: TypedContractEvent<BeaconUpgradedEvent$3.InputTuple, BeaconUpgradedEvent$3.OutputTuple, BeaconUpgradedEvent$3.OutputObject>;
        "Upgraded(address)": TypedContractEvent<UpgradedEvent$3.InputTuple, UpgradedEvent$3.OutputTuple, UpgradedEvent$3.OutputObject>;
        Upgraded: TypedContractEvent<UpgradedEvent$3.InputTuple, UpgradedEvent$3.OutputTuple, UpgradedEvent$3.OutputObject>;
    };
}

type index$1y_IERC1967 = IERC1967;
declare namespace index$1y {
  export {
    index$1y_IERC1967 as IERC1967,
    index$1z as draftIerc1822Sol,
  };
}

interface ERC1967ProxyInterface extends Interface {
    getEvent(nameOrSignatureOrTopic: "AdminChanged" | "BeaconUpgraded" | "Upgraded"): EventFragment;
}
declare namespace AdminChangedEvent$2 {
    type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
    type OutputTuple = [previousAdmin: string, newAdmin: string];
    interface OutputObject {
        previousAdmin: string;
        newAdmin: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace BeaconUpgradedEvent$2 {
    type InputTuple = [beacon: AddressLike];
    type OutputTuple = [beacon: string];
    interface OutputObject {
        beacon: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UpgradedEvent$2 {
    type InputTuple = [implementation: AddressLike];
    type OutputTuple = [implementation: string];
    interface OutputObject {
        implementation: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface ERC1967Proxy extends BaseContract {
    connect(runner?: ContractRunner | null): ERC1967Proxy;
    waitForDeployment(): Promise<this>;
    interface: ERC1967ProxyInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getEvent(key: "AdminChanged"): TypedContractEvent<AdminChangedEvent$2.InputTuple, AdminChangedEvent$2.OutputTuple, AdminChangedEvent$2.OutputObject>;
    getEvent(key: "BeaconUpgraded"): TypedContractEvent<BeaconUpgradedEvent$2.InputTuple, BeaconUpgradedEvent$2.OutputTuple, BeaconUpgradedEvent$2.OutputObject>;
    getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent$2.InputTuple, UpgradedEvent$2.OutputTuple, UpgradedEvent$2.OutputObject>;
    filters: {
        "AdminChanged(address,address)": TypedContractEvent<AdminChangedEvent$2.InputTuple, AdminChangedEvent$2.OutputTuple, AdminChangedEvent$2.OutputObject>;
        AdminChanged: TypedContractEvent<AdminChangedEvent$2.InputTuple, AdminChangedEvent$2.OutputTuple, AdminChangedEvent$2.OutputObject>;
        "BeaconUpgraded(address)": TypedContractEvent<BeaconUpgradedEvent$2.InputTuple, BeaconUpgradedEvent$2.OutputTuple, BeaconUpgradedEvent$2.OutputObject>;
        BeaconUpgraded: TypedContractEvent<BeaconUpgradedEvent$2.InputTuple, BeaconUpgradedEvent$2.OutputTuple, BeaconUpgradedEvent$2.OutputObject>;
        "Upgraded(address)": TypedContractEvent<UpgradedEvent$2.InputTuple, UpgradedEvent$2.OutputTuple, UpgradedEvent$2.OutputObject>;
        Upgraded: TypedContractEvent<UpgradedEvent$2.InputTuple, UpgradedEvent$2.OutputTuple, UpgradedEvent$2.OutputObject>;
    };
}

interface ERC1967UpgradeInterface extends Interface {
    getEvent(nameOrSignatureOrTopic: "AdminChanged" | "BeaconUpgraded" | "Upgraded"): EventFragment;
}
declare namespace AdminChangedEvent$1 {
    type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
    type OutputTuple = [previousAdmin: string, newAdmin: string];
    interface OutputObject {
        previousAdmin: string;
        newAdmin: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace BeaconUpgradedEvent$1 {
    type InputTuple = [beacon: AddressLike];
    type OutputTuple = [beacon: string];
    interface OutputObject {
        beacon: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UpgradedEvent$1 {
    type InputTuple = [implementation: AddressLike];
    type OutputTuple = [implementation: string];
    interface OutputObject {
        implementation: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface ERC1967Upgrade extends BaseContract {
    connect(runner?: ContractRunner | null): ERC1967Upgrade;
    waitForDeployment(): Promise<this>;
    interface: ERC1967UpgradeInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getEvent(key: "AdminChanged"): TypedContractEvent<AdminChangedEvent$1.InputTuple, AdminChangedEvent$1.OutputTuple, AdminChangedEvent$1.OutputObject>;
    getEvent(key: "BeaconUpgraded"): TypedContractEvent<BeaconUpgradedEvent$1.InputTuple, BeaconUpgradedEvent$1.OutputTuple, BeaconUpgradedEvent$1.OutputObject>;
    getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent$1.InputTuple, UpgradedEvent$1.OutputTuple, UpgradedEvent$1.OutputObject>;
    filters: {
        "AdminChanged(address,address)": TypedContractEvent<AdminChangedEvent$1.InputTuple, AdminChangedEvent$1.OutputTuple, AdminChangedEvent$1.OutputObject>;
        AdminChanged: TypedContractEvent<AdminChangedEvent$1.InputTuple, AdminChangedEvent$1.OutputTuple, AdminChangedEvent$1.OutputObject>;
        "BeaconUpgraded(address)": TypedContractEvent<BeaconUpgradedEvent$1.InputTuple, BeaconUpgradedEvent$1.OutputTuple, BeaconUpgradedEvent$1.OutputObject>;
        BeaconUpgraded: TypedContractEvent<BeaconUpgradedEvent$1.InputTuple, BeaconUpgradedEvent$1.OutputTuple, BeaconUpgradedEvent$1.OutputObject>;
        "Upgraded(address)": TypedContractEvent<UpgradedEvent$1.InputTuple, UpgradedEvent$1.OutputTuple, UpgradedEvent$1.OutputObject>;
        Upgraded: TypedContractEvent<UpgradedEvent$1.InputTuple, UpgradedEvent$1.OutputTuple, UpgradedEvent$1.OutputObject>;
    };
}

type index$1x_ERC1967Proxy = ERC1967Proxy;
type index$1x_ERC1967Upgrade = ERC1967Upgrade;
declare namespace index$1x {
  export {
    index$1x_ERC1967Proxy as ERC1967Proxy,
    index$1x_ERC1967Upgrade as ERC1967Upgrade,
  };
}

interface IBeaconInterface extends Interface {
    getFunction(nameOrSignature: "implementation"): FunctionFragment;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
}
interface IBeacon extends BaseContract {
    connect(runner?: ContractRunner | null): IBeacon;
    waitForDeployment(): Promise<this>;
    interface: IBeaconInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    implementation: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "implementation"): TypedContractMethod<[], [string], "view">;
    filters: {};
}

type index$1w_IBeacon = IBeacon;
declare namespace index$1w {
  export {
    index$1w_IBeacon as IBeacon,
  };
}

interface ProxyInterface extends Interface {
}
interface Proxy extends BaseContract {
    connect(runner?: ContractRunner | null): Proxy;
    waitForDeployment(): Promise<this>;
    interface: ProxyInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    filters: {};
}

type index$1v_Proxy = Proxy;
declare namespace index$1v {
  export {
    index$1v_Proxy as Proxy,
    index$1w as beacon,
    index$1x as erc1967,
  };
}

interface PausableInterface extends Interface {
    getFunction(nameOrSignature: "paused"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Paused" | "Unpaused"): EventFragment;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
}
declare namespace PausedEvent$5 {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UnpausedEvent$5 {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface Pausable extends BaseContract {
    connect(runner?: ContractRunner | null): Pausable;
    waitForDeployment(): Promise<this>;
    interface: PausableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    paused: TypedContractMethod<[], [boolean], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "paused"): TypedContractMethod<[], [boolean], "view">;
    getEvent(key: "Paused"): TypedContractEvent<PausedEvent$5.InputTuple, PausedEvent$5.OutputTuple, PausedEvent$5.OutputObject>;
    getEvent(key: "Unpaused"): TypedContractEvent<UnpausedEvent$5.InputTuple, UnpausedEvent$5.OutputTuple, UnpausedEvent$5.OutputObject>;
    filters: {
        "Paused(address)": TypedContractEvent<PausedEvent$5.InputTuple, PausedEvent$5.OutputTuple, PausedEvent$5.OutputObject>;
        Paused: TypedContractEvent<PausedEvent$5.InputTuple, PausedEvent$5.OutputTuple, PausedEvent$5.OutputObject>;
        "Unpaused(address)": TypedContractEvent<UnpausedEvent$5.InputTuple, UnpausedEvent$5.OutputTuple, UnpausedEvent$5.OutputObject>;
        Unpaused: TypedContractEvent<UnpausedEvent$5.InputTuple, UnpausedEvent$5.OutputTuple, UnpausedEvent$5.OutputObject>;
    };
}

type index$1u_Pausable = Pausable;
declare namespace index$1u {
  export {
    index$1u_Pausable as Pausable,
  };
}

interface IERC20MetadataInterface extends Interface {
    getFunction(nameOrSignature: "allowance" | "approve" | "balanceOf" | "decimals" | "name" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;
    encodeFunctionData(functionFragment: "allowance", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$4 {
    type InputTuple = [
        owner: AddressLike,
        spender: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [owner: string, spender: string, value: bigint];
    interface OutputObject {
        owner: string;
        spender: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$4 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [from: string, to: string, value: bigint];
    interface OutputObject {
        from: string;
        to: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface IERC20Metadata extends BaseContract {
    connect(runner?: ContractRunner | null): IERC20Metadata;
    waitForDeployment(): Promise<this>;
    interface: IERC20MetadataInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    allowance: TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    approve: TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;
    decimals: TypedContractMethod<[], [bigint], "view">;
    name: TypedContractMethod<[], [string], "view">;
    symbol: TypedContractMethod<[], [string], "view">;
    totalSupply: TypedContractMethod<[], [bigint], "view">;
    transfer: TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    transferFrom: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "approve"): TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "decimals"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "name"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "symbol"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$4.InputTuple, ApprovalEvent$4.OutputTuple, ApprovalEvent$4.OutputObject>;
    getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$4.InputTuple, TransferEvent$4.OutputTuple, TransferEvent$4.OutputObject>;
    filters: {
        "Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$4.InputTuple, ApprovalEvent$4.OutputTuple, ApprovalEvent$4.OutputObject>;
        Approval: TypedContractEvent<ApprovalEvent$4.InputTuple, ApprovalEvent$4.OutputTuple, ApprovalEvent$4.OutputObject>;
        "Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$4.InputTuple, TransferEvent$4.OutputTuple, TransferEvent$4.OutputObject>;
        Transfer: TypedContractEvent<TransferEvent$4.InputTuple, TransferEvent$4.OutputTuple, TransferEvent$4.OutputObject>;
    };
}

interface IERC20PermitInterface extends Interface {
    getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "nonces" | "permit"): FunctionFragment;
    encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
    encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "permit", values: [
        AddressLike,
        AddressLike,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
}
interface IERC20Permit extends BaseContract {
    connect(runner?: ContractRunner | null): IERC20Permit;
    waitForDeployment(): Promise<this>;
    interface: IERC20PermitInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;
    nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;
    permit: TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike,
        value: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "nonces"): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "permit"): TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike,
        value: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike
    ], [
        void
    ], "nonpayable">;
    filters: {};
}

type index$1t_IERC20Metadata = IERC20Metadata;
type index$1t_IERC20Permit = IERC20Permit;
declare namespace index$1t {
  export {
    index$1t_IERC20Metadata as IERC20Metadata,
    index$1t_IERC20Permit as IERC20Permit,
  };
}

interface ERC20Interface extends Interface {
    getFunction(nameOrSignature: "allowance" | "approve" | "balanceOf" | "decimals" | "decreaseAllowance" | "increaseAllowance" | "name" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;
    encodeFunctionData(functionFragment: "allowance", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$3 {
    type InputTuple = [
        owner: AddressLike,
        spender: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [owner: string, spender: string, value: bigint];
    interface OutputObject {
        owner: string;
        spender: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$3 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [from: string, to: string, value: bigint];
    interface OutputObject {
        from: string;
        to: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface ERC20 extends BaseContract {
    connect(runner?: ContractRunner | null): ERC20;
    waitForDeployment(): Promise<this>;
    interface: ERC20Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    allowance: TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    approve: TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;
    decimals: TypedContractMethod<[], [bigint], "view">;
    decreaseAllowance: TypedContractMethod<[
        spender: AddressLike,
        subtractedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    increaseAllowance: TypedContractMethod<[
        spender: AddressLike,
        addedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    name: TypedContractMethod<[], [string], "view">;
    symbol: TypedContractMethod<[], [string], "view">;
    totalSupply: TypedContractMethod<[], [bigint], "view">;
    transfer: TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    transferFrom: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "approve"): TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "decimals"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "decreaseAllowance"): TypedContractMethod<[
        spender: AddressLike,
        subtractedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "increaseAllowance"): TypedContractMethod<[
        spender: AddressLike,
        addedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "name"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "symbol"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$3.InputTuple, ApprovalEvent$3.OutputTuple, ApprovalEvent$3.OutputObject>;
    getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$3.InputTuple, TransferEvent$3.OutputTuple, TransferEvent$3.OutputObject>;
    filters: {
        "Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$3.InputTuple, ApprovalEvent$3.OutputTuple, ApprovalEvent$3.OutputObject>;
        Approval: TypedContractEvent<ApprovalEvent$3.InputTuple, ApprovalEvent$3.OutputTuple, ApprovalEvent$3.OutputObject>;
        "Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$3.InputTuple, TransferEvent$3.OutputTuple, TransferEvent$3.OutputObject>;
        Transfer: TypedContractEvent<TransferEvent$3.InputTuple, TransferEvent$3.OutputTuple, TransferEvent$3.OutputObject>;
    };
}

interface IERC20Interface extends Interface {
    getFunction(nameOrSignature: "allowance" | "approve" | "balanceOf" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;
    encodeFunctionData(functionFragment: "allowance", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$2 {
    type InputTuple = [
        owner: AddressLike,
        spender: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [owner: string, spender: string, value: bigint];
    interface OutputObject {
        owner: string;
        spender: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$2 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [from: string, to: string, value: bigint];
    interface OutputObject {
        from: string;
        to: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface IERC20 extends BaseContract {
    connect(runner?: ContractRunner | null): IERC20;
    waitForDeployment(): Promise<this>;
    interface: IERC20Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    allowance: TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    approve: TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;
    totalSupply: TypedContractMethod<[], [bigint], "view">;
    transfer: TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    transferFrom: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "approve"): TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$2.InputTuple, ApprovalEvent$2.OutputTuple, ApprovalEvent$2.OutputObject>;
    getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$2.InputTuple, TransferEvent$2.OutputTuple, TransferEvent$2.OutputObject>;
    filters: {
        "Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$2.InputTuple, ApprovalEvent$2.OutputTuple, ApprovalEvent$2.OutputObject>;
        Approval: TypedContractEvent<ApprovalEvent$2.InputTuple, ApprovalEvent$2.OutputTuple, ApprovalEvent$2.OutputObject>;
        "Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$2.InputTuple, TransferEvent$2.OutputTuple, TransferEvent$2.OutputObject>;
        Transfer: TypedContractEvent<TransferEvent$2.InputTuple, TransferEvent$2.OutputTuple, TransferEvent$2.OutputObject>;
    };
}

type index$1s_ERC20 = ERC20;
type index$1s_IERC20 = IERC20;
declare namespace index$1s {
  export {
    index$1s_ERC20 as ERC20,
    index$1s_IERC20 as IERC20,
    index$1t as extensions,
  };
}

declare namespace index$1r {
  export {
    index$1s as erc20,
  };
}

interface ERC165Interface extends Interface {
    getFunction(nameOrSignature: "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
}
interface ERC165 extends BaseContract {
    connect(runner?: ContractRunner | null): ERC165;
    waitForDeployment(): Promise<this>;
    interface: ERC165Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    filters: {};
}

interface IERC165Interface extends Interface {
    getFunction(nameOrSignature: "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
}
interface IERC165 extends BaseContract {
    connect(runner?: ContractRunner | null): IERC165;
    waitForDeployment(): Promise<this>;
    interface: IERC165Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    filters: {};
}

type index$1q_ERC165 = ERC165;
type index$1q_IERC165 = IERC165;
declare namespace index$1q {
  export {
    index$1q_ERC165 as ERC165,
    index$1q_IERC165 as IERC165,
  };
}

declare namespace index$1p {
  export {
    index$1q as introspection,
  };
}

declare namespace index$1o {
  export {
    index$1A as access,
    index$1y as interfaces,
    index$1v as proxy,
    index$1u as security,
    index$1r as token,
    index$1p as utils,
  };
}

interface AccessControlUpgradeableInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "getRoleAdmin" | "grantRole" | "hasRole" | "renounceRole" | "revokeRole" | "supportsInterface"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
}
declare namespace InitializedEvent$9 {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleAdminChangedEvent$5 {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleGrantedEvent$5 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleRevokedEvent$5 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface AccessControlUpgradeable extends BaseContract {
    connect(runner?: ContractRunner | null): AccessControlUpgradeable;
    waitForDeployment(): Promise<this>;
    interface: AccessControlUpgradeableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$9.InputTuple, InitializedEvent$9.OutputTuple, InitializedEvent$9.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent$5.InputTuple, RoleAdminChangedEvent$5.OutputTuple, RoleAdminChangedEvent$5.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent$5.InputTuple, RoleGrantedEvent$5.OutputTuple, RoleGrantedEvent$5.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent$5.InputTuple, RoleRevokedEvent$5.OutputTuple, RoleRevokedEvent$5.OutputObject>;
    filters: {
        "Initialized(uint8)": TypedContractEvent<InitializedEvent$9.InputTuple, InitializedEvent$9.OutputTuple, InitializedEvent$9.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent$9.InputTuple, InitializedEvent$9.OutputTuple, InitializedEvent$9.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent$5.InputTuple, RoleAdminChangedEvent$5.OutputTuple, RoleAdminChangedEvent$5.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent$5.InputTuple, RoleAdminChangedEvent$5.OutputTuple, RoleAdminChangedEvent$5.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent$5.InputTuple, RoleGrantedEvent$5.OutputTuple, RoleGrantedEvent$5.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent$5.InputTuple, RoleGrantedEvent$5.OutputTuple, RoleGrantedEvent$5.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent$5.InputTuple, RoleRevokedEvent$5.OutputTuple, RoleRevokedEvent$5.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent$5.InputTuple, RoleRevokedEvent$5.OutputTuple, RoleRevokedEvent$5.OutputObject>;
    };
}

interface IAccessControlUpgradeableInterface extends Interface {
    getFunction(nameOrSignature: "getRoleAdmin" | "grantRole" | "hasRole" | "renounceRole" | "revokeRole"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged" | "RoleGranted" | "RoleRevoked"): EventFragment;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
}
declare namespace RoleAdminChangedEvent$4 {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleGrantedEvent$4 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleRevokedEvent$4 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface IAccessControlUpgradeable extends BaseContract {
    connect(runner?: ContractRunner | null): IAccessControlUpgradeable;
    waitForDeployment(): Promise<this>;
    interface: IAccessControlUpgradeableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent$4.InputTuple, RoleAdminChangedEvent$4.OutputTuple, RoleAdminChangedEvent$4.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent$4.InputTuple, RoleGrantedEvent$4.OutputTuple, RoleGrantedEvent$4.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent$4.InputTuple, RoleRevokedEvent$4.OutputTuple, RoleRevokedEvent$4.OutputObject>;
    filters: {
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent$4.InputTuple, RoleAdminChangedEvent$4.OutputTuple, RoleAdminChangedEvent$4.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent$4.InputTuple, RoleAdminChangedEvent$4.OutputTuple, RoleAdminChangedEvent$4.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent$4.InputTuple, RoleGrantedEvent$4.OutputTuple, RoleGrantedEvent$4.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent$4.InputTuple, RoleGrantedEvent$4.OutputTuple, RoleGrantedEvent$4.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent$4.InputTuple, RoleRevokedEvent$4.OutputTuple, RoleRevokedEvent$4.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent$4.InputTuple, RoleRevokedEvent$4.OutputTuple, RoleRevokedEvent$4.OutputObject>;
    };
}

interface OwnableUpgradeableInterface extends Interface {
    getFunction(nameOrSignature: "owner" | "renounceOwnership" | "transferOwnership"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred"): EventFragment;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace InitializedEvent$8 {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$p {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface OwnableUpgradeable extends BaseContract {
    connect(runner?: ContractRunner | null): OwnableUpgradeable;
    waitForDeployment(): Promise<this>;
    interface: OwnableUpgradeableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$8.InputTuple, InitializedEvent$8.OutputTuple, InitializedEvent$8.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$p.InputTuple, OwnershipTransferredEvent$p.OutputTuple, OwnershipTransferredEvent$p.OutputObject>;
    filters: {
        "Initialized(uint8)": TypedContractEvent<InitializedEvent$8.InputTuple, InitializedEvent$8.OutputTuple, InitializedEvent$8.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent$8.InputTuple, InitializedEvent$8.OutputTuple, InitializedEvent$8.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$p.InputTuple, OwnershipTransferredEvent$p.OutputTuple, OwnershipTransferredEvent$p.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$p.InputTuple, OwnershipTransferredEvent$p.OutputTuple, OwnershipTransferredEvent$p.OutputObject>;
    };
}

type index$1n_AccessControlUpgradeable = AccessControlUpgradeable;
type index$1n_IAccessControlUpgradeable = IAccessControlUpgradeable;
type index$1n_OwnableUpgradeable = OwnableUpgradeable;
declare namespace index$1n {
  export {
    index$1n_AccessControlUpgradeable as AccessControlUpgradeable,
    index$1n_IAccessControlUpgradeable as IAccessControlUpgradeable,
    index$1n_OwnableUpgradeable as OwnableUpgradeable,
  };
}

interface InitializableInterface extends Interface {
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
declare namespace InitializedEvent$7 {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface Initializable extends BaseContract {
    connect(runner?: ContractRunner | null): Initializable;
    waitForDeployment(): Promise<this>;
    interface: InitializableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$7.InputTuple, InitializedEvent$7.OutputTuple, InitializedEvent$7.OutputObject>;
    filters: {
        "Initialized(uint8)": TypedContractEvent<InitializedEvent$7.InputTuple, InitializedEvent$7.OutputTuple, InitializedEvent$7.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent$7.InputTuple, InitializedEvent$7.OutputTuple, InitializedEvent$7.OutputObject>;
    };
}

type index$1m_Initializable = Initializable;
declare namespace index$1m {
  export {
    index$1m_Initializable as Initializable,
  };
}

declare namespace index$1l {
  export {
    index$1m as utils,
  };
}

interface PausableUpgradeableInterface extends Interface {
    getFunction(nameOrSignature: "paused"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized" | "Paused" | "Unpaused"): EventFragment;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
}
declare namespace InitializedEvent$6 {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PausedEvent$4 {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UnpausedEvent$4 {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface PausableUpgradeable extends BaseContract {
    connect(runner?: ContractRunner | null): PausableUpgradeable;
    waitForDeployment(): Promise<this>;
    interface: PausableUpgradeableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    paused: TypedContractMethod<[], [boolean], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "paused"): TypedContractMethod<[], [boolean], "view">;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$6.InputTuple, InitializedEvent$6.OutputTuple, InitializedEvent$6.OutputObject>;
    getEvent(key: "Paused"): TypedContractEvent<PausedEvent$4.InputTuple, PausedEvent$4.OutputTuple, PausedEvent$4.OutputObject>;
    getEvent(key: "Unpaused"): TypedContractEvent<UnpausedEvent$4.InputTuple, UnpausedEvent$4.OutputTuple, UnpausedEvent$4.OutputObject>;
    filters: {
        "Initialized(uint8)": TypedContractEvent<InitializedEvent$6.InputTuple, InitializedEvent$6.OutputTuple, InitializedEvent$6.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent$6.InputTuple, InitializedEvent$6.OutputTuple, InitializedEvent$6.OutputObject>;
        "Paused(address)": TypedContractEvent<PausedEvent$4.InputTuple, PausedEvent$4.OutputTuple, PausedEvent$4.OutputObject>;
        Paused: TypedContractEvent<PausedEvent$4.InputTuple, PausedEvent$4.OutputTuple, PausedEvent$4.OutputObject>;
        "Unpaused(address)": TypedContractEvent<UnpausedEvent$4.InputTuple, UnpausedEvent$4.OutputTuple, UnpausedEvent$4.OutputObject>;
        Unpaused: TypedContractEvent<UnpausedEvent$4.InputTuple, UnpausedEvent$4.OutputTuple, UnpausedEvent$4.OutputObject>;
    };
}

interface ReentrancyGuardUpgradeableInterface extends Interface {
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
declare namespace InitializedEvent$5 {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface ReentrancyGuardUpgradeable extends BaseContract {
    connect(runner?: ContractRunner | null): ReentrancyGuardUpgradeable;
    waitForDeployment(): Promise<this>;
    interface: ReentrancyGuardUpgradeableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$5.InputTuple, InitializedEvent$5.OutputTuple, InitializedEvent$5.OutputObject>;
    filters: {
        "Initialized(uint8)": TypedContractEvent<InitializedEvent$5.InputTuple, InitializedEvent$5.OutputTuple, InitializedEvent$5.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent$5.InputTuple, InitializedEvent$5.OutputTuple, InitializedEvent$5.OutputObject>;
    };
}

type index$1k_PausableUpgradeable = PausableUpgradeable;
type index$1k_ReentrancyGuardUpgradeable = ReentrancyGuardUpgradeable;
declare namespace index$1k {
  export {
    index$1k_PausableUpgradeable as PausableUpgradeable,
    index$1k_ReentrancyGuardUpgradeable as ReentrancyGuardUpgradeable,
  };
}

interface ERC165UpgradeableInterface extends Interface {
    getFunction(nameOrSignature: "supportsInterface"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
}
declare namespace InitializedEvent$4 {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface ERC165Upgradeable extends BaseContract {
    connect(runner?: ContractRunner | null): ERC165Upgradeable;
    waitForDeployment(): Promise<this>;
    interface: ERC165UpgradeableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$4.InputTuple, InitializedEvent$4.OutputTuple, InitializedEvent$4.OutputObject>;
    filters: {
        "Initialized(uint8)": TypedContractEvent<InitializedEvent$4.InputTuple, InitializedEvent$4.OutputTuple, InitializedEvent$4.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent$4.InputTuple, InitializedEvent$4.OutputTuple, InitializedEvent$4.OutputObject>;
    };
}

interface IERC165UpgradeableInterface extends Interface {
    getFunction(nameOrSignature: "supportsInterface"): FunctionFragment;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
}
interface IERC165Upgradeable extends BaseContract {
    connect(runner?: ContractRunner | null): IERC165Upgradeable;
    waitForDeployment(): Promise<this>;
    interface: IERC165UpgradeableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    filters: {};
}

type index$1j_ERC165Upgradeable = ERC165Upgradeable;
type index$1j_IERC165Upgradeable = IERC165Upgradeable;
declare namespace index$1j {
  export {
    index$1j_ERC165Upgradeable as ERC165Upgradeable,
    index$1j_IERC165Upgradeable as IERC165Upgradeable,
  };
}

interface ContextUpgradeableInterface extends Interface {
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
declare namespace InitializedEvent$3 {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface ContextUpgradeable extends BaseContract {
    connect(runner?: ContractRunner | null): ContextUpgradeable;
    waitForDeployment(): Promise<this>;
    interface: ContextUpgradeableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$3.InputTuple, InitializedEvent$3.OutputTuple, InitializedEvent$3.OutputObject>;
    filters: {
        "Initialized(uint8)": TypedContractEvent<InitializedEvent$3.InputTuple, InitializedEvent$3.OutputTuple, InitializedEvent$3.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent$3.InputTuple, InitializedEvent$3.OutputTuple, InitializedEvent$3.OutputObject>;
    };
}

type index$1i_ContextUpgradeable = ContextUpgradeable;
declare namespace index$1i {
  export {
    index$1i_ContextUpgradeable as ContextUpgradeable,
    index$1j as introspection,
  };
}

declare namespace index$1h {
  export {
    index$1n as access,
    index$1l as proxy,
    index$1k as security,
    index$1i as utils,
  };
}

declare namespace index$1g {
  export {
    index$1o as contracts,
    index$1h as contractsUpgradeable,
  };
}

type OriginStruct$d = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
type OriginStructOutput$3 = [
    srcEid: bigint,
    sender: string,
    nonce: bigint
] & {
    srcEid: bigint;
    sender: string;
    nonce: bigint;
};
interface IExecutorInterface extends Interface {
    getFunction(nameOrSignature: "assignJob" | "defaultMultiplierBps" | "dstConfig" | "getFee" | "getSupportedOptionTypes" | "priceFeed" | "setDefaultMultiplierBps" | "setPriceFeed" | "setSupportedOptionTypes" | "withdrawFee"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DstConfigSet" | "NativeDropFailed" | "NativeDropSucceeded" | "SetDefaultMultiplierBps" | "SetPriceFeed" | "SetSupportedOptionTypes" | "SetWorkerLib" | "Withdraw"): EventFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [BigNumberish, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getFee", values: [BigNumberish, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [BigNumberish, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
}
declare namespace DstConfigSetEvent$1 {
    type InputTuple = [params: IExecutor$3.DstConfigParamStruct[]];
    type OutputTuple = [params: IExecutor$3.DstConfigParamStructOutput[]];
    interface OutputObject {
        params: IExecutor$3.DstConfigParamStructOutput[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace NativeDropFailedEvent$1 {
    type InputTuple = [
        origin: OriginStruct$d,
        dstEid: BigNumberish,
        oapp: AddressLike,
        receiver: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [
        origin: OriginStructOutput$3,
        dstEid: bigint,
        oapp: string,
        receiver: string,
        amount: bigint
    ];
    interface OutputObject {
        origin: OriginStructOutput$3;
        dstEid: bigint;
        oapp: string;
        receiver: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace NativeDropSucceededEvent$1 {
    type InputTuple = [
        origin: OriginStruct$d,
        dstEid: BigNumberish,
        oapp: AddressLike,
        receiver: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [
        origin: OriginStructOutput$3,
        dstEid: bigint,
        oapp: string,
        receiver: string,
        amount: bigint
    ];
    interface OutputObject {
        origin: OriginStructOutput$3;
        dstEid: bigint;
        oapp: string;
        receiver: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetDefaultMultiplierBpsEvent$6 {
    type InputTuple = [multiplierBps: BigNumberish];
    type OutputTuple = [multiplierBps: bigint];
    interface OutputObject {
        multiplierBps: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPriceFeedEvent$6 {
    type InputTuple = [priceFeed: AddressLike];
    type OutputTuple = [priceFeed: string];
    interface OutputObject {
        priceFeed: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetSupportedOptionTypesEvent$6 {
    type InputTuple = [dstEid: BigNumberish, optionTypes: BigNumberish[]];
    type OutputTuple = [dstEid: bigint, optionTypes: bigint[]];
    interface OutputObject {
        dstEid: bigint;
        optionTypes: bigint[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetWorkerLibEvent$6 {
    type InputTuple = [workerLib: AddressLike];
    type OutputTuple = [workerLib: string];
    interface OutputObject {
        workerLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$6 {
    type InputTuple = [
        lib: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [lib: string, to: string, amount: bigint];
    interface OutputObject {
        lib: string;
        to: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace IExecutor$3 {
    type DstConfigParamStruct = {
        dstEid: BigNumberish;
        baseGas: BigNumberish;
        multiplierBps: BigNumberish;
        floorMarginUSD: BigNumberish;
        nativeDropCap: BigNumberish;
    };
    type DstConfigParamStructOutput = [
        dstEid: bigint,
        baseGas: bigint,
        multiplierBps: bigint,
        floorMarginUSD: bigint,
        nativeDropCap: bigint
    ] & {
        dstEid: bigint;
        baseGas: bigint;
        multiplierBps: bigint;
        floorMarginUSD: bigint;
        nativeDropCap: bigint;
    };
}
interface IExecutor$3 extends BaseContract {
    connect(runner?: ContractRunner | null): IExecutor$3;
    waitForDeployment(): Promise<this>;
    interface: IExecutorInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    assignJob: TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    defaultMultiplierBps: TypedContractMethod<[], [bigint], "view">;
    dstConfig: TypedContractMethod<[
        _dstEid: BigNumberish
    ], [
        [bigint, bigint, bigint, bigint]
    ], "view">;
    getFee: TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        bigint[]
    ], "view">;
    priceFeed: TypedContractMethod<[], [string], "view">;
    setDefaultMultiplierBps: TypedContractMethod<[
        _multiplierBps: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setPriceFeed: TypedContractMethod<[
        _priceFeed: AddressLike
    ], [
        void
    ], "nonpayable">;
    setSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    withdrawFee: TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "assignJob"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFunction(nameOrSignature: "defaultMultiplierBps"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "dstConfig"): TypedContractMethod<[
        _dstEid: BigNumberish
    ], [
        [bigint, bigint, bigint, bigint]
    ], "view">;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getSupportedOptionTypes"): TypedContractMethod<[_eid: BigNumberish], [bigint[]], "view">;
    getFunction(nameOrSignature: "priceFeed"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "setDefaultMultiplierBps"): TypedContractMethod<[_multiplierBps: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPriceFeed"): TypedContractMethod<[_priceFeed: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setSupportedOptionTypes"): TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "DstConfigSet"): TypedContractEvent<DstConfigSetEvent$1.InputTuple, DstConfigSetEvent$1.OutputTuple, DstConfigSetEvent$1.OutputObject>;
    getEvent(key: "NativeDropFailed"): TypedContractEvent<NativeDropFailedEvent$1.InputTuple, NativeDropFailedEvent$1.OutputTuple, NativeDropFailedEvent$1.OutputObject>;
    getEvent(key: "NativeDropSucceeded"): TypedContractEvent<NativeDropSucceededEvent$1.InputTuple, NativeDropSucceededEvent$1.OutputTuple, NativeDropSucceededEvent$1.OutputObject>;
    getEvent(key: "SetDefaultMultiplierBps"): TypedContractEvent<SetDefaultMultiplierBpsEvent$6.InputTuple, SetDefaultMultiplierBpsEvent$6.OutputTuple, SetDefaultMultiplierBpsEvent$6.OutputObject>;
    getEvent(key: "SetPriceFeed"): TypedContractEvent<SetPriceFeedEvent$6.InputTuple, SetPriceFeedEvent$6.OutputTuple, SetPriceFeedEvent$6.OutputObject>;
    getEvent(key: "SetSupportedOptionTypes"): TypedContractEvent<SetSupportedOptionTypesEvent$6.InputTuple, SetSupportedOptionTypesEvent$6.OutputTuple, SetSupportedOptionTypesEvent$6.OutputObject>;
    getEvent(key: "SetWorkerLib"): TypedContractEvent<SetWorkerLibEvent$6.InputTuple, SetWorkerLibEvent$6.OutputTuple, SetWorkerLibEvent$6.OutputObject>;
    getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$6.InputTuple, WithdrawEvent$6.OutputTuple, WithdrawEvent$6.OutputObject>;
    filters: {
        "DstConfigSet(tuple[])": TypedContractEvent<DstConfigSetEvent$1.InputTuple, DstConfigSetEvent$1.OutputTuple, DstConfigSetEvent$1.OutputObject>;
        DstConfigSet: TypedContractEvent<DstConfigSetEvent$1.InputTuple, DstConfigSetEvent$1.OutputTuple, DstConfigSetEvent$1.OutputObject>;
        "NativeDropFailed(tuple,uint32,address,address,uint256)": TypedContractEvent<NativeDropFailedEvent$1.InputTuple, NativeDropFailedEvent$1.OutputTuple, NativeDropFailedEvent$1.OutputObject>;
        NativeDropFailed: TypedContractEvent<NativeDropFailedEvent$1.InputTuple, NativeDropFailedEvent$1.OutputTuple, NativeDropFailedEvent$1.OutputObject>;
        "NativeDropSucceeded(tuple,uint32,address,address,uint256)": TypedContractEvent<NativeDropSucceededEvent$1.InputTuple, NativeDropSucceededEvent$1.OutputTuple, NativeDropSucceededEvent$1.OutputObject>;
        NativeDropSucceeded: TypedContractEvent<NativeDropSucceededEvent$1.InputTuple, NativeDropSucceededEvent$1.OutputTuple, NativeDropSucceededEvent$1.OutputObject>;
        "SetDefaultMultiplierBps(uint16)": TypedContractEvent<SetDefaultMultiplierBpsEvent$6.InputTuple, SetDefaultMultiplierBpsEvent$6.OutputTuple, SetDefaultMultiplierBpsEvent$6.OutputObject>;
        SetDefaultMultiplierBps: TypedContractEvent<SetDefaultMultiplierBpsEvent$6.InputTuple, SetDefaultMultiplierBpsEvent$6.OutputTuple, SetDefaultMultiplierBpsEvent$6.OutputObject>;
        "SetPriceFeed(address)": TypedContractEvent<SetPriceFeedEvent$6.InputTuple, SetPriceFeedEvent$6.OutputTuple, SetPriceFeedEvent$6.OutputObject>;
        SetPriceFeed: TypedContractEvent<SetPriceFeedEvent$6.InputTuple, SetPriceFeedEvent$6.OutputTuple, SetPriceFeedEvent$6.OutputObject>;
        "SetSupportedOptionTypes(uint32,uint8[])": TypedContractEvent<SetSupportedOptionTypesEvent$6.InputTuple, SetSupportedOptionTypesEvent$6.OutputTuple, SetSupportedOptionTypesEvent$6.OutputObject>;
        SetSupportedOptionTypes: TypedContractEvent<SetSupportedOptionTypesEvent$6.InputTuple, SetSupportedOptionTypesEvent$6.OutputTuple, SetSupportedOptionTypesEvent$6.OutputObject>;
        "SetWorkerLib(address)": TypedContractEvent<SetWorkerLibEvent$6.InputTuple, SetWorkerLibEvent$6.OutputTuple, SetWorkerLibEvent$6.OutputObject>;
        SetWorkerLib: TypedContractEvent<SetWorkerLibEvent$6.InputTuple, SetWorkerLibEvent$6.OutputTuple, SetWorkerLibEvent$6.OutputObject>;
        "Withdraw(address,address,uint256)": TypedContractEvent<WithdrawEvent$6.InputTuple, WithdrawEvent$6.OutputTuple, WithdrawEvent$6.OutputObject>;
        Withdraw: TypedContractEvent<WithdrawEvent$6.InputTuple, WithdrawEvent$6.OutputTuple, WithdrawEvent$6.OutputObject>;
    };
}

declare namespace IExecutor$2 {
    type DstConfigStruct = {
        baseGas: BigNumberish;
        multiplierBps: BigNumberish;
        floorMarginUSD: BigNumberish;
        nativeDropCap: BigNumberish;
    };
    type DstConfigStructOutput = [
        baseGas: bigint,
        multiplierBps: bigint,
        floorMarginUSD: bigint,
        nativeDropCap: bigint
    ] & {
        baseGas: bigint;
        multiplierBps: bigint;
        floorMarginUSD: bigint;
        nativeDropCap: bigint;
    };
}
interface IExecutorFeeLibInterface extends Interface {
    getFunction(nameOrSignature: "getFee" | "getFeeOnSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        IExecutorFeeLib$1.FeeParamsStruct,
        IExecutor$2.DstConfigStruct,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IExecutorFeeLib$1.FeeParamsStruct,
        IExecutor$2.DstConfigStruct,
        BytesLike
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
}
declare namespace IExecutorFeeLib$1 {
    type FeeParamsStruct = {
        priceFeed: AddressLike;
        dstEid: BigNumberish;
        sender: AddressLike;
        calldataSize: BigNumberish;
        defaultMultiplierBps: BigNumberish;
    };
    type FeeParamsStructOutput = [
        priceFeed: string,
        dstEid: bigint,
        sender: string,
        calldataSize: bigint,
        defaultMultiplierBps: bigint
    ] & {
        priceFeed: string;
        dstEid: bigint;
        sender: string;
        calldataSize: bigint;
        defaultMultiplierBps: bigint;
    };
}
interface IExecutorFeeLib$1 extends BaseContract {
    connect(runner?: ContractRunner | null): IExecutorFeeLib$1;
    waitForDeployment(): Promise<this>;
    interface: IExecutorFeeLibInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFee: TypedContractMethod<[
        _params: IExecutorFeeLib$1.FeeParamsStruct,
        _dstConfig: IExecutor$2.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFeeOnSend: TypedContractMethod<[
        _params: IExecutorFeeLib$1.FeeParamsStruct,
        _dstConfig: IExecutor$2.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        _params: IExecutorFeeLib$1.FeeParamsStruct,
        _dstConfig: IExecutor$2.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getFeeOnSend"): TypedContractMethod<[
        _params: IExecutorFeeLib$1.FeeParamsStruct,
        _dstConfig: IExecutor$2.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    filters: {};
}

interface ILayerZeroExecutorInterface extends Interface {
    getFunction(nameOrSignature: "assignJob" | "getFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [BigNumberish, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "getFee", values: [BigNumberish, AddressLike, BigNumberish, BytesLike]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
}
interface ILayerZeroExecutor extends BaseContract {
    connect(runner?: ContractRunner | null): ILayerZeroExecutor;
    waitForDeployment(): Promise<this>;
    interface: ILayerZeroExecutorInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    assignJob: TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFee: TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "assignJob"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    filters: {};
}

interface ILayerZeroPriceFeedInterface extends Interface {
    getFunction(nameOrSignature: "estimateFeeByEid" | "estimateFeeOnSend" | "getFee" | "getPrice" | "getPriceRatioDenominator" | "nativeTokenPriceUSD"): FunctionFragment;
    encodeFunctionData(functionFragment: "estimateFeeByEid", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "estimateFeeOnSend", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getFee", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPrice", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPriceRatioDenominator", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeTokenPriceUSD", values?: undefined): string;
    decodeFunctionResult(functionFragment: "estimateFeeByEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPriceRatioDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeTokenPriceUSD", data: BytesLike): Result;
}
declare namespace ILayerZeroPriceFeed$1 {
    type PriceStruct = {
        priceRatio: BigNumberish;
        gasPriceInUnit: BigNumberish;
        gasPerByte: BigNumberish;
    };
    type PriceStructOutput = [
        priceRatio: bigint,
        gasPriceInUnit: bigint,
        gasPerByte: bigint
    ] & {
        priceRatio: bigint;
        gasPriceInUnit: bigint;
        gasPerByte: bigint;
    };
}
interface ILayerZeroPriceFeed$1 extends BaseContract {
    connect(runner?: ContractRunner | null): ILayerZeroPriceFeed$1;
    waitForDeployment(): Promise<this>;
    interface: ILayerZeroPriceFeedInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    estimateFeeByEid: TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            fee: bigint;
            priceRatio: bigint;
            priceRatioDenominator: bigint;
            nativePriceUSD: bigint;
        }
    ], "view">;
    estimateFeeOnSend: TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            fee: bigint;
            priceRatio: bigint;
            priceRatioDenominator: bigint;
            nativePriceUSD: bigint;
        }
    ], "payable">;
    getFee: TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        bigint
    ], "view">;
    getPrice: TypedContractMethod<[
        _dstEid: BigNumberish
    ], [
        ILayerZeroPriceFeed$1.PriceStructOutput
    ], "view">;
    getPriceRatioDenominator: TypedContractMethod<[], [bigint], "view">;
    nativeTokenPriceUSD: TypedContractMethod<[], [bigint], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "estimateFeeByEid"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            fee: bigint;
            priceRatio: bigint;
            priceRatioDenominator: bigint;
            nativePriceUSD: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "estimateFeeOnSend"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            fee: bigint;
            priceRatio: bigint;
            priceRatioDenominator: bigint;
            nativePriceUSD: bigint;
        }
    ], "payable">;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getPrice"): TypedContractMethod<[
        _dstEid: BigNumberish
    ], [
        ILayerZeroPriceFeed$1.PriceStructOutput
    ], "view">;
    getFunction(nameOrSignature: "getPriceRatioDenominator"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "nativeTokenPriceUSD"): TypedContractMethod<[], [bigint], "view">;
    filters: {};
}

interface ILayerZeroTreasuryInterface extends Interface {
    getFunction(nameOrSignature: "getFee" | "payFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [AddressLike, BigNumberish, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "payFee", values: [AddressLike, BigNumberish, BigNumberish, boolean]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
}
interface ILayerZeroTreasury extends BaseContract {
    connect(runner?: ContractRunner | null): ILayerZeroTreasury;
    waitForDeployment(): Promise<this>;
    interface: ILayerZeroTreasuryInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFee: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _totalNativeFee: BigNumberish,
        _payInLzToken: boolean
    ], [
        bigint
    ], "view">;
    payFee: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _totalNativeFee: BigNumberish,
        _payInLzToken: boolean
    ], [
        bigint
    ], "payable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _totalNativeFee: BigNumberish,
        _payInLzToken: boolean
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "payFee"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _totalNativeFee: BigNumberish,
        _payInLzToken: boolean
    ], [
        bigint
    ], "payable">;
    filters: {};
}

interface ILayerZeroUltraLightNodeV2Interface extends Interface {
    getFunction(nameOrSignature: "accruedNativeFee" | "getAppConfig" | "updateHash" | "validateTransactionProof" | "withdrawNative" | "withdrawZRO"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AddInboundProofLibraryForChain" | "AppConfigUpdated" | "EnableSupportedOutboundProof" | "HashReceived" | "InvalidDst" | "Packet" | "PacketReceived" | "RelayerParams" | "SetChainAddressSize" | "SetDefaultAdapterParamsForChainId" | "SetDefaultConfigForChainId" | "SetLayerZeroToken" | "SetRemoteUln" | "SetTreasury" | "WithdrawNative" | "WithdrawZRO"): EventFragment;
    encodeFunctionData(functionFragment: "accruedNativeFee", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getAppConfig", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "updateHash", values: [BigNumberish, BytesLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "validateTransactionProof", values: [
        BigNumberish,
        AddressLike,
        BigNumberish,
        BytesLike,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "withdrawNative", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawZRO", values: [AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "accruedNativeFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validateTransactionProof", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawNative", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawZRO", data: BytesLike): Result;
}
declare namespace AddInboundProofLibraryForChainEvent {
    type InputTuple = [chainId: BigNumberish, lib: AddressLike];
    type OutputTuple = [chainId: bigint, lib: string];
    interface OutputObject {
        chainId: bigint;
        lib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace AppConfigUpdatedEvent {
    type InputTuple = [
        userApplication: AddressLike,
        configType: BigNumberish,
        newConfig: BytesLike
    ];
    type OutputTuple = [
        userApplication: string,
        configType: bigint,
        newConfig: string
    ];
    interface OutputObject {
        userApplication: string;
        configType: bigint;
        newConfig: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace EnableSupportedOutboundProofEvent {
    type InputTuple = [chainId: BigNumberish, proofType: BigNumberish];
    type OutputTuple = [chainId: bigint, proofType: bigint];
    interface OutputObject {
        chainId: bigint;
        proofType: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace HashReceivedEvent {
    type InputTuple = [
        srcChainId: BigNumberish,
        oracle: AddressLike,
        lookupHash: BytesLike,
        blockData: BytesLike,
        confirmations: BigNumberish
    ];
    type OutputTuple = [
        srcChainId: bigint,
        oracle: string,
        lookupHash: string,
        blockData: string,
        confirmations: bigint
    ];
    interface OutputObject {
        srcChainId: bigint;
        oracle: string;
        lookupHash: string;
        blockData: string;
        confirmations: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace InvalidDstEvent {
    type InputTuple = [
        srcChainId: BigNumberish,
        srcAddress: BytesLike,
        dstAddress: AddressLike,
        nonce: BigNumberish,
        payloadHash: BytesLike
    ];
    type OutputTuple = [
        srcChainId: bigint,
        srcAddress: string,
        dstAddress: string,
        nonce: bigint,
        payloadHash: string
    ];
    interface OutputObject {
        srcChainId: bigint;
        srcAddress: string;
        dstAddress: string;
        nonce: bigint;
        payloadHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PacketEvent {
    type InputTuple = [payload: BytesLike];
    type OutputTuple = [payload: string];
    interface OutputObject {
        payload: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PacketReceivedEvent {
    type InputTuple = [
        srcChainId: BigNumberish,
        srcAddress: BytesLike,
        dstAddress: AddressLike,
        nonce: BigNumberish,
        payloadHash: BytesLike
    ];
    type OutputTuple = [
        srcChainId: bigint,
        srcAddress: string,
        dstAddress: string,
        nonce: bigint,
        payloadHash: string
    ];
    interface OutputObject {
        srcChainId: bigint;
        srcAddress: string;
        dstAddress: string;
        nonce: bigint;
        payloadHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RelayerParamsEvent {
    type InputTuple = [
        adapterParams: BytesLike,
        outboundProofType: BigNumberish
    ];
    type OutputTuple = [adapterParams: string, outboundProofType: bigint];
    interface OutputObject {
        adapterParams: string;
        outboundProofType: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetChainAddressSizeEvent {
    type InputTuple = [chainId: BigNumberish, size: BigNumberish];
    type OutputTuple = [chainId: bigint, size: bigint];
    interface OutputObject {
        chainId: bigint;
        size: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetDefaultAdapterParamsForChainIdEvent {
    type InputTuple = [
        chainId: BigNumberish,
        proofType: BigNumberish,
        adapterParams: BytesLike
    ];
    type OutputTuple = [
        chainId: bigint,
        proofType: bigint,
        adapterParams: string
    ];
    interface OutputObject {
        chainId: bigint;
        proofType: bigint;
        adapterParams: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetDefaultConfigForChainIdEvent {
    type InputTuple = [
        chainId: BigNumberish,
        inboundProofLib: BigNumberish,
        inboundBlockConfirm: BigNumberish,
        relayer: AddressLike,
        outboundProofType: BigNumberish,
        outboundBlockConfirm: BigNumberish,
        oracle: AddressLike
    ];
    type OutputTuple = [
        chainId: bigint,
        inboundProofLib: bigint,
        inboundBlockConfirm: bigint,
        relayer: string,
        outboundProofType: bigint,
        outboundBlockConfirm: bigint,
        oracle: string
    ];
    interface OutputObject {
        chainId: bigint;
        inboundProofLib: bigint;
        inboundBlockConfirm: bigint;
        relayer: string;
        outboundProofType: bigint;
        outboundBlockConfirm: bigint;
        oracle: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetLayerZeroTokenEvent {
    type InputTuple = [tokenAddress: AddressLike];
    type OutputTuple = [tokenAddress: string];
    interface OutputObject {
        tokenAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetRemoteUlnEvent {
    type InputTuple = [chainId: BigNumberish, uln: BytesLike];
    type OutputTuple = [chainId: bigint, uln: string];
    interface OutputObject {
        chainId: bigint;
        uln: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetTreasuryEvent {
    type InputTuple = [treasuryAddress: AddressLike];
    type OutputTuple = [treasuryAddress: string];
    interface OutputObject {
        treasuryAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawNativeEvent {
    type InputTuple = [
        msgSender: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [msgSender: string, to: string, amount: bigint];
    interface OutputObject {
        msgSender: string;
        to: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawZROEvent {
    type InputTuple = [
        msgSender: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [msgSender: string, to: string, amount: bigint];
    interface OutputObject {
        msgSender: string;
        to: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ILayerZeroUltraLightNodeV2 {
    type ApplicationConfigurationStruct = {
        inboundProofLibraryVersion: BigNumberish;
        inboundBlockConfirmations: BigNumberish;
        relayer: AddressLike;
        outboundProofType: BigNumberish;
        outboundBlockConfirmations: BigNumberish;
        oracle: AddressLike;
    };
    type ApplicationConfigurationStructOutput = [
        inboundProofLibraryVersion: bigint,
        inboundBlockConfirmations: bigint,
        relayer: string,
        outboundProofType: bigint,
        outboundBlockConfirmations: bigint,
        oracle: string
    ] & {
        inboundProofLibraryVersion: bigint;
        inboundBlockConfirmations: bigint;
        relayer: string;
        outboundProofType: bigint;
        outboundBlockConfirmations: bigint;
        oracle: string;
    };
}
interface ILayerZeroUltraLightNodeV2 extends BaseContract {
    connect(runner?: ContractRunner | null): ILayerZeroUltraLightNodeV2;
    waitForDeployment(): Promise<this>;
    interface: ILayerZeroUltraLightNodeV2Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    accruedNativeFee: TypedContractMethod<[
        _address: AddressLike
    ], [
        bigint
    ], "view">;
    getAppConfig: TypedContractMethod<[
        _remoteChainId: BigNumberish,
        _userApplicationAddress: AddressLike
    ], [
        ILayerZeroUltraLightNodeV2.ApplicationConfigurationStructOutput
    ], "view">;
    updateHash: TypedContractMethod<[
        _srcChainId: BigNumberish,
        _lookupHash: BytesLike,
        _confirmations: BigNumberish,
        _blockData: BytesLike
    ], [
        void
    ], "nonpayable">;
    validateTransactionProof: TypedContractMethod<[
        _srcChainId: BigNumberish,
        _dstAddress: AddressLike,
        _gasLimit: BigNumberish,
        _lookupHash: BytesLike,
        _blockData: BytesLike,
        _transactionProof: BytesLike
    ], [
        void
    ], "nonpayable">;
    withdrawNative: TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawZRO: TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "accruedNativeFee"): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getAppConfig"): TypedContractMethod<[
        _remoteChainId: BigNumberish,
        _userApplicationAddress: AddressLike
    ], [
        ILayerZeroUltraLightNodeV2.ApplicationConfigurationStructOutput
    ], "view">;
    getFunction(nameOrSignature: "updateHash"): TypedContractMethod<[
        _srcChainId: BigNumberish,
        _lookupHash: BytesLike,
        _confirmations: BigNumberish,
        _blockData: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "validateTransactionProof"): TypedContractMethod<[
        _srcChainId: BigNumberish,
        _dstAddress: AddressLike,
        _gasLimit: BigNumberish,
        _lookupHash: BytesLike,
        _blockData: BytesLike,
        _transactionProof: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawNative"): TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawZRO"): TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "AddInboundProofLibraryForChain"): TypedContractEvent<AddInboundProofLibraryForChainEvent.InputTuple, AddInboundProofLibraryForChainEvent.OutputTuple, AddInboundProofLibraryForChainEvent.OutputObject>;
    getEvent(key: "AppConfigUpdated"): TypedContractEvent<AppConfigUpdatedEvent.InputTuple, AppConfigUpdatedEvent.OutputTuple, AppConfigUpdatedEvent.OutputObject>;
    getEvent(key: "EnableSupportedOutboundProof"): TypedContractEvent<EnableSupportedOutboundProofEvent.InputTuple, EnableSupportedOutboundProofEvent.OutputTuple, EnableSupportedOutboundProofEvent.OutputObject>;
    getEvent(key: "HashReceived"): TypedContractEvent<HashReceivedEvent.InputTuple, HashReceivedEvent.OutputTuple, HashReceivedEvent.OutputObject>;
    getEvent(key: "InvalidDst"): TypedContractEvent<InvalidDstEvent.InputTuple, InvalidDstEvent.OutputTuple, InvalidDstEvent.OutputObject>;
    getEvent(key: "Packet"): TypedContractEvent<PacketEvent.InputTuple, PacketEvent.OutputTuple, PacketEvent.OutputObject>;
    getEvent(key: "PacketReceived"): TypedContractEvent<PacketReceivedEvent.InputTuple, PacketReceivedEvent.OutputTuple, PacketReceivedEvent.OutputObject>;
    getEvent(key: "RelayerParams"): TypedContractEvent<RelayerParamsEvent.InputTuple, RelayerParamsEvent.OutputTuple, RelayerParamsEvent.OutputObject>;
    getEvent(key: "SetChainAddressSize"): TypedContractEvent<SetChainAddressSizeEvent.InputTuple, SetChainAddressSizeEvent.OutputTuple, SetChainAddressSizeEvent.OutputObject>;
    getEvent(key: "SetDefaultAdapterParamsForChainId"): TypedContractEvent<SetDefaultAdapterParamsForChainIdEvent.InputTuple, SetDefaultAdapterParamsForChainIdEvent.OutputTuple, SetDefaultAdapterParamsForChainIdEvent.OutputObject>;
    getEvent(key: "SetDefaultConfigForChainId"): TypedContractEvent<SetDefaultConfigForChainIdEvent.InputTuple, SetDefaultConfigForChainIdEvent.OutputTuple, SetDefaultConfigForChainIdEvent.OutputObject>;
    getEvent(key: "SetLayerZeroToken"): TypedContractEvent<SetLayerZeroTokenEvent.InputTuple, SetLayerZeroTokenEvent.OutputTuple, SetLayerZeroTokenEvent.OutputObject>;
    getEvent(key: "SetRemoteUln"): TypedContractEvent<SetRemoteUlnEvent.InputTuple, SetRemoteUlnEvent.OutputTuple, SetRemoteUlnEvent.OutputObject>;
    getEvent(key: "SetTreasury"): TypedContractEvent<SetTreasuryEvent.InputTuple, SetTreasuryEvent.OutputTuple, SetTreasuryEvent.OutputObject>;
    getEvent(key: "WithdrawNative"): TypedContractEvent<WithdrawNativeEvent.InputTuple, WithdrawNativeEvent.OutputTuple, WithdrawNativeEvent.OutputObject>;
    getEvent(key: "WithdrawZRO"): TypedContractEvent<WithdrawZROEvent.InputTuple, WithdrawZROEvent.OutputTuple, WithdrawZROEvent.OutputObject>;
    filters: {
        "AddInboundProofLibraryForChain(uint16,address)": TypedContractEvent<AddInboundProofLibraryForChainEvent.InputTuple, AddInboundProofLibraryForChainEvent.OutputTuple, AddInboundProofLibraryForChainEvent.OutputObject>;
        AddInboundProofLibraryForChain: TypedContractEvent<AddInboundProofLibraryForChainEvent.InputTuple, AddInboundProofLibraryForChainEvent.OutputTuple, AddInboundProofLibraryForChainEvent.OutputObject>;
        "AppConfigUpdated(address,uint256,bytes)": TypedContractEvent<AppConfigUpdatedEvent.InputTuple, AppConfigUpdatedEvent.OutputTuple, AppConfigUpdatedEvent.OutputObject>;
        AppConfigUpdated: TypedContractEvent<AppConfigUpdatedEvent.InputTuple, AppConfigUpdatedEvent.OutputTuple, AppConfigUpdatedEvent.OutputObject>;
        "EnableSupportedOutboundProof(uint16,uint16)": TypedContractEvent<EnableSupportedOutboundProofEvent.InputTuple, EnableSupportedOutboundProofEvent.OutputTuple, EnableSupportedOutboundProofEvent.OutputObject>;
        EnableSupportedOutboundProof: TypedContractEvent<EnableSupportedOutboundProofEvent.InputTuple, EnableSupportedOutboundProofEvent.OutputTuple, EnableSupportedOutboundProofEvent.OutputObject>;
        "HashReceived(uint16,address,bytes32,bytes32,uint256)": TypedContractEvent<HashReceivedEvent.InputTuple, HashReceivedEvent.OutputTuple, HashReceivedEvent.OutputObject>;
        HashReceived: TypedContractEvent<HashReceivedEvent.InputTuple, HashReceivedEvent.OutputTuple, HashReceivedEvent.OutputObject>;
        "InvalidDst(uint16,bytes,address,uint64,bytes32)": TypedContractEvent<InvalidDstEvent.InputTuple, InvalidDstEvent.OutputTuple, InvalidDstEvent.OutputObject>;
        InvalidDst: TypedContractEvent<InvalidDstEvent.InputTuple, InvalidDstEvent.OutputTuple, InvalidDstEvent.OutputObject>;
        "Packet(bytes)": TypedContractEvent<PacketEvent.InputTuple, PacketEvent.OutputTuple, PacketEvent.OutputObject>;
        Packet: TypedContractEvent<PacketEvent.InputTuple, PacketEvent.OutputTuple, PacketEvent.OutputObject>;
        "PacketReceived(uint16,bytes,address,uint64,bytes32)": TypedContractEvent<PacketReceivedEvent.InputTuple, PacketReceivedEvent.OutputTuple, PacketReceivedEvent.OutputObject>;
        PacketReceived: TypedContractEvent<PacketReceivedEvent.InputTuple, PacketReceivedEvent.OutputTuple, PacketReceivedEvent.OutputObject>;
        "RelayerParams(bytes,uint16)": TypedContractEvent<RelayerParamsEvent.InputTuple, RelayerParamsEvent.OutputTuple, RelayerParamsEvent.OutputObject>;
        RelayerParams: TypedContractEvent<RelayerParamsEvent.InputTuple, RelayerParamsEvent.OutputTuple, RelayerParamsEvent.OutputObject>;
        "SetChainAddressSize(uint16,uint256)": TypedContractEvent<SetChainAddressSizeEvent.InputTuple, SetChainAddressSizeEvent.OutputTuple, SetChainAddressSizeEvent.OutputObject>;
        SetChainAddressSize: TypedContractEvent<SetChainAddressSizeEvent.InputTuple, SetChainAddressSizeEvent.OutputTuple, SetChainAddressSizeEvent.OutputObject>;
        "SetDefaultAdapterParamsForChainId(uint16,uint16,bytes)": TypedContractEvent<SetDefaultAdapterParamsForChainIdEvent.InputTuple, SetDefaultAdapterParamsForChainIdEvent.OutputTuple, SetDefaultAdapterParamsForChainIdEvent.OutputObject>;
        SetDefaultAdapterParamsForChainId: TypedContractEvent<SetDefaultAdapterParamsForChainIdEvent.InputTuple, SetDefaultAdapterParamsForChainIdEvent.OutputTuple, SetDefaultAdapterParamsForChainIdEvent.OutputObject>;
        "SetDefaultConfigForChainId(uint16,uint16,uint64,address,uint16,uint64,address)": TypedContractEvent<SetDefaultConfigForChainIdEvent.InputTuple, SetDefaultConfigForChainIdEvent.OutputTuple, SetDefaultConfigForChainIdEvent.OutputObject>;
        SetDefaultConfigForChainId: TypedContractEvent<SetDefaultConfigForChainIdEvent.InputTuple, SetDefaultConfigForChainIdEvent.OutputTuple, SetDefaultConfigForChainIdEvent.OutputObject>;
        "SetLayerZeroToken(address)": TypedContractEvent<SetLayerZeroTokenEvent.InputTuple, SetLayerZeroTokenEvent.OutputTuple, SetLayerZeroTokenEvent.OutputObject>;
        SetLayerZeroToken: TypedContractEvent<SetLayerZeroTokenEvent.InputTuple, SetLayerZeroTokenEvent.OutputTuple, SetLayerZeroTokenEvent.OutputObject>;
        "SetRemoteUln(uint16,bytes32)": TypedContractEvent<SetRemoteUlnEvent.InputTuple, SetRemoteUlnEvent.OutputTuple, SetRemoteUlnEvent.OutputObject>;
        SetRemoteUln: TypedContractEvent<SetRemoteUlnEvent.InputTuple, SetRemoteUlnEvent.OutputTuple, SetRemoteUlnEvent.OutputObject>;
        "SetTreasury(address)": TypedContractEvent<SetTreasuryEvent.InputTuple, SetTreasuryEvent.OutputTuple, SetTreasuryEvent.OutputObject>;
        SetTreasury: TypedContractEvent<SetTreasuryEvent.InputTuple, SetTreasuryEvent.OutputTuple, SetTreasuryEvent.OutputObject>;
        "WithdrawNative(address,address,uint256)": TypedContractEvent<WithdrawNativeEvent.InputTuple, WithdrawNativeEvent.OutputTuple, WithdrawNativeEvent.OutputObject>;
        WithdrawNative: TypedContractEvent<WithdrawNativeEvent.InputTuple, WithdrawNativeEvent.OutputTuple, WithdrawNativeEvent.OutputObject>;
        "WithdrawZRO(address,address,uint256)": TypedContractEvent<WithdrawZROEvent.InputTuple, WithdrawZROEvent.OutputTuple, WithdrawZROEvent.OutputObject>;
        WithdrawZRO: TypedContractEvent<WithdrawZROEvent.InputTuple, WithdrawZROEvent.OutputTuple, WithdrawZROEvent.OutputObject>;
    };
}

interface IWorkerInterface extends Interface {
    getFunction(nameOrSignature: "defaultMultiplierBps" | "getSupportedOptionTypes" | "priceFeed" | "setDefaultMultiplierBps" | "setPriceFeed" | "setSupportedOptionTypes" | "withdrawFee"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps" | "SetPriceFeed" | "SetSupportedOptionTypes" | "SetWorkerLib" | "Withdraw"): EventFragment;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [BigNumberish, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
}
declare namespace SetDefaultMultiplierBpsEvent$5 {
    type InputTuple = [multiplierBps: BigNumberish];
    type OutputTuple = [multiplierBps: bigint];
    interface OutputObject {
        multiplierBps: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPriceFeedEvent$5 {
    type InputTuple = [priceFeed: AddressLike];
    type OutputTuple = [priceFeed: string];
    interface OutputObject {
        priceFeed: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetSupportedOptionTypesEvent$5 {
    type InputTuple = [dstEid: BigNumberish, optionTypes: BigNumberish[]];
    type OutputTuple = [dstEid: bigint, optionTypes: bigint[]];
    interface OutputObject {
        dstEid: bigint;
        optionTypes: bigint[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetWorkerLibEvent$5 {
    type InputTuple = [workerLib: AddressLike];
    type OutputTuple = [workerLib: string];
    interface OutputObject {
        workerLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$5 {
    type InputTuple = [
        lib: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [lib: string, to: string, amount: bigint];
    interface OutputObject {
        lib: string;
        to: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface IWorker extends BaseContract {
    connect(runner?: ContractRunner | null): IWorker;
    waitForDeployment(): Promise<this>;
    interface: IWorkerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    defaultMultiplierBps: TypedContractMethod<[], [bigint], "view">;
    getSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        bigint[]
    ], "view">;
    priceFeed: TypedContractMethod<[], [string], "view">;
    setDefaultMultiplierBps: TypedContractMethod<[
        _multiplierBps: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setPriceFeed: TypedContractMethod<[
        _priceFeed: AddressLike
    ], [
        void
    ], "nonpayable">;
    setSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    withdrawFee: TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "defaultMultiplierBps"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getSupportedOptionTypes"): TypedContractMethod<[_eid: BigNumberish], [bigint[]], "view">;
    getFunction(nameOrSignature: "priceFeed"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "setDefaultMultiplierBps"): TypedContractMethod<[_multiplierBps: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPriceFeed"): TypedContractMethod<[_priceFeed: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setSupportedOptionTypes"): TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "SetDefaultMultiplierBps"): TypedContractEvent<SetDefaultMultiplierBpsEvent$5.InputTuple, SetDefaultMultiplierBpsEvent$5.OutputTuple, SetDefaultMultiplierBpsEvent$5.OutputObject>;
    getEvent(key: "SetPriceFeed"): TypedContractEvent<SetPriceFeedEvent$5.InputTuple, SetPriceFeedEvent$5.OutputTuple, SetPriceFeedEvent$5.OutputObject>;
    getEvent(key: "SetSupportedOptionTypes"): TypedContractEvent<SetSupportedOptionTypesEvent$5.InputTuple, SetSupportedOptionTypesEvent$5.OutputTuple, SetSupportedOptionTypesEvent$5.OutputObject>;
    getEvent(key: "SetWorkerLib"): TypedContractEvent<SetWorkerLibEvent$5.InputTuple, SetWorkerLibEvent$5.OutputTuple, SetWorkerLibEvent$5.OutputObject>;
    getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$5.InputTuple, WithdrawEvent$5.OutputTuple, WithdrawEvent$5.OutputObject>;
    filters: {
        "SetDefaultMultiplierBps(uint16)": TypedContractEvent<SetDefaultMultiplierBpsEvent$5.InputTuple, SetDefaultMultiplierBpsEvent$5.OutputTuple, SetDefaultMultiplierBpsEvent$5.OutputObject>;
        SetDefaultMultiplierBps: TypedContractEvent<SetDefaultMultiplierBpsEvent$5.InputTuple, SetDefaultMultiplierBpsEvent$5.OutputTuple, SetDefaultMultiplierBpsEvent$5.OutputObject>;
        "SetPriceFeed(address)": TypedContractEvent<SetPriceFeedEvent$5.InputTuple, SetPriceFeedEvent$5.OutputTuple, SetPriceFeedEvent$5.OutputObject>;
        SetPriceFeed: TypedContractEvent<SetPriceFeedEvent$5.InputTuple, SetPriceFeedEvent$5.OutputTuple, SetPriceFeedEvent$5.OutputObject>;
        "SetSupportedOptionTypes(uint32,uint8[])": TypedContractEvent<SetSupportedOptionTypesEvent$5.InputTuple, SetSupportedOptionTypesEvent$5.OutputTuple, SetSupportedOptionTypesEvent$5.OutputObject>;
        SetSupportedOptionTypes: TypedContractEvent<SetSupportedOptionTypesEvent$5.InputTuple, SetSupportedOptionTypesEvent$5.OutputTuple, SetSupportedOptionTypesEvent$5.OutputObject>;
        "SetWorkerLib(address)": TypedContractEvent<SetWorkerLibEvent$5.InputTuple, SetWorkerLibEvent$5.OutputTuple, SetWorkerLibEvent$5.OutputObject>;
        SetWorkerLib: TypedContractEvent<SetWorkerLibEvent$5.InputTuple, SetWorkerLibEvent$5.OutputTuple, SetWorkerLibEvent$5.OutputObject>;
        "Withdraw(address,address,uint256)": TypedContractEvent<WithdrawEvent$5.InputTuple, WithdrawEvent$5.OutputTuple, WithdrawEvent$5.OutputObject>;
        Withdraw: TypedContractEvent<WithdrawEvent$5.InputTuple, WithdrawEvent$5.OutputTuple, WithdrawEvent$5.OutputObject>;
    };
}

type index$1f_ILayerZeroExecutor = ILayerZeroExecutor;
type index$1f_ILayerZeroTreasury = ILayerZeroTreasury;
type index$1f_ILayerZeroUltraLightNodeV2 = ILayerZeroUltraLightNodeV2;
type index$1f_IWorker = IWorker;
declare namespace index$1f {
  export {
    IExecutor$3 as IExecutor,
    IExecutorFeeLib$1 as IExecutorFeeLib,
    index$1f_ILayerZeroExecutor as ILayerZeroExecutor,
    ILayerZeroPriceFeed$1 as ILayerZeroPriceFeed,
    index$1f_ILayerZeroTreasury as ILayerZeroTreasury,
    index$1f_ILayerZeroUltraLightNodeV2 as ILayerZeroUltraLightNodeV2,
    index$1f_IWorker as IWorker,
  };
}

type ExecuteParamStruct = {
    vid: BigNumberish;
    target: AddressLike;
    callData: BytesLike;
    expiration: BigNumberish;
    signatures: BytesLike;
};
type ExecuteParamStructOutput = [
    vid: bigint,
    target: string,
    callData: string,
    expiration: bigint,
    signatures: string
] & {
    vid: bigint;
    target: string;
    callData: string;
    expiration: bigint;
    signatures: string;
};
declare namespace IDVN$3 {
    type DstConfigParamStruct = {
        dstEid: BigNumberish;
        gas: BigNumberish;
        multiplierBps: BigNumberish;
        floorMarginUSD: BigNumberish;
    };
    type DstConfigParamStructOutput = [
        dstEid: bigint,
        gas: bigint,
        multiplierBps: bigint,
        floorMarginUSD: bigint
    ] & {
        dstEid: bigint;
        gas: bigint;
        multiplierBps: bigint;
        floorMarginUSD: bigint;
    };
}
declare namespace ILayerZeroDVN$2 {
    type AssignJobParamStruct = {
        dstEid: BigNumberish;
        packetHeader: BytesLike;
        payloadHash: BytesLike;
        confirmations: BigNumberish;
        sender: AddressLike;
    };
    type AssignJobParamStructOutput = [
        dstEid: bigint,
        packetHeader: string,
        payloadHash: string,
        confirmations: bigint,
        sender: string
    ] & {
        dstEid: bigint;
        packetHeader: string;
        payloadHash: string;
        confirmations: bigint;
        sender: string;
    };
}
interface DVNInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "assignJob((uint32,bytes,bytes32,uint64,address),bytes)" | "assignJob(uint16,uint16,uint64,address)" | "defaultMultiplierBps" | "dstConfig" | "execute" | "getFee(uint32,uint64,address,bytes)" | "getFee(uint16,uint16,uint64,address)" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "hashCallData" | "paused" | "priceFeed" | "quorum" | "quorumChangeAdmin" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setDstConfig" | "setPaused" | "setPriceFeed" | "setQuorum" | "setSigner" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "signerSize" | "signers" | "supportsInterface" | "usedHashes" | "verifySignatures" | "vid" | "withdrawFee" | "withdrawFeeFromUlnV2" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "ExecuteFailed" | "HashAlreadyUsed" | "Paused" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "SetDefaultMultiplierBps" | "SetDstConfig" | "SetPriceFeed" | "SetSupportedOptionTypes" | "SetWorkerLib" | "Unpaused" | "UpdateQuorum" | "UpdateSigner" | "VerifierFeePaid" | "VerifySignaturesFailed" | "Withdraw"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob((uint32,bytes,bytes32,uint64,address),bytes)", values: [ILayerZeroDVN$2.AssignJobParamStruct, BytesLike]): string;
    encodeFunctionData(functionFragment: "assignJob(uint16,uint16,uint64,address)", values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "execute", values: [ExecuteParamStruct[]]): string;
    encodeFunctionData(functionFragment: "getFee(uint32,uint64,address,bytes)", values: [BigNumberish, BigNumberish, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "getFee(uint16,uint16,uint64,address)", values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hashCallData", values: [BigNumberish, AddressLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
    encodeFunctionData(functionFragment: "quorumChangeAdmin", values: [ExecuteParamStruct]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDstConfig", values: [IDVN$3.DstConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setQuorum", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setSigner", values: [AddressLike, boolean]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [BigNumberish, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "signerSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "signers", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "usedHashes", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "verifySignatures", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "vid", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawFeeFromUlnV2", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob((uint32,bytes,bytes32,uint64,address),bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob(uint16,uint16,uint64,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee(uint32,uint64,address,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee(uint16,uint16,uint64,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashCallData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorumChangeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setQuorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signerSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifySignatures", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "vid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFeeFromUlnV2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
}
declare namespace ExecuteFailedEvent {
    type InputTuple = [_index: BigNumberish, _data: BytesLike];
    type OutputTuple = [_index: bigint, _data: string];
    interface OutputObject {
        _index: bigint;
        _data: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace HashAlreadyUsedEvent {
    type InputTuple = [param: ExecuteParamStruct, _hash: BytesLike];
    type OutputTuple = [param: ExecuteParamStructOutput, _hash: string];
    interface OutputObject {
        param: ExecuteParamStructOutput;
        _hash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PausedEvent$3 {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleAdminChangedEvent$3 {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleGrantedEvent$3 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleRevokedEvent$3 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetDefaultMultiplierBpsEvent$4 {
    type InputTuple = [multiplierBps: BigNumberish];
    type OutputTuple = [multiplierBps: bigint];
    interface OutputObject {
        multiplierBps: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetDstConfigEvent$1 {
    type InputTuple = [params: IDVN$3.DstConfigParamStruct[]];
    type OutputTuple = [params: IDVN$3.DstConfigParamStructOutput[]];
    interface OutputObject {
        params: IDVN$3.DstConfigParamStructOutput[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPriceFeedEvent$4 {
    type InputTuple = [priceFeed: AddressLike];
    type OutputTuple = [priceFeed: string];
    interface OutputObject {
        priceFeed: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetSupportedOptionTypesEvent$4 {
    type InputTuple = [dstEid: BigNumberish, optionTypes: BigNumberish[]];
    type OutputTuple = [dstEid: bigint, optionTypes: bigint[]];
    interface OutputObject {
        dstEid: bigint;
        optionTypes: bigint[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetWorkerLibEvent$4 {
    type InputTuple = [workerLib: AddressLike];
    type OutputTuple = [workerLib: string];
    interface OutputObject {
        workerLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UnpausedEvent$3 {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UpdateQuorumEvent$1 {
    type InputTuple = [_quorum: BigNumberish];
    type OutputTuple = [_quorum: bigint];
    interface OutputObject {
        _quorum: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UpdateSignerEvent$1 {
    type InputTuple = [_signer: AddressLike, _active: boolean];
    type OutputTuple = [_signer: string, _active: boolean];
    interface OutputObject {
        _signer: string;
        _active: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace VerifierFeePaidEvent {
    type InputTuple = [fee: BigNumberish];
    type OutputTuple = [fee: bigint];
    interface OutputObject {
        fee: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace VerifySignaturesFailedEvent {
    type InputTuple = [idx: BigNumberish];
    type OutputTuple = [idx: bigint];
    interface OutputObject {
        idx: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$4 {
    type InputTuple = [
        lib: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [lib: string, to: string, amount: bigint];
    interface OutputObject {
        lib: string;
        to: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface DVN extends BaseContract {
    connect(runner?: ContractRunner | null): DVN;
    waitForDeployment(): Promise<this>;
    interface: DVNInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    allowlistSize: TypedContractMethod<[], [bigint], "view">;
    "assignJob((uint32,bytes,bytes32,uint64,address),bytes)": TypedContractMethod<[
        _param: ILayerZeroDVN$2.AssignJobParamStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    "assignJob(uint16,uint16,uint64,address)": TypedContractMethod<[
        _dstEid: BigNumberish,
        arg1: BigNumberish,
        _confirmations: BigNumberish,
        _sender: AddressLike
    ], [
        bigint
    ], "nonpayable">;
    defaultMultiplierBps: TypedContractMethod<[], [bigint], "view">;
    dstConfig: TypedContractMethod<[
        dstEid: BigNumberish
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            gas: bigint;
            multiplierBps: bigint;
            floorMarginUSD: bigint;
        }
    ], "view">;
    execute: TypedContractMethod<[
        _params: ExecuteParamStruct[]
    ], [
        void
    ], "nonpayable">;
    "getFee(uint32,uint64,address,bytes)": TypedContractMethod<[
        _dstEid: BigNumberish,
        _confirmations: BigNumberish,
        _sender: AddressLike,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    "getFee(uint16,uint16,uint64,address)": TypedContractMethod<[
        _dstEid: BigNumberish,
        arg1: BigNumberish,
        _confirmations: BigNumberish,
        _sender: AddressLike
    ], [
        bigint
    ], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    getSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        bigint[]
    ], "view">;
    grantRole: TypedContractMethod<[
        _role: BytesLike,
        _account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasAcl: TypedContractMethod<[_sender: AddressLike], [boolean], "view">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    hashCallData: TypedContractMethod<[
        _vid: BigNumberish,
        _target: AddressLike,
        _callData: BytesLike,
        _expiration: BigNumberish
    ], [
        string
    ], "view">;
    paused: TypedContractMethod<[], [boolean], "view">;
    priceFeed: TypedContractMethod<[], [string], "view">;
    quorum: TypedContractMethod<[], [bigint], "view">;
    quorumChangeAdmin: TypedContractMethod<[
        _param: ExecuteParamStruct
    ], [
        void
    ], "nonpayable">;
    renounceRole: TypedContractMethod<[
        arg0: BytesLike,
        arg1: AddressLike
    ], [
        void
    ], "view">;
    revokeRole: TypedContractMethod<[
        _role: BytesLike,
        _account: AddressLike
    ], [
        void
    ], "nonpayable">;
    setDefaultMultiplierBps: TypedContractMethod<[
        _multiplierBps: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setDstConfig: TypedContractMethod<[
        _params: IDVN$3.DstConfigParamStruct[]
    ], [
        void
    ], "nonpayable">;
    setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
    setPriceFeed: TypedContractMethod<[
        _priceFeed: AddressLike
    ], [
        void
    ], "nonpayable">;
    setQuorum: TypedContractMethod<[_quorum: BigNumberish], [void], "nonpayable">;
    setSigner: TypedContractMethod<[
        _signer: AddressLike,
        _active: boolean
    ], [
        void
    ], "nonpayable">;
    setSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    setWorkerFeeLib: TypedContractMethod<[
        _workerFeeLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    signerSize: TypedContractMethod<[], [bigint], "view">;
    signers: TypedContractMethod<[signer: AddressLike], [boolean], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    usedHashes: TypedContractMethod<[
        executableHash: BytesLike
    ], [
        boolean
    ], "view">;
    verifySignatures: TypedContractMethod<[
        _hash: BytesLike,
        _signatures: BytesLike
    ], [
        [boolean, bigint]
    ], "view">;
    vid: TypedContractMethod<[], [bigint], "view">;
    withdrawFee: TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawFeeFromUlnV2: TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawToken: TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    workerFeeLib: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "allowlistSize"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "assignJob((uint32,bytes,bytes32,uint64,address),bytes)"): TypedContractMethod<[
        _param: ILayerZeroDVN$2.AssignJobParamStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFunction(nameOrSignature: "assignJob(uint16,uint16,uint64,address)"): TypedContractMethod<[
        _dstEid: BigNumberish,
        arg1: BigNumberish,
        _confirmations: BigNumberish,
        _sender: AddressLike
    ], [
        bigint
    ], "nonpayable">;
    getFunction(nameOrSignature: "defaultMultiplierBps"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "dstConfig"): TypedContractMethod<[
        dstEid: BigNumberish
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            gas: bigint;
            multiplierBps: bigint;
            floorMarginUSD: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "execute"): TypedContractMethod<[_params: ExecuteParamStruct[]], [void], "nonpayable">;
    getFunction(nameOrSignature: "getFee(uint32,uint64,address,bytes)"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _confirmations: BigNumberish,
        _sender: AddressLike,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getFee(uint16,uint16,uint64,address)"): TypedContractMethod<[
        _dstEid: BigNumberish,
        arg1: BigNumberish,
        _confirmations: BigNumberish,
        _sender: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "getSupportedOptionTypes"): TypedContractMethod<[_eid: BigNumberish], [bigint[]], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        _role: BytesLike,
        _account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasAcl"): TypedContractMethod<[_sender: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "hashCallData"): TypedContractMethod<[
        _vid: BigNumberish,
        _target: AddressLike,
        _callData: BytesLike,
        _expiration: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "paused"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "priceFeed"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quorum"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "quorumChangeAdmin"): TypedContractMethod<[_param: ExecuteParamStruct], [void], "nonpayable">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[arg0: BytesLike, arg1: AddressLike], [void], "view">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        _role: BytesLike,
        _account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultMultiplierBps"): TypedContractMethod<[_multiplierBps: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDstConfig"): TypedContractMethod<[
        _params: IDVN$3.DstConfigParamStruct[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPaused"): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPriceFeed"): TypedContractMethod<[_priceFeed: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setQuorum"): TypedContractMethod<[_quorum: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setSigner"): TypedContractMethod<[
        _signer: AddressLike,
        _active: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setSupportedOptionTypes"): TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setWorkerFeeLib"): TypedContractMethod<[_workerFeeLib: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "signerSize"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "signers"): TypedContractMethod<[signer: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "usedHashes"): TypedContractMethod<[executableHash: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "verifySignatures"): TypedContractMethod<[
        _hash: BytesLike,
        _signatures: BytesLike
    ], [
        [boolean, bigint]
    ], "view">;
    getFunction(nameOrSignature: "vid"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawFeeFromUlnV2"): TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawToken"): TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "workerFeeLib"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "ExecuteFailed"): TypedContractEvent<ExecuteFailedEvent.InputTuple, ExecuteFailedEvent.OutputTuple, ExecuteFailedEvent.OutputObject>;
    getEvent(key: "HashAlreadyUsed"): TypedContractEvent<HashAlreadyUsedEvent.InputTuple, HashAlreadyUsedEvent.OutputTuple, HashAlreadyUsedEvent.OutputObject>;
    getEvent(key: "Paused"): TypedContractEvent<PausedEvent$3.InputTuple, PausedEvent$3.OutputTuple, PausedEvent$3.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent$3.InputTuple, RoleAdminChangedEvent$3.OutputTuple, RoleAdminChangedEvent$3.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent$3.InputTuple, RoleGrantedEvent$3.OutputTuple, RoleGrantedEvent$3.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent$3.InputTuple, RoleRevokedEvent$3.OutputTuple, RoleRevokedEvent$3.OutputObject>;
    getEvent(key: "SetDefaultMultiplierBps"): TypedContractEvent<SetDefaultMultiplierBpsEvent$4.InputTuple, SetDefaultMultiplierBpsEvent$4.OutputTuple, SetDefaultMultiplierBpsEvent$4.OutputObject>;
    getEvent(key: "SetDstConfig"): TypedContractEvent<SetDstConfigEvent$1.InputTuple, SetDstConfigEvent$1.OutputTuple, SetDstConfigEvent$1.OutputObject>;
    getEvent(key: "SetPriceFeed"): TypedContractEvent<SetPriceFeedEvent$4.InputTuple, SetPriceFeedEvent$4.OutputTuple, SetPriceFeedEvent$4.OutputObject>;
    getEvent(key: "SetSupportedOptionTypes"): TypedContractEvent<SetSupportedOptionTypesEvent$4.InputTuple, SetSupportedOptionTypesEvent$4.OutputTuple, SetSupportedOptionTypesEvent$4.OutputObject>;
    getEvent(key: "SetWorkerLib"): TypedContractEvent<SetWorkerLibEvent$4.InputTuple, SetWorkerLibEvent$4.OutputTuple, SetWorkerLibEvent$4.OutputObject>;
    getEvent(key: "Unpaused"): TypedContractEvent<UnpausedEvent$3.InputTuple, UnpausedEvent$3.OutputTuple, UnpausedEvent$3.OutputObject>;
    getEvent(key: "UpdateQuorum"): TypedContractEvent<UpdateQuorumEvent$1.InputTuple, UpdateQuorumEvent$1.OutputTuple, UpdateQuorumEvent$1.OutputObject>;
    getEvent(key: "UpdateSigner"): TypedContractEvent<UpdateSignerEvent$1.InputTuple, UpdateSignerEvent$1.OutputTuple, UpdateSignerEvent$1.OutputObject>;
    getEvent(key: "VerifierFeePaid"): TypedContractEvent<VerifierFeePaidEvent.InputTuple, VerifierFeePaidEvent.OutputTuple, VerifierFeePaidEvent.OutputObject>;
    getEvent(key: "VerifySignaturesFailed"): TypedContractEvent<VerifySignaturesFailedEvent.InputTuple, VerifySignaturesFailedEvent.OutputTuple, VerifySignaturesFailedEvent.OutputObject>;
    getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$4.InputTuple, WithdrawEvent$4.OutputTuple, WithdrawEvent$4.OutputObject>;
    filters: {
        "ExecuteFailed(uint256,bytes)": TypedContractEvent<ExecuteFailedEvent.InputTuple, ExecuteFailedEvent.OutputTuple, ExecuteFailedEvent.OutputObject>;
        ExecuteFailed: TypedContractEvent<ExecuteFailedEvent.InputTuple, ExecuteFailedEvent.OutputTuple, ExecuteFailedEvent.OutputObject>;
        "HashAlreadyUsed(tuple,bytes32)": TypedContractEvent<HashAlreadyUsedEvent.InputTuple, HashAlreadyUsedEvent.OutputTuple, HashAlreadyUsedEvent.OutputObject>;
        HashAlreadyUsed: TypedContractEvent<HashAlreadyUsedEvent.InputTuple, HashAlreadyUsedEvent.OutputTuple, HashAlreadyUsedEvent.OutputObject>;
        "Paused(address)": TypedContractEvent<PausedEvent$3.InputTuple, PausedEvent$3.OutputTuple, PausedEvent$3.OutputObject>;
        Paused: TypedContractEvent<PausedEvent$3.InputTuple, PausedEvent$3.OutputTuple, PausedEvent$3.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent$3.InputTuple, RoleAdminChangedEvent$3.OutputTuple, RoleAdminChangedEvent$3.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent$3.InputTuple, RoleAdminChangedEvent$3.OutputTuple, RoleAdminChangedEvent$3.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent$3.InputTuple, RoleGrantedEvent$3.OutputTuple, RoleGrantedEvent$3.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent$3.InputTuple, RoleGrantedEvent$3.OutputTuple, RoleGrantedEvent$3.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent$3.InputTuple, RoleRevokedEvent$3.OutputTuple, RoleRevokedEvent$3.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent$3.InputTuple, RoleRevokedEvent$3.OutputTuple, RoleRevokedEvent$3.OutputObject>;
        "SetDefaultMultiplierBps(uint16)": TypedContractEvent<SetDefaultMultiplierBpsEvent$4.InputTuple, SetDefaultMultiplierBpsEvent$4.OutputTuple, SetDefaultMultiplierBpsEvent$4.OutputObject>;
        SetDefaultMultiplierBps: TypedContractEvent<SetDefaultMultiplierBpsEvent$4.InputTuple, SetDefaultMultiplierBpsEvent$4.OutputTuple, SetDefaultMultiplierBpsEvent$4.OutputObject>;
        "SetDstConfig(tuple[])": TypedContractEvent<SetDstConfigEvent$1.InputTuple, SetDstConfigEvent$1.OutputTuple, SetDstConfigEvent$1.OutputObject>;
        SetDstConfig: TypedContractEvent<SetDstConfigEvent$1.InputTuple, SetDstConfigEvent$1.OutputTuple, SetDstConfigEvent$1.OutputObject>;
        "SetPriceFeed(address)": TypedContractEvent<SetPriceFeedEvent$4.InputTuple, SetPriceFeedEvent$4.OutputTuple, SetPriceFeedEvent$4.OutputObject>;
        SetPriceFeed: TypedContractEvent<SetPriceFeedEvent$4.InputTuple, SetPriceFeedEvent$4.OutputTuple, SetPriceFeedEvent$4.OutputObject>;
        "SetSupportedOptionTypes(uint32,uint8[])": TypedContractEvent<SetSupportedOptionTypesEvent$4.InputTuple, SetSupportedOptionTypesEvent$4.OutputTuple, SetSupportedOptionTypesEvent$4.OutputObject>;
        SetSupportedOptionTypes: TypedContractEvent<SetSupportedOptionTypesEvent$4.InputTuple, SetSupportedOptionTypesEvent$4.OutputTuple, SetSupportedOptionTypesEvent$4.OutputObject>;
        "SetWorkerLib(address)": TypedContractEvent<SetWorkerLibEvent$4.InputTuple, SetWorkerLibEvent$4.OutputTuple, SetWorkerLibEvent$4.OutputObject>;
        SetWorkerLib: TypedContractEvent<SetWorkerLibEvent$4.InputTuple, SetWorkerLibEvent$4.OutputTuple, SetWorkerLibEvent$4.OutputObject>;
        "Unpaused(address)": TypedContractEvent<UnpausedEvent$3.InputTuple, UnpausedEvent$3.OutputTuple, UnpausedEvent$3.OutputObject>;
        Unpaused: TypedContractEvent<UnpausedEvent$3.InputTuple, UnpausedEvent$3.OutputTuple, UnpausedEvent$3.OutputObject>;
        "UpdateQuorum(uint64)": TypedContractEvent<UpdateQuorumEvent$1.InputTuple, UpdateQuorumEvent$1.OutputTuple, UpdateQuorumEvent$1.OutputObject>;
        UpdateQuorum: TypedContractEvent<UpdateQuorumEvent$1.InputTuple, UpdateQuorumEvent$1.OutputTuple, UpdateQuorumEvent$1.OutputObject>;
        "UpdateSigner(address,bool)": TypedContractEvent<UpdateSignerEvent$1.InputTuple, UpdateSignerEvent$1.OutputTuple, UpdateSignerEvent$1.OutputObject>;
        UpdateSigner: TypedContractEvent<UpdateSignerEvent$1.InputTuple, UpdateSignerEvent$1.OutputTuple, UpdateSignerEvent$1.OutputObject>;
        "VerifierFeePaid(uint256)": TypedContractEvent<VerifierFeePaidEvent.InputTuple, VerifierFeePaidEvent.OutputTuple, VerifierFeePaidEvent.OutputObject>;
        VerifierFeePaid: TypedContractEvent<VerifierFeePaidEvent.InputTuple, VerifierFeePaidEvent.OutputTuple, VerifierFeePaidEvent.OutputObject>;
        "VerifySignaturesFailed(uint256)": TypedContractEvent<VerifySignaturesFailedEvent.InputTuple, VerifySignaturesFailedEvent.OutputTuple, VerifySignaturesFailedEvent.OutputObject>;
        VerifySignaturesFailed: TypedContractEvent<VerifySignaturesFailedEvent.InputTuple, VerifySignaturesFailedEvent.OutputTuple, VerifySignaturesFailedEvent.OutputObject>;
        "Withdraw(address,address,uint256)": TypedContractEvent<WithdrawEvent$4.InputTuple, WithdrawEvent$4.OutputTuple, WithdrawEvent$4.OutputObject>;
        Withdraw: TypedContractEvent<WithdrawEvent$4.InputTuple, WithdrawEvent$4.OutputTuple, WithdrawEvent$4.OutputObject>;
    };
}

declare namespace IDVNFeeLib$1 {
    type FeeParamsStruct = {
        priceFeed: AddressLike;
        dstEid: BigNumberish;
        confirmations: BigNumberish;
        sender: AddressLike;
        quorum: BigNumberish;
        defaultMultiplierBps: BigNumberish;
    };
    type FeeParamsStructOutput = [
        priceFeed: string,
        dstEid: bigint,
        confirmations: bigint,
        sender: string,
        quorum: bigint,
        defaultMultiplierBps: bigint
    ] & {
        priceFeed: string;
        dstEid: bigint;
        confirmations: bigint;
        sender: string;
        quorum: bigint;
        defaultMultiplierBps: bigint;
    };
}
declare namespace IDVN$2 {
    type DstConfigStruct = {
        gas: BigNumberish;
        multiplierBps: BigNumberish;
        floorMarginUSD: BigNumberish;
    };
    type DstConfigStructOutput = [
        gas: bigint,
        multiplierBps: bigint,
        floorMarginUSD: bigint
    ] & {
        gas: bigint;
        multiplierBps: bigint;
        floorMarginUSD: bigint;
    };
}
interface DVNFeeLibInterface extends Interface {
    getFunction(nameOrSignature: "getFee" | "getFeeOnSend" | "owner" | "renounceOwnership" | "transferOwnership" | "withdrawToken"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    encodeFunctionData(functionFragment: "getFee", values: [IDVNFeeLib$1.FeeParamsStruct, IDVN$2.DstConfigStruct, BytesLike]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [IDVNFeeLib$1.FeeParamsStruct, IDVN$2.DstConfigStruct, BytesLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$o {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface DVNFeeLib extends BaseContract {
    connect(runner?: ContractRunner | null): DVNFeeLib;
    waitForDeployment(): Promise<this>;
    interface: DVNFeeLibInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFee: TypedContractMethod<[
        _params: IDVNFeeLib$1.FeeParamsStruct,
        _dstConfig: IDVN$2.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFeeOnSend: TypedContractMethod<[
        _params: IDVNFeeLib$1.FeeParamsStruct,
        _dstConfig: IDVN$2.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    withdrawToken: TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        _params: IDVNFeeLib$1.FeeParamsStruct,
        _dstConfig: IDVN$2.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getFeeOnSend"): TypedContractMethod<[
        _params: IDVNFeeLib$1.FeeParamsStruct,
        _dstConfig: IDVN$2.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "withdrawToken"): TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$o.InputTuple, OwnershipTransferredEvent$o.OutputTuple, OwnershipTransferredEvent$o.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$o.InputTuple, OwnershipTransferredEvent$o.OutputTuple, OwnershipTransferredEvent$o.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$o.InputTuple, OwnershipTransferredEvent$o.OutputTuple, OwnershipTransferredEvent$o.OutputObject>;
    };
}

interface MultiSigInterface extends Interface {
    getFunction(nameOrSignature: "quorum" | "signerSize" | "signers" | "verifySignatures"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateQuorum" | "UpdateSigner"): EventFragment;
    encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
    encodeFunctionData(functionFragment: "signerSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "signers", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "verifySignatures", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signerSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifySignatures", data: BytesLike): Result;
}
declare namespace UpdateQuorumEvent {
    type InputTuple = [_quorum: BigNumberish];
    type OutputTuple = [_quorum: bigint];
    interface OutputObject {
        _quorum: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UpdateSignerEvent {
    type InputTuple = [_signer: AddressLike, _active: boolean];
    type OutputTuple = [_signer: string, _active: boolean];
    interface OutputObject {
        _signer: string;
        _active: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface MultiSig extends BaseContract {
    connect(runner?: ContractRunner | null): MultiSig;
    waitForDeployment(): Promise<this>;
    interface: MultiSigInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    quorum: TypedContractMethod<[], [bigint], "view">;
    signerSize: TypedContractMethod<[], [bigint], "view">;
    signers: TypedContractMethod<[signer: AddressLike], [boolean], "view">;
    verifySignatures: TypedContractMethod<[
        _hash: BytesLike,
        _signatures: BytesLike
    ], [
        [boolean, bigint]
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "quorum"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "signerSize"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "signers"): TypedContractMethod<[signer: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "verifySignatures"): TypedContractMethod<[
        _hash: BytesLike,
        _signatures: BytesLike
    ], [
        [boolean, bigint]
    ], "view">;
    getEvent(key: "UpdateQuorum"): TypedContractEvent<UpdateQuorumEvent.InputTuple, UpdateQuorumEvent.OutputTuple, UpdateQuorumEvent.OutputObject>;
    getEvent(key: "UpdateSigner"): TypedContractEvent<UpdateSignerEvent.InputTuple, UpdateSignerEvent.OutputTuple, UpdateSignerEvent.OutputObject>;
    filters: {
        "UpdateQuorum(uint64)": TypedContractEvent<UpdateQuorumEvent.InputTuple, UpdateQuorumEvent.OutputTuple, UpdateQuorumEvent.OutputObject>;
        UpdateQuorum: TypedContractEvent<UpdateQuorumEvent.InputTuple, UpdateQuorumEvent.OutputTuple, UpdateQuorumEvent.OutputObject>;
        "UpdateSigner(address,bool)": TypedContractEvent<UpdateSignerEvent.InputTuple, UpdateSignerEvent.OutputTuple, UpdateSignerEvent.OutputObject>;
        UpdateSigner: TypedContractEvent<UpdateSignerEvent.InputTuple, UpdateSignerEvent.OutputTuple, UpdateSignerEvent.OutputObject>;
    };
}

type index$1e_DVN = DVN;
type index$1e_DVNFeeLib = DVNFeeLib;
type index$1e_MultiSig = MultiSig;
declare namespace index$1e {
  export {
    index$1e_DVN as DVN,
    index$1e_DVNFeeLib as DVNFeeLib,
    index$1e_MultiSig as MultiSig,
  };
}

declare namespace ILayerZeroDVN$1 {
    type AssignJobParamStruct = {
        dstEid: BigNumberish;
        packetHeader: BytesLike;
        payloadHash: BytesLike;
        confirmations: BigNumberish;
        sender: AddressLike;
    };
    type AssignJobParamStructOutput = [
        dstEid: bigint,
        packetHeader: string,
        payloadHash: string,
        confirmations: bigint,
        sender: string
    ] & {
        dstEid: bigint;
        packetHeader: string;
        payloadHash: string;
        confirmations: bigint;
        sender: string;
    };
}
interface IDVNInterface extends Interface {
    getFunction(nameOrSignature: "assignJob" | "defaultMultiplierBps" | "dstConfig" | "getFee" | "getSupportedOptionTypes" | "priceFeed" | "setDefaultMultiplierBps" | "setPriceFeed" | "setSupportedOptionTypes" | "withdrawFee"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps" | "SetDstConfig" | "SetPriceFeed" | "SetSupportedOptionTypes" | "SetWorkerLib" | "Withdraw"): EventFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [ILayerZeroDVN$1.AssignJobParamStruct, BytesLike]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getFee", values: [BigNumberish, BigNumberish, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [BigNumberish, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
}
declare namespace SetDefaultMultiplierBpsEvent$3 {
    type InputTuple = [multiplierBps: BigNumberish];
    type OutputTuple = [multiplierBps: bigint];
    interface OutputObject {
        multiplierBps: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetDstConfigEvent {
    type InputTuple = [params: IDVN$1.DstConfigParamStruct[]];
    type OutputTuple = [params: IDVN$1.DstConfigParamStructOutput[]];
    interface OutputObject {
        params: IDVN$1.DstConfigParamStructOutput[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPriceFeedEvent$3 {
    type InputTuple = [priceFeed: AddressLike];
    type OutputTuple = [priceFeed: string];
    interface OutputObject {
        priceFeed: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetSupportedOptionTypesEvent$3 {
    type InputTuple = [dstEid: BigNumberish, optionTypes: BigNumberish[]];
    type OutputTuple = [dstEid: bigint, optionTypes: bigint[]];
    interface OutputObject {
        dstEid: bigint;
        optionTypes: bigint[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetWorkerLibEvent$3 {
    type InputTuple = [workerLib: AddressLike];
    type OutputTuple = [workerLib: string];
    interface OutputObject {
        workerLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$3 {
    type InputTuple = [
        lib: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [lib: string, to: string, amount: bigint];
    interface OutputObject {
        lib: string;
        to: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace IDVN$1 {
    type DstConfigParamStruct = {
        dstEid: BigNumberish;
        gas: BigNumberish;
        multiplierBps: BigNumberish;
        floorMarginUSD: BigNumberish;
    };
    type DstConfigParamStructOutput = [
        dstEid: bigint,
        gas: bigint,
        multiplierBps: bigint,
        floorMarginUSD: bigint
    ] & {
        dstEid: bigint;
        gas: bigint;
        multiplierBps: bigint;
        floorMarginUSD: bigint;
    };
}
interface IDVN$1 extends BaseContract {
    connect(runner?: ContractRunner | null): IDVN$1;
    waitForDeployment(): Promise<this>;
    interface: IDVNInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    assignJob: TypedContractMethod<[
        _param: ILayerZeroDVN$1.AssignJobParamStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    defaultMultiplierBps: TypedContractMethod<[], [bigint], "view">;
    dstConfig: TypedContractMethod<[
        _dstEid: BigNumberish
    ], [
        [bigint, bigint, bigint]
    ], "view">;
    getFee: TypedContractMethod<[
        _dstEid: BigNumberish,
        _confirmations: BigNumberish,
        _sender: AddressLike,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        bigint[]
    ], "view">;
    priceFeed: TypedContractMethod<[], [string], "view">;
    setDefaultMultiplierBps: TypedContractMethod<[
        _multiplierBps: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setPriceFeed: TypedContractMethod<[
        _priceFeed: AddressLike
    ], [
        void
    ], "nonpayable">;
    setSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    withdrawFee: TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "assignJob"): TypedContractMethod<[
        _param: ILayerZeroDVN$1.AssignJobParamStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFunction(nameOrSignature: "defaultMultiplierBps"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "dstConfig"): TypedContractMethod<[
        _dstEid: BigNumberish
    ], [
        [bigint, bigint, bigint]
    ], "view">;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _confirmations: BigNumberish,
        _sender: AddressLike,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getSupportedOptionTypes"): TypedContractMethod<[_eid: BigNumberish], [bigint[]], "view">;
    getFunction(nameOrSignature: "priceFeed"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "setDefaultMultiplierBps"): TypedContractMethod<[_multiplierBps: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPriceFeed"): TypedContractMethod<[_priceFeed: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setSupportedOptionTypes"): TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "SetDefaultMultiplierBps"): TypedContractEvent<SetDefaultMultiplierBpsEvent$3.InputTuple, SetDefaultMultiplierBpsEvent$3.OutputTuple, SetDefaultMultiplierBpsEvent$3.OutputObject>;
    getEvent(key: "SetDstConfig"): TypedContractEvent<SetDstConfigEvent.InputTuple, SetDstConfigEvent.OutputTuple, SetDstConfigEvent.OutputObject>;
    getEvent(key: "SetPriceFeed"): TypedContractEvent<SetPriceFeedEvent$3.InputTuple, SetPriceFeedEvent$3.OutputTuple, SetPriceFeedEvent$3.OutputObject>;
    getEvent(key: "SetSupportedOptionTypes"): TypedContractEvent<SetSupportedOptionTypesEvent$3.InputTuple, SetSupportedOptionTypesEvent$3.OutputTuple, SetSupportedOptionTypesEvent$3.OutputObject>;
    getEvent(key: "SetWorkerLib"): TypedContractEvent<SetWorkerLibEvent$3.InputTuple, SetWorkerLibEvent$3.OutputTuple, SetWorkerLibEvent$3.OutputObject>;
    getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$3.InputTuple, WithdrawEvent$3.OutputTuple, WithdrawEvent$3.OutputObject>;
    filters: {
        "SetDefaultMultiplierBps(uint16)": TypedContractEvent<SetDefaultMultiplierBpsEvent$3.InputTuple, SetDefaultMultiplierBpsEvent$3.OutputTuple, SetDefaultMultiplierBpsEvent$3.OutputObject>;
        SetDefaultMultiplierBps: TypedContractEvent<SetDefaultMultiplierBpsEvent$3.InputTuple, SetDefaultMultiplierBpsEvent$3.OutputTuple, SetDefaultMultiplierBpsEvent$3.OutputObject>;
        "SetDstConfig(tuple[])": TypedContractEvent<SetDstConfigEvent.InputTuple, SetDstConfigEvent.OutputTuple, SetDstConfigEvent.OutputObject>;
        SetDstConfig: TypedContractEvent<SetDstConfigEvent.InputTuple, SetDstConfigEvent.OutputTuple, SetDstConfigEvent.OutputObject>;
        "SetPriceFeed(address)": TypedContractEvent<SetPriceFeedEvent$3.InputTuple, SetPriceFeedEvent$3.OutputTuple, SetPriceFeedEvent$3.OutputObject>;
        SetPriceFeed: TypedContractEvent<SetPriceFeedEvent$3.InputTuple, SetPriceFeedEvent$3.OutputTuple, SetPriceFeedEvent$3.OutputObject>;
        "SetSupportedOptionTypes(uint32,uint8[])": TypedContractEvent<SetSupportedOptionTypesEvent$3.InputTuple, SetSupportedOptionTypesEvent$3.OutputTuple, SetSupportedOptionTypesEvent$3.OutputObject>;
        SetSupportedOptionTypes: TypedContractEvent<SetSupportedOptionTypesEvent$3.InputTuple, SetSupportedOptionTypesEvent$3.OutputTuple, SetSupportedOptionTypesEvent$3.OutputObject>;
        "SetWorkerLib(address)": TypedContractEvent<SetWorkerLibEvent$3.InputTuple, SetWorkerLibEvent$3.OutputTuple, SetWorkerLibEvent$3.OutputObject>;
        SetWorkerLib: TypedContractEvent<SetWorkerLibEvent$3.InputTuple, SetWorkerLibEvent$3.OutputTuple, SetWorkerLibEvent$3.OutputObject>;
        "Withdraw(address,address,uint256)": TypedContractEvent<WithdrawEvent$3.InputTuple, WithdrawEvent$3.OutputTuple, WithdrawEvent$3.OutputObject>;
        Withdraw: TypedContractEvent<WithdrawEvent$3.InputTuple, WithdrawEvent$3.OutputTuple, WithdrawEvent$3.OutputObject>;
    };
}

declare namespace IDVN {
    type DstConfigStruct = {
        gas: BigNumberish;
        multiplierBps: BigNumberish;
        floorMarginUSD: BigNumberish;
    };
    type DstConfigStructOutput = [
        gas: bigint,
        multiplierBps: bigint,
        floorMarginUSD: bigint
    ] & {
        gas: bigint;
        multiplierBps: bigint;
        floorMarginUSD: bigint;
    };
}
interface IDVNFeeLibInterface extends Interface {
    getFunction(nameOrSignature: "getFee" | "getFeeOnSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [IDVNFeeLib.FeeParamsStruct, IDVN.DstConfigStruct, BytesLike]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [IDVNFeeLib.FeeParamsStruct, IDVN.DstConfigStruct, BytesLike]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
}
declare namespace IDVNFeeLib {
    type FeeParamsStruct = {
        priceFeed: AddressLike;
        dstEid: BigNumberish;
        confirmations: BigNumberish;
        sender: AddressLike;
        quorum: BigNumberish;
        defaultMultiplierBps: BigNumberish;
    };
    type FeeParamsStructOutput = [
        priceFeed: string,
        dstEid: bigint,
        confirmations: bigint,
        sender: string,
        quorum: bigint,
        defaultMultiplierBps: bigint
    ] & {
        priceFeed: string;
        dstEid: bigint;
        confirmations: bigint;
        sender: string;
        quorum: bigint;
        defaultMultiplierBps: bigint;
    };
}
interface IDVNFeeLib extends BaseContract {
    connect(runner?: ContractRunner | null): IDVNFeeLib;
    waitForDeployment(): Promise<this>;
    interface: IDVNFeeLibInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFee: TypedContractMethod<[
        _params: IDVNFeeLib.FeeParamsStruct,
        _dstConfig: IDVN.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFeeOnSend: TypedContractMethod<[
        _params: IDVNFeeLib.FeeParamsStruct,
        _dstConfig: IDVN.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        _params: IDVNFeeLib.FeeParamsStruct,
        _dstConfig: IDVN.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getFeeOnSend"): TypedContractMethod<[
        _params: IDVNFeeLib.FeeParamsStruct,
        _dstConfig: IDVN.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    filters: {};
}

interface ILayerZeroDVNInterface extends Interface {
    getFunction(nameOrSignature: "assignJob" | "getFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [ILayerZeroDVN.AssignJobParamStruct, BytesLike]): string;
    encodeFunctionData(functionFragment: "getFee", values: [BigNumberish, BigNumberish, AddressLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
}
declare namespace ILayerZeroDVN {
    type AssignJobParamStruct = {
        dstEid: BigNumberish;
        packetHeader: BytesLike;
        payloadHash: BytesLike;
        confirmations: BigNumberish;
        sender: AddressLike;
    };
    type AssignJobParamStructOutput = [
        dstEid: bigint,
        packetHeader: string,
        payloadHash: string,
        confirmations: bigint,
        sender: string
    ] & {
        dstEid: bigint;
        packetHeader: string;
        payloadHash: string;
        confirmations: bigint;
        sender: string;
    };
}
interface ILayerZeroDVN extends BaseContract {
    connect(runner?: ContractRunner | null): ILayerZeroDVN;
    waitForDeployment(): Promise<this>;
    interface: ILayerZeroDVNInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    assignJob: TypedContractMethod<[
        _param: ILayerZeroDVN.AssignJobParamStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFee: TypedContractMethod<[
        _dstEid: BigNumberish,
        _confirmations: BigNumberish,
        _sender: AddressLike,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "assignJob"): TypedContractMethod<[
        _param: ILayerZeroDVN.AssignJobParamStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _confirmations: BigNumberish,
        _sender: AddressLike,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    filters: {};
}

interface IUltraLightNodeInterface extends Interface {
    getFunction(nameOrSignature: "commitVerification" | "verify"): FunctionFragment;
    encodeFunctionData(functionFragment: "commitVerification", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "verify", values: [BytesLike, BytesLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "commitVerification", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}
interface IUltraLightNode extends BaseContract {
    connect(runner?: ContractRunner | null): IUltraLightNode;
    waitForDeployment(): Promise<this>;
    interface: IUltraLightNodeInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    commitVerification: TypedContractMethod<[
        _packetHeader: BytesLike,
        _payloadHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    verify: TypedContractMethod<[
        _packetHeader: BytesLike,
        _payloadHash: BytesLike,
        _confirmations: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "commitVerification"): TypedContractMethod<[
        _packetHeader: BytesLike,
        _payloadHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "verify"): TypedContractMethod<[
        _packetHeader: BytesLike,
        _payloadHash: BytesLike,
        _confirmations: BigNumberish
    ], [
        void
    ], "nonpayable">;
    filters: {};
}

type index$1d_IDVNFeeLib = IDVNFeeLib;
type index$1d_ILayerZeroDVN = ILayerZeroDVN;
type index$1d_IUltraLightNode = IUltraLightNode;
declare namespace index$1d {
  export {
    IDVN$1 as IDVN,
    index$1d_IDVNFeeLib as IDVNFeeLib,
    index$1d_ILayerZeroDVN as ILayerZeroDVN,
    index$1d_IUltraLightNode as IUltraLightNode,
  };
}

interface DVNOptionsInterface extends Interface {
}
interface DVNOptions extends BaseContract {
    connect(runner?: ContractRunner | null): DVNOptions;
    waitForDeployment(): Promise<this>;
    interface: DVNOptionsInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    filters: {};
}

interface UlnOptionsInterface extends Interface {
}
interface UlnOptions extends BaseContract {
    connect(runner?: ContractRunner | null): UlnOptions;
    waitForDeployment(): Promise<this>;
    interface: UlnOptionsInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    filters: {};
}

type index$1c_DVNOptions = DVNOptions;
type index$1c_UlnOptions = UlnOptions;
declare namespace index$1c {
  export {
    index$1c_DVNOptions as DVNOptions,
    index$1c_UlnOptions as UlnOptions,
  };
}

type UlnConfigStruct$4 = {
    confirmations: BigNumberish;
    requiredDVNCount: BigNumberish;
    optionalDVNCount: BigNumberish;
    optionalDVNThreshold: BigNumberish;
    requiredDVNs: AddressLike[];
    optionalDVNs: AddressLike[];
};
type UlnConfigStructOutput$4 = [
    confirmations: bigint,
    requiredDVNCount: bigint,
    optionalDVNCount: bigint,
    optionalDVNThreshold: bigint,
    requiredDVNs: string[],
    optionalDVNs: string[]
] & {
    confirmations: bigint;
    requiredDVNCount: bigint;
    optionalDVNCount: bigint;
    optionalDVNThreshold: bigint;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct$4 = {
    eid: BigNumberish;
    config: UlnConfigStruct$4;
};
type SetDefaultUlnConfigParamStructOutput$4 = [
    eid: bigint,
    config: UlnConfigStructOutput$4
] & {
    eid: bigint;
    config: UlnConfigStructOutput$4;
};
type SetConfigParamStruct$9 = {
    eid: BigNumberish;
    configType: BigNumberish;
    config: BytesLike;
};
interface ReceiveUln302Interface extends Interface {
    getFunction(nameOrSignature: "commitVerification" | "getAppUlnConfig" | "getConfig" | "getUlnConfig" | "hashLookup" | "isSupportedEid" | "messageLibType" | "owner" | "renounceOwnership" | "setConfig" | "setDefaultUlnConfigs" | "supportsInterface" | "transferOwnership" | "verifiable" | "verify" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultUlnConfigsSet" | "OwnershipTransferred" | "PayloadVerified" | "UlnConfigSet"): EventFragment;
    encodeFunctionData(functionFragment: "commitVerification", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "hashLookup", values: [BytesLike, BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setConfig", values: [AddressLike, SetConfigParamStruct$9[]]): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct$4[]]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "verify", values: [BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "commitVerification", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashLookup", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
declare namespace DefaultUlnConfigsSetEvent$4 {
    type InputTuple = [params: SetDefaultUlnConfigParamStruct$4[]];
    type OutputTuple = [params: SetDefaultUlnConfigParamStructOutput$4[]];
    interface OutputObject {
        params: SetDefaultUlnConfigParamStructOutput$4[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$n {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PayloadVerifiedEvent$1 {
    type InputTuple = [
        dvn: AddressLike,
        header: BytesLike,
        confirmations: BigNumberish,
        proofHash: BytesLike
    ];
    type OutputTuple = [
        dvn: string,
        header: string,
        confirmations: bigint,
        proofHash: string
    ];
    interface OutputObject {
        dvn: string;
        header: string;
        confirmations: bigint;
        proofHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UlnConfigSetEvent$4 {
    type InputTuple = [
        oapp: AddressLike,
        eid: BigNumberish,
        config: UlnConfigStruct$4
    ];
    type OutputTuple = [
        oapp: string,
        eid: bigint,
        config: UlnConfigStructOutput$4
    ];
    interface OutputObject {
        oapp: string;
        eid: bigint;
        config: UlnConfigStructOutput$4;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface ReceiveUln302 extends BaseContract {
    connect(runner?: ContractRunner | null): ReceiveUln302;
    waitForDeployment(): Promise<this>;
    interface: ReceiveUln302Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    commitVerification: TypedContractMethod<[
        _packetHeader: BytesLike,
        _payloadHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    getAppUlnConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$4
    ], "view">;
    getConfig: TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getUlnConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$4
    ], "view">;
    hashLookup: TypedContractMethod<[
        headerHash: BytesLike,
        payloadHash: BytesLike,
        dvn: AddressLike
    ], [
        bigint
    ], "view">;
    isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    messageLibType: TypedContractMethod<[], [bigint], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _params: SetConfigParamStruct$9[]
    ], [
        void
    ], "nonpayable">;
    setDefaultUlnConfigs: TypedContractMethod<[
        _params: SetDefaultUlnConfigParamStruct$4[]
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        _interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    verifiable: TypedContractMethod<[
        _packetHeader: BytesLike,
        _payloadHash: BytesLike
    ], [
        bigint
    ], "view">;
    verify: TypedContractMethod<[
        _packetHeader: BytesLike,
        _payloadHash: BytesLike,
        _confirmations: BigNumberish
    ], [
        void
    ], "nonpayable">;
    version: TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "commitVerification"): TypedContractMethod<[
        _packetHeader: BytesLike,
        _payloadHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "getAppUlnConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$4
    ], "view">;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "getUlnConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$4
    ], "view">;
    getFunction(nameOrSignature: "hashLookup"): TypedContractMethod<[
        headerHash: BytesLike,
        payloadHash: BytesLike,
        dvn: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "messageLibType"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _params: SetConfigParamStruct$9[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultUlnConfigs"): TypedContractMethod<[
        _params: SetDefaultUlnConfigParamStruct$4[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "verifiable"): TypedContractMethod<[
        _packetHeader: BytesLike,
        _payloadHash: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "verify"): TypedContractMethod<[
        _packetHeader: BytesLike,
        _payloadHash: BytesLike,
        _confirmations: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    getEvent(key: "DefaultUlnConfigsSet"): TypedContractEvent<DefaultUlnConfigsSetEvent$4.InputTuple, DefaultUlnConfigsSetEvent$4.OutputTuple, DefaultUlnConfigsSetEvent$4.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$n.InputTuple, OwnershipTransferredEvent$n.OutputTuple, OwnershipTransferredEvent$n.OutputObject>;
    getEvent(key: "PayloadVerified"): TypedContractEvent<PayloadVerifiedEvent$1.InputTuple, PayloadVerifiedEvent$1.OutputTuple, PayloadVerifiedEvent$1.OutputObject>;
    getEvent(key: "UlnConfigSet"): TypedContractEvent<UlnConfigSetEvent$4.InputTuple, UlnConfigSetEvent$4.OutputTuple, UlnConfigSetEvent$4.OutputObject>;
    filters: {
        "DefaultUlnConfigsSet(tuple[])": TypedContractEvent<DefaultUlnConfigsSetEvent$4.InputTuple, DefaultUlnConfigsSetEvent$4.OutputTuple, DefaultUlnConfigsSetEvent$4.OutputObject>;
        DefaultUlnConfigsSet: TypedContractEvent<DefaultUlnConfigsSetEvent$4.InputTuple, DefaultUlnConfigsSetEvent$4.OutputTuple, DefaultUlnConfigsSetEvent$4.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$n.InputTuple, OwnershipTransferredEvent$n.OutputTuple, OwnershipTransferredEvent$n.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$n.InputTuple, OwnershipTransferredEvent$n.OutputTuple, OwnershipTransferredEvent$n.OutputObject>;
        "PayloadVerified(address,bytes,uint256,bytes32)": TypedContractEvent<PayloadVerifiedEvent$1.InputTuple, PayloadVerifiedEvent$1.OutputTuple, PayloadVerifiedEvent$1.OutputObject>;
        PayloadVerified: TypedContractEvent<PayloadVerifiedEvent$1.InputTuple, PayloadVerifiedEvent$1.OutputTuple, PayloadVerifiedEvent$1.OutputObject>;
        "UlnConfigSet(address,uint32,tuple)": TypedContractEvent<UlnConfigSetEvent$4.InputTuple, UlnConfigSetEvent$4.OutputTuple, UlnConfigSetEvent$4.OutputObject>;
        UlnConfigSet: TypedContractEvent<UlnConfigSetEvent$4.InputTuple, UlnConfigSetEvent$4.OutputTuple, UlnConfigSetEvent$4.OutputObject>;
    };
}

type ExecutorConfigStruct$2 = {
    maxMessageSize: BigNumberish;
    executor: AddressLike;
};
type ExecutorConfigStructOutput$2 = [
    maxMessageSize: bigint,
    executor: string
] & {
    maxMessageSize: bigint;
    executor: string;
};
type SetDefaultExecutorConfigParamStruct$2 = {
    eid: BigNumberish;
    config: ExecutorConfigStruct$2;
};
type SetDefaultExecutorConfigParamStructOutput$2 = [
    eid: bigint,
    config: ExecutorConfigStructOutput$2
] & {
    eid: bigint;
    config: ExecutorConfigStructOutput$2;
};
type UlnConfigStruct$3 = {
    confirmations: BigNumberish;
    requiredDVNCount: BigNumberish;
    optionalDVNCount: BigNumberish;
    optionalDVNThreshold: BigNumberish;
    requiredDVNs: AddressLike[];
    optionalDVNs: AddressLike[];
};
type UlnConfigStructOutput$3 = [
    confirmations: bigint,
    requiredDVNCount: bigint,
    optionalDVNCount: bigint,
    optionalDVNThreshold: bigint,
    requiredDVNs: string[],
    optionalDVNs: string[]
] & {
    confirmations: bigint;
    requiredDVNCount: bigint;
    optionalDVNCount: bigint;
    optionalDVNThreshold: bigint;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct$3 = {
    eid: BigNumberish;
    config: UlnConfigStruct$3;
};
type SetDefaultUlnConfigParamStructOutput$3 = [
    eid: bigint,
    config: UlnConfigStructOutput$3
] & {
    eid: bigint;
    config: UlnConfigStructOutput$3;
};
type PacketStruct$3 = {
    nonce: BigNumberish;
    srcEid: BigNumberish;
    sender: AddressLike;
    dstEid: BigNumberish;
    receiver: BytesLike;
    guid: BytesLike;
    message: BytesLike;
};
type MessagingFeeStructOutput$a = [
    nativeFee: bigint,
    lzTokenFee: bigint
] & {
    nativeFee: bigint;
    lzTokenFee: bigint;
};
type SetConfigParamStruct$8 = {
    eid: BigNumberish;
    configType: BigNumberish;
    config: BytesLike;
};
interface SendUln302Interface extends Interface {
    getFunction(nameOrSignature: "executorConfigs" | "fees" | "getAppUlnConfig" | "getConfig" | "getExecutorConfig" | "getUlnConfig" | "isSupportedEid" | "messageLibType" | "owner" | "quote" | "renounceOwnership" | "send" | "setConfig" | "setDefaultExecutorConfigs" | "setDefaultUlnConfigs" | "setTreasury" | "supportsInterface" | "transferOwnership" | "treasury" | "version" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DVNFeePaid" | "DefaultExecutorConfigsSet" | "DefaultUlnConfigsSet" | "ExecutorConfigSet" | "ExecutorFeePaid" | "LzTokenFeeWithdrawn" | "NativeFeeWithdrawn" | "OwnershipTransferred" | "TreasurySet" | "UlnConfigSet"): EventFragment;
    encodeFunctionData(functionFragment: "executorConfigs", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "fees", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExecutorConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [PacketStruct$3, BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [PacketStruct$3, BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [AddressLike, SetConfigParamStruct$8[]]): string;
    encodeFunctionData(functionFragment: "setDefaultExecutorConfigs", values: [SetDefaultExecutorConfigParamStruct$2[]]): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct$3[]]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "executorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExecutorConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultExecutorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
}
declare namespace DVNFeePaidEvent$1 {
    type InputTuple = [
        requiredDVNs: AddressLike[],
        optionalDVNs: AddressLike[],
        fees: BigNumberish[]
    ];
    type OutputTuple = [
        requiredDVNs: string[],
        optionalDVNs: string[],
        fees: bigint[]
    ];
    interface OutputObject {
        requiredDVNs: string[];
        optionalDVNs: string[];
        fees: bigint[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultExecutorConfigsSetEvent$2 {
    type InputTuple = [params: SetDefaultExecutorConfigParamStruct$2[]];
    type OutputTuple = [
        params: SetDefaultExecutorConfigParamStructOutput$2[]
    ];
    interface OutputObject {
        params: SetDefaultExecutorConfigParamStructOutput$2[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultUlnConfigsSetEvent$3 {
    type InputTuple = [params: SetDefaultUlnConfigParamStruct$3[]];
    type OutputTuple = [params: SetDefaultUlnConfigParamStructOutput$3[]];
    interface OutputObject {
        params: SetDefaultUlnConfigParamStructOutput$3[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ExecutorConfigSetEvent$2 {
    type InputTuple = [
        oapp: AddressLike,
        eid: BigNumberish,
        config: ExecutorConfigStruct$2
    ];
    type OutputTuple = [
        oapp: string,
        eid: bigint,
        config: ExecutorConfigStructOutput$2
    ];
    interface OutputObject {
        oapp: string;
        eid: bigint;
        config: ExecutorConfigStructOutput$2;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ExecutorFeePaidEvent$2 {
    type InputTuple = [executor: AddressLike, fee: BigNumberish];
    type OutputTuple = [executor: string, fee: bigint];
    interface OutputObject {
        executor: string;
        fee: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LzTokenFeeWithdrawnEvent$1 {
    type InputTuple = [
        lzToken: AddressLike,
        receiver: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [lzToken: string, receiver: string, amount: bigint];
    interface OutputObject {
        lzToken: string;
        receiver: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace NativeFeeWithdrawnEvent$1 {
    type InputTuple = [
        worker: AddressLike,
        receiver: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [worker: string, receiver: string, amount: bigint];
    interface OutputObject {
        worker: string;
        receiver: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$m {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace TreasurySetEvent$2 {
    type InputTuple = [treasury: AddressLike];
    type OutputTuple = [treasury: string];
    interface OutputObject {
        treasury: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UlnConfigSetEvent$3 {
    type InputTuple = [
        oapp: AddressLike,
        eid: BigNumberish,
        config: UlnConfigStruct$3
    ];
    type OutputTuple = [
        oapp: string,
        eid: bigint,
        config: UlnConfigStructOutput$3
    ];
    interface OutputObject {
        oapp: string;
        eid: bigint;
        config: UlnConfigStructOutput$3;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface SendUln302 extends BaseContract {
    connect(runner?: ContractRunner | null): SendUln302;
    waitForDeployment(): Promise<this>;
    interface: SendUln302Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    executorConfigs: TypedContractMethod<[
        oapp: AddressLike,
        eid: BigNumberish
    ], [
        [bigint, string] & {
            maxMessageSize: bigint;
            executor: string;
        }
    ], "view">;
    fees: TypedContractMethod<[worker: AddressLike], [bigint], "view">;
    getAppUlnConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$3
    ], "view">;
    getConfig: TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getExecutorConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        ExecutorConfigStructOutput$2
    ], "view">;
    getUlnConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$3
    ], "view">;
    isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    messageLibType: TypedContractMethod<[], [bigint], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    quote: TypedContractMethod<[
        _packet: PacketStruct$3,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        MessagingFeeStructOutput$a
    ], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    send: TypedContractMethod<[
        _packet: PacketStruct$3,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        [MessagingFeeStructOutput$a, string]
    ], "nonpayable">;
    setConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _params: SetConfigParamStruct$8[]
    ], [
        void
    ], "nonpayable">;
    setDefaultExecutorConfigs: TypedContractMethod<[
        _params: SetDefaultExecutorConfigParamStruct$2[]
    ], [
        void
    ], "nonpayable">;
    setDefaultUlnConfigs: TypedContractMethod<[
        _params: SetDefaultUlnConfigParamStruct$3[]
    ], [
        void
    ], "nonpayable">;
    setTreasury: TypedContractMethod<[
        _treasury: AddressLike
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        _interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    treasury: TypedContractMethod<[], [string], "view">;
    version: TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    withdrawFee: TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawLzTokenFee: TypedContractMethod<[
        _lzToken: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "executorConfigs"): TypedContractMethod<[
        oapp: AddressLike,
        eid: BigNumberish
    ], [
        [bigint, string] & {
            maxMessageSize: bigint;
            executor: string;
        }
    ], "view">;
    getFunction(nameOrSignature: "fees"): TypedContractMethod<[worker: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getAppUlnConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$3
    ], "view">;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "getExecutorConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        ExecutorConfigStructOutput$2
    ], "view">;
    getFunction(nameOrSignature: "getUlnConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$3
    ], "view">;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "messageLibType"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quote"): TypedContractMethod<[
        _packet: PacketStruct$3,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        MessagingFeeStructOutput$a
    ], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "send"): TypedContractMethod<[
        _packet: PacketStruct$3,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        [MessagingFeeStructOutput$a, string]
    ], "nonpayable">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _params: SetConfigParamStruct$8[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultExecutorConfigs"): TypedContractMethod<[
        _params: SetDefaultExecutorConfigParamStruct$2[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultUlnConfigs"): TypedContractMethod<[
        _params: SetDefaultUlnConfigParamStruct$3[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setTreasury"): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "treasury"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawLzTokenFee"): TypedContractMethod<[
        _lzToken: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "DVNFeePaid"): TypedContractEvent<DVNFeePaidEvent$1.InputTuple, DVNFeePaidEvent$1.OutputTuple, DVNFeePaidEvent$1.OutputObject>;
    getEvent(key: "DefaultExecutorConfigsSet"): TypedContractEvent<DefaultExecutorConfigsSetEvent$2.InputTuple, DefaultExecutorConfigsSetEvent$2.OutputTuple, DefaultExecutorConfigsSetEvent$2.OutputObject>;
    getEvent(key: "DefaultUlnConfigsSet"): TypedContractEvent<DefaultUlnConfigsSetEvent$3.InputTuple, DefaultUlnConfigsSetEvent$3.OutputTuple, DefaultUlnConfigsSetEvent$3.OutputObject>;
    getEvent(key: "ExecutorConfigSet"): TypedContractEvent<ExecutorConfigSetEvent$2.InputTuple, ExecutorConfigSetEvent$2.OutputTuple, ExecutorConfigSetEvent$2.OutputObject>;
    getEvent(key: "ExecutorFeePaid"): TypedContractEvent<ExecutorFeePaidEvent$2.InputTuple, ExecutorFeePaidEvent$2.OutputTuple, ExecutorFeePaidEvent$2.OutputObject>;
    getEvent(key: "LzTokenFeeWithdrawn"): TypedContractEvent<LzTokenFeeWithdrawnEvent$1.InputTuple, LzTokenFeeWithdrawnEvent$1.OutputTuple, LzTokenFeeWithdrawnEvent$1.OutputObject>;
    getEvent(key: "NativeFeeWithdrawn"): TypedContractEvent<NativeFeeWithdrawnEvent$1.InputTuple, NativeFeeWithdrawnEvent$1.OutputTuple, NativeFeeWithdrawnEvent$1.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$m.InputTuple, OwnershipTransferredEvent$m.OutputTuple, OwnershipTransferredEvent$m.OutputObject>;
    getEvent(key: "TreasurySet"): TypedContractEvent<TreasurySetEvent$2.InputTuple, TreasurySetEvent$2.OutputTuple, TreasurySetEvent$2.OutputObject>;
    getEvent(key: "UlnConfigSet"): TypedContractEvent<UlnConfigSetEvent$3.InputTuple, UlnConfigSetEvent$3.OutputTuple, UlnConfigSetEvent$3.OutputObject>;
    filters: {
        "DVNFeePaid(address[],address[],uint256[])": TypedContractEvent<DVNFeePaidEvent$1.InputTuple, DVNFeePaidEvent$1.OutputTuple, DVNFeePaidEvent$1.OutputObject>;
        DVNFeePaid: TypedContractEvent<DVNFeePaidEvent$1.InputTuple, DVNFeePaidEvent$1.OutputTuple, DVNFeePaidEvent$1.OutputObject>;
        "DefaultExecutorConfigsSet(tuple[])": TypedContractEvent<DefaultExecutorConfigsSetEvent$2.InputTuple, DefaultExecutorConfigsSetEvent$2.OutputTuple, DefaultExecutorConfigsSetEvent$2.OutputObject>;
        DefaultExecutorConfigsSet: TypedContractEvent<DefaultExecutorConfigsSetEvent$2.InputTuple, DefaultExecutorConfigsSetEvent$2.OutputTuple, DefaultExecutorConfigsSetEvent$2.OutputObject>;
        "DefaultUlnConfigsSet(tuple[])": TypedContractEvent<DefaultUlnConfigsSetEvent$3.InputTuple, DefaultUlnConfigsSetEvent$3.OutputTuple, DefaultUlnConfigsSetEvent$3.OutputObject>;
        DefaultUlnConfigsSet: TypedContractEvent<DefaultUlnConfigsSetEvent$3.InputTuple, DefaultUlnConfigsSetEvent$3.OutputTuple, DefaultUlnConfigsSetEvent$3.OutputObject>;
        "ExecutorConfigSet(address,uint32,tuple)": TypedContractEvent<ExecutorConfigSetEvent$2.InputTuple, ExecutorConfigSetEvent$2.OutputTuple, ExecutorConfigSetEvent$2.OutputObject>;
        ExecutorConfigSet: TypedContractEvent<ExecutorConfigSetEvent$2.InputTuple, ExecutorConfigSetEvent$2.OutputTuple, ExecutorConfigSetEvent$2.OutputObject>;
        "ExecutorFeePaid(address,uint256)": TypedContractEvent<ExecutorFeePaidEvent$2.InputTuple, ExecutorFeePaidEvent$2.OutputTuple, ExecutorFeePaidEvent$2.OutputObject>;
        ExecutorFeePaid: TypedContractEvent<ExecutorFeePaidEvent$2.InputTuple, ExecutorFeePaidEvent$2.OutputTuple, ExecutorFeePaidEvent$2.OutputObject>;
        "LzTokenFeeWithdrawn(address,address,uint256)": TypedContractEvent<LzTokenFeeWithdrawnEvent$1.InputTuple, LzTokenFeeWithdrawnEvent$1.OutputTuple, LzTokenFeeWithdrawnEvent$1.OutputObject>;
        LzTokenFeeWithdrawn: TypedContractEvent<LzTokenFeeWithdrawnEvent$1.InputTuple, LzTokenFeeWithdrawnEvent$1.OutputTuple, LzTokenFeeWithdrawnEvent$1.OutputObject>;
        "NativeFeeWithdrawn(address,address,uint256)": TypedContractEvent<NativeFeeWithdrawnEvent$1.InputTuple, NativeFeeWithdrawnEvent$1.OutputTuple, NativeFeeWithdrawnEvent$1.OutputObject>;
        NativeFeeWithdrawn: TypedContractEvent<NativeFeeWithdrawnEvent$1.InputTuple, NativeFeeWithdrawnEvent$1.OutputTuple, NativeFeeWithdrawnEvent$1.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$m.InputTuple, OwnershipTransferredEvent$m.OutputTuple, OwnershipTransferredEvent$m.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$m.InputTuple, OwnershipTransferredEvent$m.OutputTuple, OwnershipTransferredEvent$m.OutputObject>;
        "TreasurySet(address)": TypedContractEvent<TreasurySetEvent$2.InputTuple, TreasurySetEvent$2.OutputTuple, TreasurySetEvent$2.OutputObject>;
        TreasurySet: TypedContractEvent<TreasurySetEvent$2.InputTuple, TreasurySetEvent$2.OutputTuple, TreasurySetEvent$2.OutputObject>;
        "UlnConfigSet(address,uint32,tuple)": TypedContractEvent<UlnConfigSetEvent$3.InputTuple, UlnConfigSetEvent$3.OutputTuple, UlnConfigSetEvent$3.OutputObject>;
        UlnConfigSet: TypedContractEvent<UlnConfigSetEvent$3.InputTuple, UlnConfigSetEvent$3.OutputTuple, UlnConfigSetEvent$3.OutputObject>;
    };
}

type index$1b_ReceiveUln302 = ReceiveUln302;
type index$1b_SendUln302 = SendUln302;
declare namespace index$1b {
  export {
    index$1b_ReceiveUln302 as ReceiveUln302,
    index$1b_SendUln302 as SendUln302,
  };
}

type UlnConfigStruct$2 = {
    confirmations: BigNumberish;
    requiredDVNCount: BigNumberish;
    optionalDVNCount: BigNumberish;
    optionalDVNThreshold: BigNumberish;
    requiredDVNs: AddressLike[];
    optionalDVNs: AddressLike[];
};
type UlnConfigStructOutput$2 = [
    confirmations: bigint,
    requiredDVNCount: bigint,
    optionalDVNCount: bigint,
    optionalDVNThreshold: bigint,
    requiredDVNs: string[],
    optionalDVNs: string[]
] & {
    confirmations: bigint;
    requiredDVNCount: bigint;
    optionalDVNCount: bigint;
    optionalDVNThreshold: bigint;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct$2 = {
    eid: BigNumberish;
    config: UlnConfigStruct$2;
};
type SetDefaultUlnConfigParamStructOutput$2 = [
    eid: bigint,
    config: UlnConfigStructOutput$2
] & {
    eid: bigint;
    config: UlnConfigStructOutput$2;
};
interface ReceiveUlnBaseInterface extends Interface {
    getFunction(nameOrSignature: "getAppUlnConfig" | "getUlnConfig" | "hashLookup" | "owner" | "renounceOwnership" | "setDefaultUlnConfigs" | "transferOwnership"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultUlnConfigsSet" | "OwnershipTransferred" | "PayloadVerified" | "UlnConfigSet"): EventFragment;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "hashLookup", values: [BytesLike, BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct$2[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashLookup", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace DefaultUlnConfigsSetEvent$2 {
    type InputTuple = [params: SetDefaultUlnConfigParamStruct$2[]];
    type OutputTuple = [params: SetDefaultUlnConfigParamStructOutput$2[]];
    interface OutputObject {
        params: SetDefaultUlnConfigParamStructOutput$2[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$l {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PayloadVerifiedEvent {
    type InputTuple = [
        dvn: AddressLike,
        header: BytesLike,
        confirmations: BigNumberish,
        proofHash: BytesLike
    ];
    type OutputTuple = [
        dvn: string,
        header: string,
        confirmations: bigint,
        proofHash: string
    ];
    interface OutputObject {
        dvn: string;
        header: string;
        confirmations: bigint;
        proofHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UlnConfigSetEvent$2 {
    type InputTuple = [
        oapp: AddressLike,
        eid: BigNumberish,
        config: UlnConfigStruct$2
    ];
    type OutputTuple = [
        oapp: string,
        eid: bigint,
        config: UlnConfigStructOutput$2
    ];
    interface OutputObject {
        oapp: string;
        eid: bigint;
        config: UlnConfigStructOutput$2;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface ReceiveUlnBase extends BaseContract {
    connect(runner?: ContractRunner | null): ReceiveUlnBase;
    waitForDeployment(): Promise<this>;
    interface: ReceiveUlnBaseInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getAppUlnConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$2
    ], "view">;
    getUlnConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$2
    ], "view">;
    hashLookup: TypedContractMethod<[
        headerHash: BytesLike,
        payloadHash: BytesLike,
        dvn: AddressLike
    ], [
        bigint
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setDefaultUlnConfigs: TypedContractMethod<[
        _params: SetDefaultUlnConfigParamStruct$2[]
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getAppUlnConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$2
    ], "view">;
    getFunction(nameOrSignature: "getUlnConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$2
    ], "view">;
    getFunction(nameOrSignature: "hashLookup"): TypedContractMethod<[
        headerHash: BytesLike,
        payloadHash: BytesLike,
        dvn: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultUlnConfigs"): TypedContractMethod<[
        _params: SetDefaultUlnConfigParamStruct$2[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getEvent(key: "DefaultUlnConfigsSet"): TypedContractEvent<DefaultUlnConfigsSetEvent$2.InputTuple, DefaultUlnConfigsSetEvent$2.OutputTuple, DefaultUlnConfigsSetEvent$2.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$l.InputTuple, OwnershipTransferredEvent$l.OutputTuple, OwnershipTransferredEvent$l.OutputObject>;
    getEvent(key: "PayloadVerified"): TypedContractEvent<PayloadVerifiedEvent.InputTuple, PayloadVerifiedEvent.OutputTuple, PayloadVerifiedEvent.OutputObject>;
    getEvent(key: "UlnConfigSet"): TypedContractEvent<UlnConfigSetEvent$2.InputTuple, UlnConfigSetEvent$2.OutputTuple, UlnConfigSetEvent$2.OutputObject>;
    filters: {
        "DefaultUlnConfigsSet(tuple[])": TypedContractEvent<DefaultUlnConfigsSetEvent$2.InputTuple, DefaultUlnConfigsSetEvent$2.OutputTuple, DefaultUlnConfigsSetEvent$2.OutputObject>;
        DefaultUlnConfigsSet: TypedContractEvent<DefaultUlnConfigsSetEvent$2.InputTuple, DefaultUlnConfigsSetEvent$2.OutputTuple, DefaultUlnConfigsSetEvent$2.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$l.InputTuple, OwnershipTransferredEvent$l.OutputTuple, OwnershipTransferredEvent$l.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$l.InputTuple, OwnershipTransferredEvent$l.OutputTuple, OwnershipTransferredEvent$l.OutputObject>;
        "PayloadVerified(address,bytes,uint256,bytes32)": TypedContractEvent<PayloadVerifiedEvent.InputTuple, PayloadVerifiedEvent.OutputTuple, PayloadVerifiedEvent.OutputObject>;
        PayloadVerified: TypedContractEvent<PayloadVerifiedEvent.InputTuple, PayloadVerifiedEvent.OutputTuple, PayloadVerifiedEvent.OutputObject>;
        "UlnConfigSet(address,uint32,tuple)": TypedContractEvent<UlnConfigSetEvent$2.InputTuple, UlnConfigSetEvent$2.OutputTuple, UlnConfigSetEvent$2.OutputObject>;
        UlnConfigSet: TypedContractEvent<UlnConfigSetEvent$2.InputTuple, UlnConfigSetEvent$2.OutputTuple, UlnConfigSetEvent$2.OutputObject>;
    };
}

type UlnConfigStruct$1 = {
    confirmations: BigNumberish;
    requiredDVNCount: BigNumberish;
    optionalDVNCount: BigNumberish;
    optionalDVNThreshold: BigNumberish;
    requiredDVNs: AddressLike[];
    optionalDVNs: AddressLike[];
};
type UlnConfigStructOutput$1 = [
    confirmations: bigint,
    requiredDVNCount: bigint,
    optionalDVNCount: bigint,
    optionalDVNThreshold: bigint,
    requiredDVNs: string[],
    optionalDVNs: string[]
] & {
    confirmations: bigint;
    requiredDVNCount: bigint;
    optionalDVNCount: bigint;
    optionalDVNThreshold: bigint;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct$1 = {
    eid: BigNumberish;
    config: UlnConfigStruct$1;
};
type SetDefaultUlnConfigParamStructOutput$1 = [
    eid: bigint,
    config: UlnConfigStructOutput$1
] & {
    eid: bigint;
    config: UlnConfigStructOutput$1;
};
interface SendUlnBaseInterface extends Interface {
    getFunction(nameOrSignature: "getAppUlnConfig" | "getUlnConfig" | "owner" | "renounceOwnership" | "setDefaultUlnConfigs" | "transferOwnership"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DVNFeePaid" | "DefaultUlnConfigsSet" | "OwnershipTransferred" | "UlnConfigSet"): EventFragment;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct$1[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace DVNFeePaidEvent {
    type InputTuple = [
        requiredDVNs: AddressLike[],
        optionalDVNs: AddressLike[],
        fees: BigNumberish[]
    ];
    type OutputTuple = [
        requiredDVNs: string[],
        optionalDVNs: string[],
        fees: bigint[]
    ];
    interface OutputObject {
        requiredDVNs: string[];
        optionalDVNs: string[];
        fees: bigint[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultUlnConfigsSetEvent$1 {
    type InputTuple = [params: SetDefaultUlnConfigParamStruct$1[]];
    type OutputTuple = [params: SetDefaultUlnConfigParamStructOutput$1[]];
    interface OutputObject {
        params: SetDefaultUlnConfigParamStructOutput$1[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$k {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UlnConfigSetEvent$1 {
    type InputTuple = [
        oapp: AddressLike,
        eid: BigNumberish,
        config: UlnConfigStruct$1
    ];
    type OutputTuple = [
        oapp: string,
        eid: bigint,
        config: UlnConfigStructOutput$1
    ];
    interface OutputObject {
        oapp: string;
        eid: bigint;
        config: UlnConfigStructOutput$1;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface SendUlnBase extends BaseContract {
    connect(runner?: ContractRunner | null): SendUlnBase;
    waitForDeployment(): Promise<this>;
    interface: SendUlnBaseInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getAppUlnConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$1
    ], "view">;
    getUlnConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$1
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setDefaultUlnConfigs: TypedContractMethod<[
        _params: SetDefaultUlnConfigParamStruct$1[]
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getAppUlnConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$1
    ], "view">;
    getFunction(nameOrSignature: "getUlnConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput$1
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultUlnConfigs"): TypedContractMethod<[
        _params: SetDefaultUlnConfigParamStruct$1[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getEvent(key: "DVNFeePaid"): TypedContractEvent<DVNFeePaidEvent.InputTuple, DVNFeePaidEvent.OutputTuple, DVNFeePaidEvent.OutputObject>;
    getEvent(key: "DefaultUlnConfigsSet"): TypedContractEvent<DefaultUlnConfigsSetEvent$1.InputTuple, DefaultUlnConfigsSetEvent$1.OutputTuple, DefaultUlnConfigsSetEvent$1.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$k.InputTuple, OwnershipTransferredEvent$k.OutputTuple, OwnershipTransferredEvent$k.OutputObject>;
    getEvent(key: "UlnConfigSet"): TypedContractEvent<UlnConfigSetEvent$1.InputTuple, UlnConfigSetEvent$1.OutputTuple, UlnConfigSetEvent$1.OutputObject>;
    filters: {
        "DVNFeePaid(address[],address[],uint256[])": TypedContractEvent<DVNFeePaidEvent.InputTuple, DVNFeePaidEvent.OutputTuple, DVNFeePaidEvent.OutputObject>;
        DVNFeePaid: TypedContractEvent<DVNFeePaidEvent.InputTuple, DVNFeePaidEvent.OutputTuple, DVNFeePaidEvent.OutputObject>;
        "DefaultUlnConfigsSet(tuple[])": TypedContractEvent<DefaultUlnConfigsSetEvent$1.InputTuple, DefaultUlnConfigsSetEvent$1.OutputTuple, DefaultUlnConfigsSetEvent$1.OutputObject>;
        DefaultUlnConfigsSet: TypedContractEvent<DefaultUlnConfigsSetEvent$1.InputTuple, DefaultUlnConfigsSetEvent$1.OutputTuple, DefaultUlnConfigsSetEvent$1.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$k.InputTuple, OwnershipTransferredEvent$k.OutputTuple, OwnershipTransferredEvent$k.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$k.InputTuple, OwnershipTransferredEvent$k.OutputTuple, OwnershipTransferredEvent$k.OutputObject>;
        "UlnConfigSet(address,uint32,tuple)": TypedContractEvent<UlnConfigSetEvent$1.InputTuple, UlnConfigSetEvent$1.OutputTuple, UlnConfigSetEvent$1.OutputObject>;
        UlnConfigSet: TypedContractEvent<UlnConfigSetEvent$1.InputTuple, UlnConfigSetEvent$1.OutputTuple, UlnConfigSetEvent$1.OutputObject>;
    };
}

type UlnConfigStruct = {
    confirmations: BigNumberish;
    requiredDVNCount: BigNumberish;
    optionalDVNCount: BigNumberish;
    optionalDVNThreshold: BigNumberish;
    requiredDVNs: AddressLike[];
    optionalDVNs: AddressLike[];
};
type UlnConfigStructOutput = [
    confirmations: bigint,
    requiredDVNCount: bigint,
    optionalDVNCount: bigint,
    optionalDVNThreshold: bigint,
    requiredDVNs: string[],
    optionalDVNs: string[]
] & {
    confirmations: bigint;
    requiredDVNCount: bigint;
    optionalDVNCount: bigint;
    optionalDVNThreshold: bigint;
    requiredDVNs: string[];
    optionalDVNs: string[];
};
type SetDefaultUlnConfigParamStruct = {
    eid: BigNumberish;
    config: UlnConfigStruct;
};
type SetDefaultUlnConfigParamStructOutput = [
    eid: bigint,
    config: UlnConfigStructOutput
] & {
    eid: bigint;
    config: UlnConfigStructOutput;
};
interface UlnBaseInterface extends Interface {
    getFunction(nameOrSignature: "getAppUlnConfig" | "getUlnConfig" | "owner" | "renounceOwnership" | "setDefaultUlnConfigs" | "transferOwnership"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultUlnConfigsSet" | "OwnershipTransferred" | "UlnConfigSet"): EventFragment;
    encodeFunctionData(functionFragment: "getAppUlnConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultUlnConfigs", values: [SetDefaultUlnConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "getAppUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultUlnConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace DefaultUlnConfigsSetEvent {
    type InputTuple = [params: SetDefaultUlnConfigParamStruct[]];
    type OutputTuple = [params: SetDefaultUlnConfigParamStructOutput[]];
    interface OutputObject {
        params: SetDefaultUlnConfigParamStructOutput[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$j {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UlnConfigSetEvent {
    type InputTuple = [
        oapp: AddressLike,
        eid: BigNumberish,
        config: UlnConfigStruct
    ];
    type OutputTuple = [
        oapp: string,
        eid: bigint,
        config: UlnConfigStructOutput
    ];
    interface OutputObject {
        oapp: string;
        eid: bigint;
        config: UlnConfigStructOutput;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface UlnBase extends BaseContract {
    connect(runner?: ContractRunner | null): UlnBase;
    waitForDeployment(): Promise<this>;
    interface: UlnBaseInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getAppUlnConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput
    ], "view">;
    getUlnConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setDefaultUlnConfigs: TypedContractMethod<[
        _params: SetDefaultUlnConfigParamStruct[]
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getAppUlnConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput
    ], "view">;
    getFunction(nameOrSignature: "getUlnConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        UlnConfigStructOutput
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultUlnConfigs"): TypedContractMethod<[
        _params: SetDefaultUlnConfigParamStruct[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getEvent(key: "DefaultUlnConfigsSet"): TypedContractEvent<DefaultUlnConfigsSetEvent.InputTuple, DefaultUlnConfigsSetEvent.OutputTuple, DefaultUlnConfigsSetEvent.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$j.InputTuple, OwnershipTransferredEvent$j.OutputTuple, OwnershipTransferredEvent$j.OutputObject>;
    getEvent(key: "UlnConfigSet"): TypedContractEvent<UlnConfigSetEvent.InputTuple, UlnConfigSetEvent.OutputTuple, UlnConfigSetEvent.OutputObject>;
    filters: {
        "DefaultUlnConfigsSet(tuple[])": TypedContractEvent<DefaultUlnConfigsSetEvent.InputTuple, DefaultUlnConfigsSetEvent.OutputTuple, DefaultUlnConfigsSetEvent.OutputObject>;
        DefaultUlnConfigsSet: TypedContractEvent<DefaultUlnConfigsSetEvent.InputTuple, DefaultUlnConfigsSetEvent.OutputTuple, DefaultUlnConfigsSetEvent.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$j.InputTuple, OwnershipTransferredEvent$j.OutputTuple, OwnershipTransferredEvent$j.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$j.InputTuple, OwnershipTransferredEvent$j.OutputTuple, OwnershipTransferredEvent$j.OutputObject>;
        "UlnConfigSet(address,uint32,tuple)": TypedContractEvent<UlnConfigSetEvent.InputTuple, UlnConfigSetEvent.OutputTuple, UlnConfigSetEvent.OutputObject>;
        UlnConfigSet: TypedContractEvent<UlnConfigSetEvent.InputTuple, UlnConfigSetEvent.OutputTuple, UlnConfigSetEvent.OutputObject>;
    };
}

type index$1a_ReceiveUlnBase = ReceiveUlnBase;
type index$1a_SendUlnBase = SendUlnBase;
type index$1a_UlnBase = UlnBase;
declare namespace index$1a {
  export {
    index$1a_ReceiveUlnBase as ReceiveUlnBase,
    index$1a_SendUlnBase as SendUlnBase,
    index$1a_UlnBase as UlnBase,
    index$1e as dvn,
    index$1d as interfaces,
    index$1c as libs,
    index$1b as uln302,
  };
}

interface ProxyAdminInterface extends Interface {
    getFunction(nameOrSignature: "changeProxyAdmin" | "getProxyAdmin" | "getProxyImplementation" | "owner" | "renounceOwnership" | "transferOwnership" | "upgrade" | "upgradeAndCall"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    encodeFunctionData(functionFragment: "changeProxyAdmin", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "getProxyAdmin", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getProxyImplementation", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "upgrade", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "upgradeAndCall", values: [AddressLike, AddressLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "changeProxyAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProxyAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProxyImplementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeAndCall", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$i {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface ProxyAdmin extends BaseContract {
    connect(runner?: ContractRunner | null): ProxyAdmin;
    waitForDeployment(): Promise<this>;
    interface: ProxyAdminInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    changeProxyAdmin: TypedContractMethod<[
        proxy: AddressLike,
        newAdmin: AddressLike
    ], [
        void
    ], "nonpayable">;
    getProxyAdmin: TypedContractMethod<[proxy: AddressLike], [string], "view">;
    getProxyImplementation: TypedContractMethod<[
        proxy: AddressLike
    ], [
        string
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    upgrade: TypedContractMethod<[
        proxy: AddressLike,
        implementation: AddressLike
    ], [
        void
    ], "nonpayable">;
    upgradeAndCall: TypedContractMethod<[
        proxy: AddressLike,
        implementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "changeProxyAdmin"): TypedContractMethod<[
        proxy: AddressLike,
        newAdmin: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "getProxyAdmin"): TypedContractMethod<[proxy: AddressLike], [string], "view">;
    getFunction(nameOrSignature: "getProxyImplementation"): TypedContractMethod<[proxy: AddressLike], [string], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "upgrade"): TypedContractMethod<[
        proxy: AddressLike,
        implementation: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "upgradeAndCall"): TypedContractMethod<[
        proxy: AddressLike,
        implementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$i.InputTuple, OwnershipTransferredEvent$i.OutputTuple, OwnershipTransferredEvent$i.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$i.InputTuple, OwnershipTransferredEvent$i.OutputTuple, OwnershipTransferredEvent$i.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$i.InputTuple, OwnershipTransferredEvent$i.OutputTuple, OwnershipTransferredEvent$i.OutputObject>;
    };
}

interface TransparentUpgradeableProxyInterface extends Interface {
    getFunction(nameOrSignature: "admin" | "changeAdmin" | "implementation" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AdminChanged" | "BeaconUpgraded" | "Upgraded"): EventFragment;
    encodeFunctionData(functionFragment: "admin", values?: undefined): string;
    encodeFunctionData(functionFragment: "changeAdmin", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "changeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
}
declare namespace AdminChangedEvent {
    type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
    type OutputTuple = [previousAdmin: string, newAdmin: string];
    interface OutputObject {
        previousAdmin: string;
        newAdmin: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace BeaconUpgradedEvent {
    type InputTuple = [beacon: AddressLike];
    type OutputTuple = [beacon: string];
    interface OutputObject {
        beacon: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UpgradedEvent {
    type InputTuple = [implementation: AddressLike];
    type OutputTuple = [implementation: string];
    interface OutputObject {
        implementation: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface TransparentUpgradeableProxy extends BaseContract {
    connect(runner?: ContractRunner | null): TransparentUpgradeableProxy;
    waitForDeployment(): Promise<this>;
    interface: TransparentUpgradeableProxyInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    admin: TypedContractMethod<[], [string], "nonpayable">;
    changeAdmin: TypedContractMethod<[
        newAdmin: AddressLike
    ], [
        void
    ], "nonpayable">;
    implementation: TypedContractMethod<[], [string], "nonpayable">;
    upgradeTo: TypedContractMethod<[
        newImplementation: AddressLike
    ], [
        void
    ], "nonpayable">;
    upgradeToAndCall: TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "admin"): TypedContractMethod<[], [string], "nonpayable">;
    getFunction(nameOrSignature: "changeAdmin"): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "implementation"): TypedContractMethod<[], [string], "nonpayable">;
    getFunction(nameOrSignature: "upgradeTo"): TypedContractMethod<[
        newImplementation: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "upgradeToAndCall"): TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    getEvent(key: "AdminChanged"): TypedContractEvent<AdminChangedEvent.InputTuple, AdminChangedEvent.OutputTuple, AdminChangedEvent.OutputObject>;
    getEvent(key: "BeaconUpgraded"): TypedContractEvent<BeaconUpgradedEvent.InputTuple, BeaconUpgradedEvent.OutputTuple, BeaconUpgradedEvent.OutputObject>;
    getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
    filters: {
        "AdminChanged(address,address)": TypedContractEvent<AdminChangedEvent.InputTuple, AdminChangedEvent.OutputTuple, AdminChangedEvent.OutputObject>;
        AdminChanged: TypedContractEvent<AdminChangedEvent.InputTuple, AdminChangedEvent.OutputTuple, AdminChangedEvent.OutputObject>;
        "BeaconUpgraded(address)": TypedContractEvent<BeaconUpgradedEvent.InputTuple, BeaconUpgradedEvent.OutputTuple, BeaconUpgradedEvent.OutputObject>;
        BeaconUpgraded: TypedContractEvent<BeaconUpgradedEvent.InputTuple, BeaconUpgradedEvent.OutputTuple, BeaconUpgradedEvent.OutputObject>;
        "Upgraded(address)": TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
        Upgraded: TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
    };
}

type index$19_ProxyAdmin = ProxyAdmin;
type index$19_TransparentUpgradeableProxy = TransparentUpgradeableProxy;
declare namespace index$19 {
  export {
    index$19_ProxyAdmin as ProxyAdmin,
    index$19_TransparentUpgradeableProxy as TransparentUpgradeableProxy,
  };
}

interface WorkerUpgradeableInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "defaultMultiplierBps" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "paused" | "priceFeed" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setPaused" | "setPriceFeed" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "supportsInterface" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized" | "Paused" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "SetDefaultMultiplierBps" | "SetPriceFeed" | "SetSupportedOptionTypes" | "SetWorkerLib" | "Unpaused" | "Withdraw"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [BigNumberish, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
}
declare namespace InitializedEvent$2 {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PausedEvent$2 {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleAdminChangedEvent$2 {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleGrantedEvent$2 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleRevokedEvent$2 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetDefaultMultiplierBpsEvent$2 {
    type InputTuple = [multiplierBps: BigNumberish];
    type OutputTuple = [multiplierBps: bigint];
    interface OutputObject {
        multiplierBps: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPriceFeedEvent$2 {
    type InputTuple = [priceFeed: AddressLike];
    type OutputTuple = [priceFeed: string];
    interface OutputObject {
        priceFeed: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetSupportedOptionTypesEvent$2 {
    type InputTuple = [dstEid: BigNumberish, optionTypes: BigNumberish[]];
    type OutputTuple = [dstEid: bigint, optionTypes: bigint[]];
    interface OutputObject {
        dstEid: bigint;
        optionTypes: bigint[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetWorkerLibEvent$2 {
    type InputTuple = [workerLib: AddressLike];
    type OutputTuple = [workerLib: string];
    interface OutputObject {
        workerLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UnpausedEvent$2 {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$2 {
    type InputTuple = [
        lib: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [lib: string, to: string, amount: bigint];
    interface OutputObject {
        lib: string;
        to: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface WorkerUpgradeable extends BaseContract {
    connect(runner?: ContractRunner | null): WorkerUpgradeable;
    waitForDeployment(): Promise<this>;
    interface: WorkerUpgradeableInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    allowlistSize: TypedContractMethod<[], [bigint], "view">;
    defaultMultiplierBps: TypedContractMethod<[], [bigint], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    getSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        bigint[]
    ], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasAcl: TypedContractMethod<[_sender: AddressLike], [boolean], "view">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    paused: TypedContractMethod<[], [boolean], "view">;
    priceFeed: TypedContractMethod<[], [string], "view">;
    renounceRole: TypedContractMethod<[
        arg0: BytesLike,
        arg1: AddressLike
    ], [
        void
    ], "view">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    setDefaultMultiplierBps: TypedContractMethod<[
        _multiplierBps: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
    setPriceFeed: TypedContractMethod<[
        _priceFeed: AddressLike
    ], [
        void
    ], "nonpayable">;
    setSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    setWorkerFeeLib: TypedContractMethod<[
        _workerFeeLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    withdrawFee: TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawToken: TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    workerFeeLib: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "allowlistSize"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "defaultMultiplierBps"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "getSupportedOptionTypes"): TypedContractMethod<[_eid: BigNumberish], [bigint[]], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasAcl"): TypedContractMethod<[_sender: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "paused"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "priceFeed"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[arg0: BytesLike, arg1: AddressLike], [void], "view">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultMultiplierBps"): TypedContractMethod<[_multiplierBps: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPaused"): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPriceFeed"): TypedContractMethod<[_priceFeed: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setSupportedOptionTypes"): TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setWorkerFeeLib"): TypedContractMethod<[_workerFeeLib: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawToken"): TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "workerFeeLib"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$2.InputTuple, InitializedEvent$2.OutputTuple, InitializedEvent$2.OutputObject>;
    getEvent(key: "Paused"): TypedContractEvent<PausedEvent$2.InputTuple, PausedEvent$2.OutputTuple, PausedEvent$2.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent$2.InputTuple, RoleAdminChangedEvent$2.OutputTuple, RoleAdminChangedEvent$2.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent$2.InputTuple, RoleGrantedEvent$2.OutputTuple, RoleGrantedEvent$2.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent$2.InputTuple, RoleRevokedEvent$2.OutputTuple, RoleRevokedEvent$2.OutputObject>;
    getEvent(key: "SetDefaultMultiplierBps"): TypedContractEvent<SetDefaultMultiplierBpsEvent$2.InputTuple, SetDefaultMultiplierBpsEvent$2.OutputTuple, SetDefaultMultiplierBpsEvent$2.OutputObject>;
    getEvent(key: "SetPriceFeed"): TypedContractEvent<SetPriceFeedEvent$2.InputTuple, SetPriceFeedEvent$2.OutputTuple, SetPriceFeedEvent$2.OutputObject>;
    getEvent(key: "SetSupportedOptionTypes"): TypedContractEvent<SetSupportedOptionTypesEvent$2.InputTuple, SetSupportedOptionTypesEvent$2.OutputTuple, SetSupportedOptionTypesEvent$2.OutputObject>;
    getEvent(key: "SetWorkerLib"): TypedContractEvent<SetWorkerLibEvent$2.InputTuple, SetWorkerLibEvent$2.OutputTuple, SetWorkerLibEvent$2.OutputObject>;
    getEvent(key: "Unpaused"): TypedContractEvent<UnpausedEvent$2.InputTuple, UnpausedEvent$2.OutputTuple, UnpausedEvent$2.OutputObject>;
    getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$2.InputTuple, WithdrawEvent$2.OutputTuple, WithdrawEvent$2.OutputObject>;
    filters: {
        "Initialized(uint8)": TypedContractEvent<InitializedEvent$2.InputTuple, InitializedEvent$2.OutputTuple, InitializedEvent$2.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent$2.InputTuple, InitializedEvent$2.OutputTuple, InitializedEvent$2.OutputObject>;
        "Paused(address)": TypedContractEvent<PausedEvent$2.InputTuple, PausedEvent$2.OutputTuple, PausedEvent$2.OutputObject>;
        Paused: TypedContractEvent<PausedEvent$2.InputTuple, PausedEvent$2.OutputTuple, PausedEvent$2.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent$2.InputTuple, RoleAdminChangedEvent$2.OutputTuple, RoleAdminChangedEvent$2.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent$2.InputTuple, RoleAdminChangedEvent$2.OutputTuple, RoleAdminChangedEvent$2.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent$2.InputTuple, RoleGrantedEvent$2.OutputTuple, RoleGrantedEvent$2.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent$2.InputTuple, RoleGrantedEvent$2.OutputTuple, RoleGrantedEvent$2.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent$2.InputTuple, RoleRevokedEvent$2.OutputTuple, RoleRevokedEvent$2.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent$2.InputTuple, RoleRevokedEvent$2.OutputTuple, RoleRevokedEvent$2.OutputObject>;
        "SetDefaultMultiplierBps(uint16)": TypedContractEvent<SetDefaultMultiplierBpsEvent$2.InputTuple, SetDefaultMultiplierBpsEvent$2.OutputTuple, SetDefaultMultiplierBpsEvent$2.OutputObject>;
        SetDefaultMultiplierBps: TypedContractEvent<SetDefaultMultiplierBpsEvent$2.InputTuple, SetDefaultMultiplierBpsEvent$2.OutputTuple, SetDefaultMultiplierBpsEvent$2.OutputObject>;
        "SetPriceFeed(address)": TypedContractEvent<SetPriceFeedEvent$2.InputTuple, SetPriceFeedEvent$2.OutputTuple, SetPriceFeedEvent$2.OutputObject>;
        SetPriceFeed: TypedContractEvent<SetPriceFeedEvent$2.InputTuple, SetPriceFeedEvent$2.OutputTuple, SetPriceFeedEvent$2.OutputObject>;
        "SetSupportedOptionTypes(uint32,uint8[])": TypedContractEvent<SetSupportedOptionTypesEvent$2.InputTuple, SetSupportedOptionTypesEvent$2.OutputTuple, SetSupportedOptionTypesEvent$2.OutputObject>;
        SetSupportedOptionTypes: TypedContractEvent<SetSupportedOptionTypesEvent$2.InputTuple, SetSupportedOptionTypesEvent$2.OutputTuple, SetSupportedOptionTypesEvent$2.OutputObject>;
        "SetWorkerLib(address)": TypedContractEvent<SetWorkerLibEvent$2.InputTuple, SetWorkerLibEvent$2.OutputTuple, SetWorkerLibEvent$2.OutputObject>;
        SetWorkerLib: TypedContractEvent<SetWorkerLibEvent$2.InputTuple, SetWorkerLibEvent$2.OutputTuple, SetWorkerLibEvent$2.OutputObject>;
        "Unpaused(address)": TypedContractEvent<UnpausedEvent$2.InputTuple, UnpausedEvent$2.OutputTuple, UnpausedEvent$2.OutputObject>;
        Unpaused: TypedContractEvent<UnpausedEvent$2.InputTuple, UnpausedEvent$2.OutputTuple, UnpausedEvent$2.OutputObject>;
        "Withdraw(address,address,uint256)": TypedContractEvent<WithdrawEvent$2.InputTuple, WithdrawEvent$2.OutputTuple, WithdrawEvent$2.OutputObject>;
        Withdraw: TypedContractEvent<WithdrawEvent$2.InputTuple, WithdrawEvent$2.OutputTuple, WithdrawEvent$2.OutputObject>;
    };
}

type index$18_WorkerUpgradeable = WorkerUpgradeable;
declare namespace index$18 {
  export {
    index$18_WorkerUpgradeable as WorkerUpgradeable,
    index$19 as proxy,
  };
}

type OriginStruct$c = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
type OriginStructOutput$2 = [
    srcEid: bigint,
    sender: string,
    nonce: bigint
] & {
    srcEid: bigint;
    sender: string;
    nonce: bigint;
};
declare namespace IExecutor$1 {
    type DstConfigParamStruct = {
        dstEid: BigNumberish;
        baseGas: BigNumberish;
        multiplierBps: BigNumberish;
        floorMarginUSD: BigNumberish;
        nativeDropCap: BigNumberish;
    };
    type DstConfigParamStructOutput = [
        dstEid: bigint,
        baseGas: bigint,
        multiplierBps: bigint,
        floorMarginUSD: bigint,
        nativeDropCap: bigint
    ] & {
        dstEid: bigint;
        baseGas: bigint;
        multiplierBps: bigint;
        floorMarginUSD: bigint;
        nativeDropCap: bigint;
    };
    type NativeDropParamsStruct = {
        receiver: AddressLike;
        amount: BigNumberish;
        gasLimit: BigNumberish;
    };
    type NativeDropParamsStructOutput = [
        receiver: string,
        amount: bigint,
        gasLimit: bigint
    ] & {
        receiver: string;
        amount: bigint;
        gasLimit: bigint;
    };
    type ExecutionParamsStruct = {
        receiver: AddressLike;
        origin: OriginStruct$c;
        guid: BytesLike;
        message: BytesLike;
        extraData: BytesLike;
        gasLimit: BigNumberish;
    };
    type ExecutionParamsStructOutput = [
        receiver: string,
        origin: OriginStructOutput$2,
        guid: string,
        message: string,
        extraData: string,
        gasLimit: bigint
    ] & {
        receiver: string;
        origin: OriginStructOutput$2;
        guid: string;
        message: string;
        extraData: string;
        gasLimit: bigint;
    };
}
interface ExecutorInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "assignJob" | "defaultMultiplierBps" | "dstConfig" | "endpoint" | "getFee" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "initialize" | "localEid" | "nativeDrop" | "nativeDropAndExecute302" | "paused" | "priceFeed" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setDstConfig" | "setPaused" | "setPriceFeed" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "supportsInterface" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DstConfigSet" | "Initialized" | "NativeDropFailed" | "NativeDropSucceeded" | "Paused" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "SetDefaultMultiplierBps" | "SetPriceFeed" | "SetSupportedOptionTypes" | "SetWorkerLib" | "Unpaused" | "Withdraw"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob", values: [BigNumberish, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFee", values: [BigNumberish, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        AddressLike,
        AddressLike[],
        AddressLike,
        AddressLike,
        AddressLike[]
    ]): string;
    encodeFunctionData(functionFragment: "localEid", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeDrop", values: [
        OriginStruct$c,
        BigNumberish,
        AddressLike,
        IExecutor$1.NativeDropParamsStruct
    ]): string;
    encodeFunctionData(functionFragment: "nativeDropAndExecute302", values: [IExecutor$1.NativeDropParamsStruct, IExecutor$1.ExecutionParamsStruct]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDstConfig", values: [IExecutor$1.DstConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [BigNumberish, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "localEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeDrop", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeDropAndExecute302", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
}
declare namespace DstConfigSetEvent {
    type InputTuple = [params: IExecutor$1.DstConfigParamStruct[]];
    type OutputTuple = [params: IExecutor$1.DstConfigParamStructOutput[]];
    interface OutputObject {
        params: IExecutor$1.DstConfigParamStructOutput[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$1 {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace NativeDropFailedEvent {
    type InputTuple = [
        origin: OriginStruct$c,
        dstEid: BigNumberish,
        oapp: AddressLike,
        receiver: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [
        origin: OriginStructOutput$2,
        dstEid: bigint,
        oapp: string,
        receiver: string,
        amount: bigint
    ];
    interface OutputObject {
        origin: OriginStructOutput$2;
        dstEid: bigint;
        oapp: string;
        receiver: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace NativeDropSucceededEvent {
    type InputTuple = [
        origin: OriginStruct$c,
        dstEid: BigNumberish,
        oapp: AddressLike,
        receiver: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [
        origin: OriginStructOutput$2,
        dstEid: bigint,
        oapp: string,
        receiver: string,
        amount: bigint
    ];
    interface OutputObject {
        origin: OriginStructOutput$2;
        dstEid: bigint;
        oapp: string;
        receiver: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PausedEvent$1 {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleAdminChangedEvent$1 {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleGrantedEvent$1 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleRevokedEvent$1 {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetDefaultMultiplierBpsEvent$1 {
    type InputTuple = [multiplierBps: BigNumberish];
    type OutputTuple = [multiplierBps: bigint];
    interface OutputObject {
        multiplierBps: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPriceFeedEvent$1 {
    type InputTuple = [priceFeed: AddressLike];
    type OutputTuple = [priceFeed: string];
    interface OutputObject {
        priceFeed: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetSupportedOptionTypesEvent$1 {
    type InputTuple = [dstEid: BigNumberish, optionTypes: BigNumberish[]];
    type OutputTuple = [dstEid: bigint, optionTypes: bigint[]];
    interface OutputObject {
        dstEid: bigint;
        optionTypes: bigint[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetWorkerLibEvent$1 {
    type InputTuple = [workerLib: AddressLike];
    type OutputTuple = [workerLib: string];
    interface OutputObject {
        workerLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UnpausedEvent$1 {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$1 {
    type InputTuple = [
        lib: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [lib: string, to: string, amount: bigint];
    interface OutputObject {
        lib: string;
        to: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface Executor extends BaseContract {
    connect(runner?: ContractRunner | null): Executor;
    waitForDeployment(): Promise<this>;
    interface: ExecutorInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    allowlistSize: TypedContractMethod<[], [bigint], "view">;
    assignJob: TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    defaultMultiplierBps: TypedContractMethod<[], [bigint], "view">;
    dstConfig: TypedContractMethod<[
        dstEid: BigNumberish
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            baseGas: bigint;
            multiplierBps: bigint;
            floorMarginUSD: bigint;
            nativeDropCap: bigint;
        }
    ], "view">;
    endpoint: TypedContractMethod<[], [string], "view">;
    getFee: TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    getSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        bigint[]
    ], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasAcl: TypedContractMethod<[_sender: AddressLike], [boolean], "view">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    initialize: TypedContractMethod<[
        _endpoint: AddressLike,
        _messageLibs: AddressLike[],
        _priceFeed: AddressLike,
        _roleAdmin: AddressLike,
        _admins: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    localEid: TypedContractMethod<[], [bigint], "view">;
    nativeDrop: TypedContractMethod<[
        _origin: OriginStruct$c,
        _dstEid: BigNumberish,
        _oapp: AddressLike,
        _nativeDropParams: IExecutor$1.NativeDropParamsStruct
    ], [
        void
    ], "payable">;
    nativeDropAndExecute302: TypedContractMethod<[
        _nativeDropParams: IExecutor$1.NativeDropParamsStruct,
        _executionParams: IExecutor$1.ExecutionParamsStruct
    ], [
        void
    ], "payable">;
    paused: TypedContractMethod<[], [boolean], "view">;
    priceFeed: TypedContractMethod<[], [string], "view">;
    renounceRole: TypedContractMethod<[
        arg0: BytesLike,
        arg1: AddressLike
    ], [
        void
    ], "view">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    setDefaultMultiplierBps: TypedContractMethod<[
        _multiplierBps: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setDstConfig: TypedContractMethod<[
        _params: IExecutor$1.DstConfigParamStruct[]
    ], [
        void
    ], "nonpayable">;
    setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
    setPriceFeed: TypedContractMethod<[
        _priceFeed: AddressLike
    ], [
        void
    ], "nonpayable">;
    setSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    setWorkerFeeLib: TypedContractMethod<[
        _workerFeeLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    withdrawFee: TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawToken: TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    workerFeeLib: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "allowlistSize"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "assignJob"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFunction(nameOrSignature: "defaultMultiplierBps"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "dstConfig"): TypedContractMethod<[
        dstEid: BigNumberish
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            baseGas: bigint;
            multiplierBps: bigint;
            floorMarginUSD: bigint;
            nativeDropCap: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "endpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _sender: AddressLike,
        _calldataSize: BigNumberish,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "getSupportedOptionTypes"): TypedContractMethod<[_eid: BigNumberish], [bigint[]], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasAcl"): TypedContractMethod<[_sender: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        _endpoint: AddressLike,
        _messageLibs: AddressLike[],
        _priceFeed: AddressLike,
        _roleAdmin: AddressLike,
        _admins: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "localEid"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "nativeDrop"): TypedContractMethod<[
        _origin: OriginStruct$c,
        _dstEid: BigNumberish,
        _oapp: AddressLike,
        _nativeDropParams: IExecutor$1.NativeDropParamsStruct
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "nativeDropAndExecute302"): TypedContractMethod<[
        _nativeDropParams: IExecutor$1.NativeDropParamsStruct,
        _executionParams: IExecutor$1.ExecutionParamsStruct
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "paused"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "priceFeed"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[arg0: BytesLike, arg1: AddressLike], [void], "view">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultMultiplierBps"): TypedContractMethod<[_multiplierBps: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDstConfig"): TypedContractMethod<[
        _params: IExecutor$1.DstConfigParamStruct[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPaused"): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPriceFeed"): TypedContractMethod<[_priceFeed: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setSupportedOptionTypes"): TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setWorkerFeeLib"): TypedContractMethod<[_workerFeeLib: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawToken"): TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "workerFeeLib"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "DstConfigSet"): TypedContractEvent<DstConfigSetEvent.InputTuple, DstConfigSetEvent.OutputTuple, DstConfigSetEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$1.InputTuple, InitializedEvent$1.OutputTuple, InitializedEvent$1.OutputObject>;
    getEvent(key: "NativeDropFailed"): TypedContractEvent<NativeDropFailedEvent.InputTuple, NativeDropFailedEvent.OutputTuple, NativeDropFailedEvent.OutputObject>;
    getEvent(key: "NativeDropSucceeded"): TypedContractEvent<NativeDropSucceededEvent.InputTuple, NativeDropSucceededEvent.OutputTuple, NativeDropSucceededEvent.OutputObject>;
    getEvent(key: "Paused"): TypedContractEvent<PausedEvent$1.InputTuple, PausedEvent$1.OutputTuple, PausedEvent$1.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent$1.InputTuple, RoleAdminChangedEvent$1.OutputTuple, RoleAdminChangedEvent$1.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent$1.InputTuple, RoleGrantedEvent$1.OutputTuple, RoleGrantedEvent$1.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent$1.InputTuple, RoleRevokedEvent$1.OutputTuple, RoleRevokedEvent$1.OutputObject>;
    getEvent(key: "SetDefaultMultiplierBps"): TypedContractEvent<SetDefaultMultiplierBpsEvent$1.InputTuple, SetDefaultMultiplierBpsEvent$1.OutputTuple, SetDefaultMultiplierBpsEvent$1.OutputObject>;
    getEvent(key: "SetPriceFeed"): TypedContractEvent<SetPriceFeedEvent$1.InputTuple, SetPriceFeedEvent$1.OutputTuple, SetPriceFeedEvent$1.OutputObject>;
    getEvent(key: "SetSupportedOptionTypes"): TypedContractEvent<SetSupportedOptionTypesEvent$1.InputTuple, SetSupportedOptionTypesEvent$1.OutputTuple, SetSupportedOptionTypesEvent$1.OutputObject>;
    getEvent(key: "SetWorkerLib"): TypedContractEvent<SetWorkerLibEvent$1.InputTuple, SetWorkerLibEvent$1.OutputTuple, SetWorkerLibEvent$1.OutputObject>;
    getEvent(key: "Unpaused"): TypedContractEvent<UnpausedEvent$1.InputTuple, UnpausedEvent$1.OutputTuple, UnpausedEvent$1.OutputObject>;
    getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$1.InputTuple, WithdrawEvent$1.OutputTuple, WithdrawEvent$1.OutputObject>;
    filters: {
        "DstConfigSet(tuple[])": TypedContractEvent<DstConfigSetEvent.InputTuple, DstConfigSetEvent.OutputTuple, DstConfigSetEvent.OutputObject>;
        DstConfigSet: TypedContractEvent<DstConfigSetEvent.InputTuple, DstConfigSetEvent.OutputTuple, DstConfigSetEvent.OutputObject>;
        "Initialized(uint8)": TypedContractEvent<InitializedEvent$1.InputTuple, InitializedEvent$1.OutputTuple, InitializedEvent$1.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent$1.InputTuple, InitializedEvent$1.OutputTuple, InitializedEvent$1.OutputObject>;
        "NativeDropFailed(tuple,uint32,address,address,uint256)": TypedContractEvent<NativeDropFailedEvent.InputTuple, NativeDropFailedEvent.OutputTuple, NativeDropFailedEvent.OutputObject>;
        NativeDropFailed: TypedContractEvent<NativeDropFailedEvent.InputTuple, NativeDropFailedEvent.OutputTuple, NativeDropFailedEvent.OutputObject>;
        "NativeDropSucceeded(tuple,uint32,address,address,uint256)": TypedContractEvent<NativeDropSucceededEvent.InputTuple, NativeDropSucceededEvent.OutputTuple, NativeDropSucceededEvent.OutputObject>;
        NativeDropSucceeded: TypedContractEvent<NativeDropSucceededEvent.InputTuple, NativeDropSucceededEvent.OutputTuple, NativeDropSucceededEvent.OutputObject>;
        "Paused(address)": TypedContractEvent<PausedEvent$1.InputTuple, PausedEvent$1.OutputTuple, PausedEvent$1.OutputObject>;
        Paused: TypedContractEvent<PausedEvent$1.InputTuple, PausedEvent$1.OutputTuple, PausedEvent$1.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent$1.InputTuple, RoleAdminChangedEvent$1.OutputTuple, RoleAdminChangedEvent$1.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent$1.InputTuple, RoleAdminChangedEvent$1.OutputTuple, RoleAdminChangedEvent$1.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent$1.InputTuple, RoleGrantedEvent$1.OutputTuple, RoleGrantedEvent$1.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent$1.InputTuple, RoleGrantedEvent$1.OutputTuple, RoleGrantedEvent$1.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent$1.InputTuple, RoleRevokedEvent$1.OutputTuple, RoleRevokedEvent$1.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent$1.InputTuple, RoleRevokedEvent$1.OutputTuple, RoleRevokedEvent$1.OutputObject>;
        "SetDefaultMultiplierBps(uint16)": TypedContractEvent<SetDefaultMultiplierBpsEvent$1.InputTuple, SetDefaultMultiplierBpsEvent$1.OutputTuple, SetDefaultMultiplierBpsEvent$1.OutputObject>;
        SetDefaultMultiplierBps: TypedContractEvent<SetDefaultMultiplierBpsEvent$1.InputTuple, SetDefaultMultiplierBpsEvent$1.OutputTuple, SetDefaultMultiplierBpsEvent$1.OutputObject>;
        "SetPriceFeed(address)": TypedContractEvent<SetPriceFeedEvent$1.InputTuple, SetPriceFeedEvent$1.OutputTuple, SetPriceFeedEvent$1.OutputObject>;
        SetPriceFeed: TypedContractEvent<SetPriceFeedEvent$1.InputTuple, SetPriceFeedEvent$1.OutputTuple, SetPriceFeedEvent$1.OutputObject>;
        "SetSupportedOptionTypes(uint32,uint8[])": TypedContractEvent<SetSupportedOptionTypesEvent$1.InputTuple, SetSupportedOptionTypesEvent$1.OutputTuple, SetSupportedOptionTypesEvent$1.OutputObject>;
        SetSupportedOptionTypes: TypedContractEvent<SetSupportedOptionTypesEvent$1.InputTuple, SetSupportedOptionTypesEvent$1.OutputTuple, SetSupportedOptionTypesEvent$1.OutputObject>;
        "SetWorkerLib(address)": TypedContractEvent<SetWorkerLibEvent$1.InputTuple, SetWorkerLibEvent$1.OutputTuple, SetWorkerLibEvent$1.OutputObject>;
        SetWorkerLib: TypedContractEvent<SetWorkerLibEvent$1.InputTuple, SetWorkerLibEvent$1.OutputTuple, SetWorkerLibEvent$1.OutputObject>;
        "Unpaused(address)": TypedContractEvent<UnpausedEvent$1.InputTuple, UnpausedEvent$1.OutputTuple, UnpausedEvent$1.OutputObject>;
        Unpaused: TypedContractEvent<UnpausedEvent$1.InputTuple, UnpausedEvent$1.OutputTuple, UnpausedEvent$1.OutputObject>;
        "Withdraw(address,address,uint256)": TypedContractEvent<WithdrawEvent$1.InputTuple, WithdrawEvent$1.OutputTuple, WithdrawEvent$1.OutputObject>;
        Withdraw: TypedContractEvent<WithdrawEvent$1.InputTuple, WithdrawEvent$1.OutputTuple, WithdrawEvent$1.OutputObject>;
    };
}

declare namespace IExecutorFeeLib {
    type FeeParamsStruct = {
        priceFeed: AddressLike;
        dstEid: BigNumberish;
        sender: AddressLike;
        calldataSize: BigNumberish;
        defaultMultiplierBps: BigNumberish;
    };
    type FeeParamsStructOutput = [
        priceFeed: string,
        dstEid: bigint,
        sender: string,
        calldataSize: bigint,
        defaultMultiplierBps: bigint
    ] & {
        priceFeed: string;
        dstEid: bigint;
        sender: string;
        calldataSize: bigint;
        defaultMultiplierBps: bigint;
    };
}
declare namespace IExecutor {
    type DstConfigStruct = {
        baseGas: BigNumberish;
        multiplierBps: BigNumberish;
        floorMarginUSD: BigNumberish;
        nativeDropCap: BigNumberish;
    };
    type DstConfigStructOutput = [
        baseGas: bigint,
        multiplierBps: bigint,
        floorMarginUSD: bigint,
        nativeDropCap: bigint
    ] & {
        baseGas: bigint;
        multiplierBps: bigint;
        floorMarginUSD: bigint;
        nativeDropCap: bigint;
    };
}
interface ExecutorFeeLibInterface extends Interface {
    getFunction(nameOrSignature: "getFee" | "getFeeOnSend" | "owner" | "renounceOwnership" | "transferOwnership" | "withdrawToken"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        IExecutorFeeLib.FeeParamsStruct,
        IExecutor.DstConfigStruct,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IExecutorFeeLib.FeeParamsStruct,
        IExecutor.DstConfigStruct,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$h {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface ExecutorFeeLib extends BaseContract {
    connect(runner?: ContractRunner | null): ExecutorFeeLib;
    waitForDeployment(): Promise<this>;
    interface: ExecutorFeeLibInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFee: TypedContractMethod<[
        _params: IExecutorFeeLib.FeeParamsStruct,
        _dstConfig: IExecutor.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFeeOnSend: TypedContractMethod<[
        _params: IExecutorFeeLib.FeeParamsStruct,
        _dstConfig: IExecutor.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    withdrawToken: TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        _params: IExecutorFeeLib.FeeParamsStruct,
        _dstConfig: IExecutor.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getFeeOnSend"): TypedContractMethod<[
        _params: IExecutorFeeLib.FeeParamsStruct,
        _dstConfig: IExecutor.DstConfigStruct,
        _options: BytesLike
    ], [
        bigint
    ], "payable">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "withdrawToken"): TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$h.InputTuple, OwnershipTransferredEvent$h.OutputTuple, OwnershipTransferredEvent$h.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$h.InputTuple, OwnershipTransferredEvent$h.OutputTuple, OwnershipTransferredEvent$h.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$h.InputTuple, OwnershipTransferredEvent$h.OutputTuple, OwnershipTransferredEvent$h.OutputObject>;
    };
}

interface MessageLibBaseInterface extends Interface {
}
interface MessageLibBase extends BaseContract {
    connect(runner?: ContractRunner | null): MessageLibBase;
    waitForDeployment(): Promise<this>;
    interface: MessageLibBaseInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    filters: {};
}

declare namespace ILayerZeroPriceFeed {
    type ArbitrumPriceExtStruct = {
        gasPerL2Tx: BigNumberish;
        gasPerL1CallDataByte: BigNumberish;
    };
    type ArbitrumPriceExtStructOutput = [
        gasPerL2Tx: bigint,
        gasPerL1CallDataByte: bigint
    ] & {
        gasPerL2Tx: bigint;
        gasPerL1CallDataByte: bigint;
    };
    type PriceStruct = {
        priceRatio: BigNumberish;
        gasPriceInUnit: BigNumberish;
        gasPerByte: BigNumberish;
    };
    type PriceStructOutput = [
        priceRatio: bigint,
        gasPriceInUnit: bigint,
        gasPerByte: bigint
    ] & {
        priceRatio: bigint;
        gasPriceInUnit: bigint;
        gasPerByte: bigint;
    };
    type UpdatePriceStruct = {
        eid: BigNumberish;
        price: ILayerZeroPriceFeed.PriceStruct;
    };
    type UpdatePriceStructOutput = [
        eid: bigint,
        price: ILayerZeroPriceFeed.PriceStructOutput
    ] & {
        eid: bigint;
        price: ILayerZeroPriceFeed.PriceStructOutput;
    };
    type UpdatePriceExtStruct = {
        eid: BigNumberish;
        price: ILayerZeroPriceFeed.PriceStruct;
        extend: ILayerZeroPriceFeed.ArbitrumPriceExtStruct;
    };
    type UpdatePriceExtStructOutput = [
        eid: bigint,
        price: ILayerZeroPriceFeed.PriceStructOutput,
        extend: ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput
    ] & {
        eid: bigint;
        price: ILayerZeroPriceFeed.PriceStructOutput;
        extend: ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput;
    };
}
interface PriceFeedInterface extends Interface {
    getFunction(nameOrSignature: "ARBITRUM_COMPRESSION_PERCENT" | "arbitrumPriceExt" | "endpoint" | "estimateFeeByChain" | "estimateFeeByEid" | "estimateFeeOnSend" | "getFee" | "getPrice(uint32)" | "getPrice(uint16)" | "getPriceRatioDenominator" | "initialize" | "nativeTokenPriceUSD" | "owner" | "priceUpdater" | "renounceOwnership" | "setArbitrumCompressionPercent" | "setEndpoint" | "setNativeTokenPriceUSD" | "setPrice" | "setPriceForArbitrum" | "setPriceRatioDenominator" | "setPriceUpdater" | "transferOwnership" | "withdrawFee"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred"): EventFragment;
    encodeFunctionData(functionFragment: "ARBITRUM_COMPRESSION_PERCENT", values?: undefined): string;
    encodeFunctionData(functionFragment: "arbitrumPriceExt", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "estimateFeeByChain", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "estimateFeeByEid", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "estimateFeeOnSend", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getFee", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPrice(uint32)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPrice(uint16)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPriceRatioDenominator", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "nativeTokenPriceUSD", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceUpdater", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setArbitrumCompressionPercent", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setEndpoint", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setNativeTokenPriceUSD", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setPrice", values: [ILayerZeroPriceFeed.UpdatePriceStruct[]]): string;
    encodeFunctionData(functionFragment: "setPriceForArbitrum", values: [ILayerZeroPriceFeed.UpdatePriceExtStruct]): string;
    encodeFunctionData(functionFragment: "setPriceRatioDenominator", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setPriceUpdater", values: [AddressLike, boolean]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "ARBITRUM_COMPRESSION_PERCENT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "arbitrumPriceExt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeByChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeByEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrice(uint32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrice(uint16)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPriceRatioDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeTokenPriceUSD", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceUpdater", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setArbitrumCompressionPercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNativeTokenPriceUSD", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceForArbitrum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceRatioDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceUpdater", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
}
declare namespace InitializedEvent {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$g {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface PriceFeed extends BaseContract {
    connect(runner?: ContractRunner | null): PriceFeed;
    waitForDeployment(): Promise<this>;
    interface: PriceFeedInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    ARBITRUM_COMPRESSION_PERCENT: TypedContractMethod<[], [bigint], "view">;
    arbitrumPriceExt: TypedContractMethod<[
    ], [
        ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput
    ], "view">;
    endpoint: TypedContractMethod<[], [string], "view">;
    estimateFeeByChain: TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        [bigint, bigint] & {
            fee: bigint;
            priceRatio: bigint;
        }
    ], "view">;
    estimateFeeByEid: TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        [bigint, bigint, bigint, bigint]
    ], "view">;
    estimateFeeOnSend: TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        [bigint, bigint, bigint, bigint]
    ], "payable">;
    getFee: TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BigNumberish,
        arg2: BigNumberish
    ], [
        bigint
    ], "view">;
    "getPrice(uint32)": TypedContractMethod<[
        _dstEid: BigNumberish
    ], [
        ILayerZeroPriceFeed.PriceStructOutput
    ], "view">;
    "getPrice(uint16)": TypedContractMethod<[
        _dstEid: BigNumberish
    ], [
        ILayerZeroPriceFeed.PriceStructOutput
    ], "view">;
    getPriceRatioDenominator: TypedContractMethod<[], [bigint], "view">;
    initialize: TypedContractMethod<[
        _priceUpdater: AddressLike
    ], [
        void
    ], "nonpayable">;
    nativeTokenPriceUSD: TypedContractMethod<[], [bigint], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    priceUpdater: TypedContractMethod<[updater: AddressLike], [boolean], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setArbitrumCompressionPercent: TypedContractMethod<[
        _compressionPercent: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setEndpoint: TypedContractMethod<[
        _endpoint: AddressLike
    ], [
        void
    ], "nonpayable">;
    setNativeTokenPriceUSD: TypedContractMethod<[
        _nativeTokenPriceUSD: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setPrice: TypedContractMethod<[
        _price: ILayerZeroPriceFeed.UpdatePriceStruct[]
    ], [
        void
    ], "nonpayable">;
    setPriceForArbitrum: TypedContractMethod<[
        _update: ILayerZeroPriceFeed.UpdatePriceExtStruct
    ], [
        void
    ], "nonpayable">;
    setPriceRatioDenominator: TypedContractMethod<[
        _denominator: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setPriceUpdater: TypedContractMethod<[
        _addr: AddressLike,
        _active: boolean
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    withdrawFee: TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "ARBITRUM_COMPRESSION_PERCENT"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "arbitrumPriceExt"): TypedContractMethod<[
    ], [
        ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput
    ], "view">;
    getFunction(nameOrSignature: "endpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "estimateFeeByChain"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        [bigint, bigint] & {
            fee: bigint;
            priceRatio: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "estimateFeeByEid"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        [bigint, bigint, bigint, bigint]
    ], "view">;
    getFunction(nameOrSignature: "estimateFeeOnSend"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _callDataSize: BigNumberish,
        _gas: BigNumberish
    ], [
        [bigint, bigint, bigint, bigint]
    ], "payable">;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BigNumberish,
        arg2: BigNumberish
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getPrice(uint32)"): TypedContractMethod<[
        _dstEid: BigNumberish
    ], [
        ILayerZeroPriceFeed.PriceStructOutput
    ], "view">;
    getFunction(nameOrSignature: "getPrice(uint16)"): TypedContractMethod<[
        _dstEid: BigNumberish
    ], [
        ILayerZeroPriceFeed.PriceStructOutput
    ], "view">;
    getFunction(nameOrSignature: "getPriceRatioDenominator"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[_priceUpdater: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "nativeTokenPriceUSD"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "priceUpdater"): TypedContractMethod<[updater: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setArbitrumCompressionPercent"): TypedContractMethod<[
        _compressionPercent: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setEndpoint"): TypedContractMethod<[_endpoint: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setNativeTokenPriceUSD"): TypedContractMethod<[
        _nativeTokenPriceUSD: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPrice"): TypedContractMethod<[
        _price: ILayerZeroPriceFeed.UpdatePriceStruct[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPriceForArbitrum"): TypedContractMethod<[
        _update: ILayerZeroPriceFeed.UpdatePriceExtStruct
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPriceRatioDenominator"): TypedContractMethod<[_denominator: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPriceUpdater"): TypedContractMethod<[
        _addr: AddressLike,
        _active: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$g.InputTuple, OwnershipTransferredEvent$g.OutputTuple, OwnershipTransferredEvent$g.OutputObject>;
    filters: {
        "Initialized(uint8)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$g.InputTuple, OwnershipTransferredEvent$g.OutputTuple, OwnershipTransferredEvent$g.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$g.InputTuple, OwnershipTransferredEvent$g.OutputTuple, OwnershipTransferredEvent$g.OutputObject>;
    };
}

type SetConfigParamStruct$7 = {
    eid: BigNumberish;
    configType: BigNumberish;
    config: BytesLike;
};
interface ReceiveLibBaseE2Interface extends Interface {
    getFunction(nameOrSignature: "getConfig" | "isSupportedEid" | "messageLibType" | "setConfig" | "supportsInterface" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "getConfig", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "setConfig", values: [AddressLike, SetConfigParamStruct$7[]]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
interface ReceiveLibBaseE2 extends BaseContract {
    connect(runner?: ContractRunner | null): ReceiveLibBaseE2;
    waitForDeployment(): Promise<this>;
    interface: ReceiveLibBaseE2Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getConfig: TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    messageLibType: TypedContractMethod<[], [bigint], "view">;
    setConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _config: SetConfigParamStruct$7[]
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        _interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    version: TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "messageLibType"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _config: SetConfigParamStruct$7[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    filters: {};
}

type ExecutorConfigStruct$1 = {
    maxMessageSize: BigNumberish;
    executor: AddressLike;
};
type ExecutorConfigStructOutput$1 = [
    maxMessageSize: bigint,
    executor: string
] & {
    maxMessageSize: bigint;
    executor: string;
};
type SetDefaultExecutorConfigParamStruct$1 = {
    eid: BigNumberish;
    config: ExecutorConfigStruct$1;
};
type SetDefaultExecutorConfigParamStructOutput$1 = [
    eid: bigint,
    config: ExecutorConfigStructOutput$1
] & {
    eid: bigint;
    config: ExecutorConfigStructOutput$1;
};
interface SendLibBaseInterface extends Interface {
    getFunction(nameOrSignature: "executorConfigs" | "fees" | "getExecutorConfig" | "owner" | "renounceOwnership" | "setDefaultExecutorConfigs" | "transferOwnership" | "treasury"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultExecutorConfigsSet" | "ExecutorConfigSet" | "ExecutorFeePaid" | "OwnershipTransferred" | "TreasurySet"): EventFragment;
    encodeFunctionData(functionFragment: "executorConfigs", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "fees", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getExecutorConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultExecutorConfigs", values: [SetDefaultExecutorConfigParamStruct$1[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    decodeFunctionResult(functionFragment: "executorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExecutorConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultExecutorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}
declare namespace DefaultExecutorConfigsSetEvent$1 {
    type InputTuple = [params: SetDefaultExecutorConfigParamStruct$1[]];
    type OutputTuple = [
        params: SetDefaultExecutorConfigParamStructOutput$1[]
    ];
    interface OutputObject {
        params: SetDefaultExecutorConfigParamStructOutput$1[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ExecutorConfigSetEvent$1 {
    type InputTuple = [
        oapp: AddressLike,
        eid: BigNumberish,
        config: ExecutorConfigStruct$1
    ];
    type OutputTuple = [
        oapp: string,
        eid: bigint,
        config: ExecutorConfigStructOutput$1
    ];
    interface OutputObject {
        oapp: string;
        eid: bigint;
        config: ExecutorConfigStructOutput$1;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ExecutorFeePaidEvent$1 {
    type InputTuple = [executor: AddressLike, fee: BigNumberish];
    type OutputTuple = [executor: string, fee: bigint];
    interface OutputObject {
        executor: string;
        fee: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$f {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace TreasurySetEvent$1 {
    type InputTuple = [treasury: AddressLike];
    type OutputTuple = [treasury: string];
    interface OutputObject {
        treasury: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface SendLibBase extends BaseContract {
    connect(runner?: ContractRunner | null): SendLibBase;
    waitForDeployment(): Promise<this>;
    interface: SendLibBaseInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    executorConfigs: TypedContractMethod<[
        oapp: AddressLike,
        eid: BigNumberish
    ], [
        [bigint, string] & {
            maxMessageSize: bigint;
            executor: string;
        }
    ], "view">;
    fees: TypedContractMethod<[worker: AddressLike], [bigint], "view">;
    getExecutorConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        ExecutorConfigStructOutput$1
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setDefaultExecutorConfigs: TypedContractMethod<[
        _params: SetDefaultExecutorConfigParamStruct$1[]
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    treasury: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "executorConfigs"): TypedContractMethod<[
        oapp: AddressLike,
        eid: BigNumberish
    ], [
        [bigint, string] & {
            maxMessageSize: bigint;
            executor: string;
        }
    ], "view">;
    getFunction(nameOrSignature: "fees"): TypedContractMethod<[worker: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getExecutorConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        ExecutorConfigStructOutput$1
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultExecutorConfigs"): TypedContractMethod<[
        _params: SetDefaultExecutorConfigParamStruct$1[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "treasury"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "DefaultExecutorConfigsSet"): TypedContractEvent<DefaultExecutorConfigsSetEvent$1.InputTuple, DefaultExecutorConfigsSetEvent$1.OutputTuple, DefaultExecutorConfigsSetEvent$1.OutputObject>;
    getEvent(key: "ExecutorConfigSet"): TypedContractEvent<ExecutorConfigSetEvent$1.InputTuple, ExecutorConfigSetEvent$1.OutputTuple, ExecutorConfigSetEvent$1.OutputObject>;
    getEvent(key: "ExecutorFeePaid"): TypedContractEvent<ExecutorFeePaidEvent$1.InputTuple, ExecutorFeePaidEvent$1.OutputTuple, ExecutorFeePaidEvent$1.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$f.InputTuple, OwnershipTransferredEvent$f.OutputTuple, OwnershipTransferredEvent$f.OutputObject>;
    getEvent(key: "TreasurySet"): TypedContractEvent<TreasurySetEvent$1.InputTuple, TreasurySetEvent$1.OutputTuple, TreasurySetEvent$1.OutputObject>;
    filters: {
        "DefaultExecutorConfigsSet(tuple[])": TypedContractEvent<DefaultExecutorConfigsSetEvent$1.InputTuple, DefaultExecutorConfigsSetEvent$1.OutputTuple, DefaultExecutorConfigsSetEvent$1.OutputObject>;
        DefaultExecutorConfigsSet: TypedContractEvent<DefaultExecutorConfigsSetEvent$1.InputTuple, DefaultExecutorConfigsSetEvent$1.OutputTuple, DefaultExecutorConfigsSetEvent$1.OutputObject>;
        "ExecutorConfigSet(address,uint32,tuple)": TypedContractEvent<ExecutorConfigSetEvent$1.InputTuple, ExecutorConfigSetEvent$1.OutputTuple, ExecutorConfigSetEvent$1.OutputObject>;
        ExecutorConfigSet: TypedContractEvent<ExecutorConfigSetEvent$1.InputTuple, ExecutorConfigSetEvent$1.OutputTuple, ExecutorConfigSetEvent$1.OutputObject>;
        "ExecutorFeePaid(address,uint256)": TypedContractEvent<ExecutorFeePaidEvent$1.InputTuple, ExecutorFeePaidEvent$1.OutputTuple, ExecutorFeePaidEvent$1.OutputObject>;
        ExecutorFeePaid: TypedContractEvent<ExecutorFeePaidEvent$1.InputTuple, ExecutorFeePaidEvent$1.OutputTuple, ExecutorFeePaidEvent$1.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$f.InputTuple, OwnershipTransferredEvent$f.OutputTuple, OwnershipTransferredEvent$f.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$f.InputTuple, OwnershipTransferredEvent$f.OutputTuple, OwnershipTransferredEvent$f.OutputObject>;
        "TreasurySet(address)": TypedContractEvent<TreasurySetEvent$1.InputTuple, TreasurySetEvent$1.OutputTuple, TreasurySetEvent$1.OutputObject>;
        TreasurySet: TypedContractEvent<TreasurySetEvent$1.InputTuple, TreasurySetEvent$1.OutputTuple, TreasurySetEvent$1.OutputObject>;
    };
}

type ExecutorConfigStruct = {
    maxMessageSize: BigNumberish;
    executor: AddressLike;
};
type ExecutorConfigStructOutput = [
    maxMessageSize: bigint,
    executor: string
] & {
    maxMessageSize: bigint;
    executor: string;
};
type SetDefaultExecutorConfigParamStruct = {
    eid: BigNumberish;
    config: ExecutorConfigStruct;
};
type SetDefaultExecutorConfigParamStructOutput = [
    eid: bigint,
    config: ExecutorConfigStructOutput
] & {
    eid: bigint;
    config: ExecutorConfigStructOutput;
};
type PacketStruct$2 = {
    nonce: BigNumberish;
    srcEid: BigNumberish;
    sender: AddressLike;
    dstEid: BigNumberish;
    receiver: BytesLike;
    guid: BytesLike;
    message: BytesLike;
};
type MessagingFeeStructOutput$9 = [
    nativeFee: bigint,
    lzTokenFee: bigint
] & {
    nativeFee: bigint;
    lzTokenFee: bigint;
};
type SetConfigParamStruct$6 = {
    eid: BigNumberish;
    configType: BigNumberish;
    config: BytesLike;
};
interface SendLibBaseE2Interface extends Interface {
    getFunction(nameOrSignature: "executorConfigs" | "fees" | "getConfig" | "getExecutorConfig" | "isSupportedEid" | "messageLibType" | "owner" | "quote" | "renounceOwnership" | "send" | "setConfig" | "setDefaultExecutorConfigs" | "setTreasury" | "supportsInterface" | "transferOwnership" | "treasury" | "version" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultExecutorConfigsSet" | "ExecutorConfigSet" | "ExecutorFeePaid" | "LzTokenFeeWithdrawn" | "NativeFeeWithdrawn" | "OwnershipTransferred" | "TreasurySet"): EventFragment;
    encodeFunctionData(functionFragment: "executorConfigs", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "fees", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExecutorConfig", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [PacketStruct$2, BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [PacketStruct$2, BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [AddressLike, SetConfigParamStruct$6[]]): string;
    encodeFunctionData(functionFragment: "setDefaultExecutorConfigs", values: [SetDefaultExecutorConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "executorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExecutorConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultExecutorConfigs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
}
declare namespace DefaultExecutorConfigsSetEvent {
    type InputTuple = [params: SetDefaultExecutorConfigParamStruct[]];
    type OutputTuple = [
        params: SetDefaultExecutorConfigParamStructOutput[]
    ];
    interface OutputObject {
        params: SetDefaultExecutorConfigParamStructOutput[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ExecutorConfigSetEvent {
    type InputTuple = [
        oapp: AddressLike,
        eid: BigNumberish,
        config: ExecutorConfigStruct
    ];
    type OutputTuple = [
        oapp: string,
        eid: bigint,
        config: ExecutorConfigStructOutput
    ];
    interface OutputObject {
        oapp: string;
        eid: bigint;
        config: ExecutorConfigStructOutput;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ExecutorFeePaidEvent {
    type InputTuple = [executor: AddressLike, fee: BigNumberish];
    type OutputTuple = [executor: string, fee: bigint];
    interface OutputObject {
        executor: string;
        fee: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LzTokenFeeWithdrawnEvent {
    type InputTuple = [
        lzToken: AddressLike,
        receiver: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [lzToken: string, receiver: string, amount: bigint];
    interface OutputObject {
        lzToken: string;
        receiver: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace NativeFeeWithdrawnEvent {
    type InputTuple = [
        worker: AddressLike,
        receiver: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [worker: string, receiver: string, amount: bigint];
    interface OutputObject {
        worker: string;
        receiver: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$e {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace TreasurySetEvent {
    type InputTuple = [treasury: AddressLike];
    type OutputTuple = [treasury: string];
    interface OutputObject {
        treasury: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface SendLibBaseE2 extends BaseContract {
    connect(runner?: ContractRunner | null): SendLibBaseE2;
    waitForDeployment(): Promise<this>;
    interface: SendLibBaseE2Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    executorConfigs: TypedContractMethod<[
        oapp: AddressLike,
        eid: BigNumberish
    ], [
        [bigint, string] & {
            maxMessageSize: bigint;
            executor: string;
        }
    ], "view">;
    fees: TypedContractMethod<[worker: AddressLike], [bigint], "view">;
    getConfig: TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getExecutorConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        ExecutorConfigStructOutput
    ], "view">;
    isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    messageLibType: TypedContractMethod<[], [bigint], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    quote: TypedContractMethod<[
        _packet: PacketStruct$2,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        MessagingFeeStructOutput$9
    ], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    send: TypedContractMethod<[
        _packet: PacketStruct$2,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        [MessagingFeeStructOutput$9, string]
    ], "nonpayable">;
    setConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _config: SetConfigParamStruct$6[]
    ], [
        void
    ], "nonpayable">;
    setDefaultExecutorConfigs: TypedContractMethod<[
        _params: SetDefaultExecutorConfigParamStruct[]
    ], [
        void
    ], "nonpayable">;
    setTreasury: TypedContractMethod<[
        _treasury: AddressLike
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        _interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    treasury: TypedContractMethod<[], [string], "view">;
    version: TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    withdrawFee: TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawLzTokenFee: TypedContractMethod<[
        _lzToken: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "executorConfigs"): TypedContractMethod<[
        oapp: AddressLike,
        eid: BigNumberish
    ], [
        [bigint, string] & {
            maxMessageSize: bigint;
            executor: string;
        }
    ], "view">;
    getFunction(nameOrSignature: "fees"): TypedContractMethod<[worker: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "getExecutorConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _remoteEid: BigNumberish
    ], [
        ExecutorConfigStructOutput
    ], "view">;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "messageLibType"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quote"): TypedContractMethod<[
        _packet: PacketStruct$2,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        MessagingFeeStructOutput$9
    ], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "send"): TypedContractMethod<[
        _packet: PacketStruct$2,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        [MessagingFeeStructOutput$9, string]
    ], "nonpayable">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _config: SetConfigParamStruct$6[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultExecutorConfigs"): TypedContractMethod<[
        _params: SetDefaultExecutorConfigParamStruct[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setTreasury"): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "treasury"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawLzTokenFee"): TypedContractMethod<[
        _lzToken: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "DefaultExecutorConfigsSet"): TypedContractEvent<DefaultExecutorConfigsSetEvent.InputTuple, DefaultExecutorConfigsSetEvent.OutputTuple, DefaultExecutorConfigsSetEvent.OutputObject>;
    getEvent(key: "ExecutorConfigSet"): TypedContractEvent<ExecutorConfigSetEvent.InputTuple, ExecutorConfigSetEvent.OutputTuple, ExecutorConfigSetEvent.OutputObject>;
    getEvent(key: "ExecutorFeePaid"): TypedContractEvent<ExecutorFeePaidEvent.InputTuple, ExecutorFeePaidEvent.OutputTuple, ExecutorFeePaidEvent.OutputObject>;
    getEvent(key: "LzTokenFeeWithdrawn"): TypedContractEvent<LzTokenFeeWithdrawnEvent.InputTuple, LzTokenFeeWithdrawnEvent.OutputTuple, LzTokenFeeWithdrawnEvent.OutputObject>;
    getEvent(key: "NativeFeeWithdrawn"): TypedContractEvent<NativeFeeWithdrawnEvent.InputTuple, NativeFeeWithdrawnEvent.OutputTuple, NativeFeeWithdrawnEvent.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$e.InputTuple, OwnershipTransferredEvent$e.OutputTuple, OwnershipTransferredEvent$e.OutputObject>;
    getEvent(key: "TreasurySet"): TypedContractEvent<TreasurySetEvent.InputTuple, TreasurySetEvent.OutputTuple, TreasurySetEvent.OutputObject>;
    filters: {
        "DefaultExecutorConfigsSet(tuple[])": TypedContractEvent<DefaultExecutorConfigsSetEvent.InputTuple, DefaultExecutorConfigsSetEvent.OutputTuple, DefaultExecutorConfigsSetEvent.OutputObject>;
        DefaultExecutorConfigsSet: TypedContractEvent<DefaultExecutorConfigsSetEvent.InputTuple, DefaultExecutorConfigsSetEvent.OutputTuple, DefaultExecutorConfigsSetEvent.OutputObject>;
        "ExecutorConfigSet(address,uint32,tuple)": TypedContractEvent<ExecutorConfigSetEvent.InputTuple, ExecutorConfigSetEvent.OutputTuple, ExecutorConfigSetEvent.OutputObject>;
        ExecutorConfigSet: TypedContractEvent<ExecutorConfigSetEvent.InputTuple, ExecutorConfigSetEvent.OutputTuple, ExecutorConfigSetEvent.OutputObject>;
        "ExecutorFeePaid(address,uint256)": TypedContractEvent<ExecutorFeePaidEvent.InputTuple, ExecutorFeePaidEvent.OutputTuple, ExecutorFeePaidEvent.OutputObject>;
        ExecutorFeePaid: TypedContractEvent<ExecutorFeePaidEvent.InputTuple, ExecutorFeePaidEvent.OutputTuple, ExecutorFeePaidEvent.OutputObject>;
        "LzTokenFeeWithdrawn(address,address,uint256)": TypedContractEvent<LzTokenFeeWithdrawnEvent.InputTuple, LzTokenFeeWithdrawnEvent.OutputTuple, LzTokenFeeWithdrawnEvent.OutputObject>;
        LzTokenFeeWithdrawn: TypedContractEvent<LzTokenFeeWithdrawnEvent.InputTuple, LzTokenFeeWithdrawnEvent.OutputTuple, LzTokenFeeWithdrawnEvent.OutputObject>;
        "NativeFeeWithdrawn(address,address,uint256)": TypedContractEvent<NativeFeeWithdrawnEvent.InputTuple, NativeFeeWithdrawnEvent.OutputTuple, NativeFeeWithdrawnEvent.OutputObject>;
        NativeFeeWithdrawn: TypedContractEvent<NativeFeeWithdrawnEvent.InputTuple, NativeFeeWithdrawnEvent.OutputTuple, NativeFeeWithdrawnEvent.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$e.InputTuple, OwnershipTransferredEvent$e.OutputTuple, OwnershipTransferredEvent$e.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$e.InputTuple, OwnershipTransferredEvent$e.OutputTuple, OwnershipTransferredEvent$e.OutputObject>;
        "TreasurySet(address)": TypedContractEvent<TreasurySetEvent.InputTuple, TreasurySetEvent.OutputTuple, TreasurySetEvent.OutputObject>;
        TreasurySet: TypedContractEvent<TreasurySetEvent.InputTuple, TreasurySetEvent.OutputTuple, TreasurySetEvent.OutputObject>;
    };
}

interface TreasuryInterface extends Interface {
    getFunction(nameOrSignature: "getFee" | "lzTokenEnabled" | "lzTokenFee" | "nativeBP" | "owner" | "payFee" | "renounceOwnership" | "setLzTokenEnabled" | "setLzTokenFee" | "setNativeFeeBP" | "transferOwnership" | "withdrawLzToken" | "withdrawNativeFee" | "withdrawToken"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    encodeFunctionData(functionFragment: "getFee", values: [AddressLike, BigNumberish, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "lzTokenEnabled", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzTokenFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeBP", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "payFee", values: [AddressLike, BigNumberish, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setLzTokenEnabled", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setLzTokenFee", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setNativeFeeBP", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "withdrawLzToken", values: [AddressLike, AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawNativeFee", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzTokenEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzTokenFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeBP", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzTokenEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzTokenFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNativeFeeBP", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawNativeFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$d {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface Treasury extends BaseContract {
    connect(runner?: ContractRunner | null): Treasury;
    waitForDeployment(): Promise<this>;
    interface: TreasuryInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFee: TypedContractMethod<[
        arg0: AddressLike,
        arg1: BigNumberish,
        _totalFee: BigNumberish,
        _payInLzToken: boolean
    ], [
        bigint
    ], "view">;
    lzTokenEnabled: TypedContractMethod<[], [boolean], "view">;
    lzTokenFee: TypedContractMethod<[], [bigint], "view">;
    nativeBP: TypedContractMethod<[], [bigint], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    payFee: TypedContractMethod<[
        arg0: AddressLike,
        arg1: BigNumberish,
        _totalFee: BigNumberish,
        _payInLzToken: boolean
    ], [
        bigint
    ], "payable">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setLzTokenEnabled: TypedContractMethod<[
        _lzTokenEnabled: boolean
    ], [
        void
    ], "nonpayable">;
    setLzTokenFee: TypedContractMethod<[
        _lzTokenFee: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setNativeFeeBP: TypedContractMethod<[
        _nativeBP: BigNumberish
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    withdrawLzToken: TypedContractMethod<[
        _messageLib: AddressLike,
        _lzToken: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawNativeFee: TypedContractMethod<[
        _messageLib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawToken: TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getFee"): TypedContractMethod<[
        arg0: AddressLike,
        arg1: BigNumberish,
        _totalFee: BigNumberish,
        _payInLzToken: boolean
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "lzTokenEnabled"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "lzTokenFee"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "nativeBP"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "payFee"): TypedContractMethod<[
        arg0: AddressLike,
        arg1: BigNumberish,
        _totalFee: BigNumberish,
        _payInLzToken: boolean
    ], [
        bigint
    ], "payable">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setLzTokenEnabled"): TypedContractMethod<[_lzTokenEnabled: boolean], [void], "nonpayable">;
    getFunction(nameOrSignature: "setLzTokenFee"): TypedContractMethod<[_lzTokenFee: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setNativeFeeBP"): TypedContractMethod<[_nativeBP: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "withdrawLzToken"): TypedContractMethod<[
        _messageLib: AddressLike,
        _lzToken: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawNativeFee"): TypedContractMethod<[
        _messageLib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawToken"): TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$d.InputTuple, OwnershipTransferredEvent$d.OutputTuple, OwnershipTransferredEvent$d.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$d.InputTuple, OwnershipTransferredEvent$d.OutputTuple, OwnershipTransferredEvent$d.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$d.InputTuple, OwnershipTransferredEvent$d.OutputTuple, OwnershipTransferredEvent$d.OutputObject>;
    };
}

interface WorkerInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "defaultMultiplierBps" | "getRoleAdmin" | "getSupportedOptionTypes" | "grantRole" | "hasAcl" | "hasRole" | "paused" | "priceFeed" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setPaused" | "setPriceFeed" | "setSupportedOptionTypes" | "setWorkerFeeLib" | "supportsInterface" | "withdrawFee" | "withdrawToken" | "workerFeeLib"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Paused" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "SetDefaultMultiplierBps" | "SetPriceFeed" | "SetSupportedOptionTypes" | "SetWorkerLib" | "Unpaused" | "Withdraw"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getSupportedOptionTypes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasAcl", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setSupportedOptionTypes", values: [BigNumberish, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSupportedOptionTypes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
}
declare namespace PausedEvent {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleAdminChangedEvent {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleGrantedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace RoleRevokedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetDefaultMultiplierBpsEvent {
    type InputTuple = [multiplierBps: BigNumberish];
    type OutputTuple = [multiplierBps: bigint];
    interface OutputObject {
        multiplierBps: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPriceFeedEvent {
    type InputTuple = [priceFeed: AddressLike];
    type OutputTuple = [priceFeed: string];
    interface OutputObject {
        priceFeed: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetSupportedOptionTypesEvent {
    type InputTuple = [dstEid: BigNumberish, optionTypes: BigNumberish[]];
    type OutputTuple = [dstEid: bigint, optionTypes: bigint[]];
    interface OutputObject {
        dstEid: bigint;
        optionTypes: bigint[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetWorkerLibEvent {
    type InputTuple = [workerLib: AddressLike];
    type OutputTuple = [workerLib: string];
    interface OutputObject {
        workerLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace UnpausedEvent {
    type InputTuple = [account: AddressLike];
    type OutputTuple = [account: string];
    interface OutputObject {
        account: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent {
    type InputTuple = [
        lib: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [lib: string, to: string, amount: bigint];
    interface OutputObject {
        lib: string;
        to: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface Worker extends BaseContract {
    connect(runner?: ContractRunner | null): Worker;
    waitForDeployment(): Promise<this>;
    interface: WorkerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    allowlistSize: TypedContractMethod<[], [bigint], "view">;
    defaultMultiplierBps: TypedContractMethod<[], [bigint], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    getSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        bigint[]
    ], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasAcl: TypedContractMethod<[_sender: AddressLike], [boolean], "view">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    paused: TypedContractMethod<[], [boolean], "view">;
    priceFeed: TypedContractMethod<[], [string], "view">;
    renounceRole: TypedContractMethod<[
        arg0: BytesLike,
        arg1: AddressLike
    ], [
        void
    ], "view">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    setDefaultMultiplierBps: TypedContractMethod<[
        _multiplierBps: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
    setPriceFeed: TypedContractMethod<[
        _priceFeed: AddressLike
    ], [
        void
    ], "nonpayable">;
    setSupportedOptionTypes: TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    setWorkerFeeLib: TypedContractMethod<[
        _workerFeeLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    withdrawFee: TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawToken: TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    workerFeeLib: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "allowlistSize"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "defaultMultiplierBps"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "getSupportedOptionTypes"): TypedContractMethod<[_eid: BigNumberish], [bigint[]], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasAcl"): TypedContractMethod<[_sender: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "paused"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "priceFeed"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[arg0: BytesLike, arg1: AddressLike], [void], "view">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultMultiplierBps"): TypedContractMethod<[_multiplierBps: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPaused"): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPriceFeed"): TypedContractMethod<[_priceFeed: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setSupportedOptionTypes"): TypedContractMethod<[
        _eid: BigNumberish,
        _optionTypes: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setWorkerFeeLib"): TypedContractMethod<[_workerFeeLib: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _lib: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawToken"): TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "workerFeeLib"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "Paused"): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    getEvent(key: "SetDefaultMultiplierBps"): TypedContractEvent<SetDefaultMultiplierBpsEvent.InputTuple, SetDefaultMultiplierBpsEvent.OutputTuple, SetDefaultMultiplierBpsEvent.OutputObject>;
    getEvent(key: "SetPriceFeed"): TypedContractEvent<SetPriceFeedEvent.InputTuple, SetPriceFeedEvent.OutputTuple, SetPriceFeedEvent.OutputObject>;
    getEvent(key: "SetSupportedOptionTypes"): TypedContractEvent<SetSupportedOptionTypesEvent.InputTuple, SetSupportedOptionTypesEvent.OutputTuple, SetSupportedOptionTypesEvent.OutputObject>;
    getEvent(key: "SetWorkerLib"): TypedContractEvent<SetWorkerLibEvent.InputTuple, SetWorkerLibEvent.OutputTuple, SetWorkerLibEvent.OutputObject>;
    getEvent(key: "Unpaused"): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
    filters: {
        "Paused(address)": TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
        Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        "SetDefaultMultiplierBps(uint16)": TypedContractEvent<SetDefaultMultiplierBpsEvent.InputTuple, SetDefaultMultiplierBpsEvent.OutputTuple, SetDefaultMultiplierBpsEvent.OutputObject>;
        SetDefaultMultiplierBps: TypedContractEvent<SetDefaultMultiplierBpsEvent.InputTuple, SetDefaultMultiplierBpsEvent.OutputTuple, SetDefaultMultiplierBpsEvent.OutputObject>;
        "SetPriceFeed(address)": TypedContractEvent<SetPriceFeedEvent.InputTuple, SetPriceFeedEvent.OutputTuple, SetPriceFeedEvent.OutputObject>;
        SetPriceFeed: TypedContractEvent<SetPriceFeedEvent.InputTuple, SetPriceFeedEvent.OutputTuple, SetPriceFeedEvent.OutputObject>;
        "SetSupportedOptionTypes(uint32,uint8[])": TypedContractEvent<SetSupportedOptionTypesEvent.InputTuple, SetSupportedOptionTypesEvent.OutputTuple, SetSupportedOptionTypesEvent.OutputObject>;
        SetSupportedOptionTypes: TypedContractEvent<SetSupportedOptionTypesEvent.InputTuple, SetSupportedOptionTypesEvent.OutputTuple, SetSupportedOptionTypesEvent.OutputObject>;
        "SetWorkerLib(address)": TypedContractEvent<SetWorkerLibEvent.InputTuple, SetWorkerLibEvent.OutputTuple, SetWorkerLibEvent.OutputObject>;
        SetWorkerLib: TypedContractEvent<SetWorkerLibEvent.InputTuple, SetWorkerLibEvent.OutputTuple, SetWorkerLibEvent.OutputObject>;
        "Unpaused(address)": TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
        Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
        "Withdraw(address,address,uint256)": TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
        Withdraw: TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
    };
}

type index$17_Executor = Executor;
type index$17_ExecutorFeeLib = ExecutorFeeLib;
type index$17_MessageLibBase = MessageLibBase;
type index$17_PriceFeed = PriceFeed;
type index$17_ReceiveLibBaseE2 = ReceiveLibBaseE2;
type index$17_SendLibBase = SendLibBase;
type index$17_SendLibBaseE2 = SendLibBaseE2;
type index$17_Treasury = Treasury;
type index$17_Worker = Worker;
declare namespace index$17 {
  export {
    index$17_Executor as Executor,
    index$17_ExecutorFeeLib as ExecutorFeeLib,
    index$17_MessageLibBase as MessageLibBase,
    index$17_PriceFeed as PriceFeed,
    index$17_ReceiveLibBaseE2 as ReceiveLibBaseE2,
    index$17_SendLibBase as SendLibBase,
    index$17_SendLibBaseE2 as SendLibBaseE2,
    index$17_Treasury as Treasury,
    index$17_Worker as Worker,
    index$1f as interfaces,
    index$1a as uln,
    index$18 as upgradeable,
  };
}

declare namespace index$16 {
  export {
    index$17 as contracts,
  };
}

type EnforcedOptionParamStruct$6 = {
    eid: BigNumberish;
    msgType: BigNumberish;
    options: BytesLike;
};
type EnforcedOptionParamStructOutput$6 = [
    eid: bigint,
    msgType: bigint,
    options: string
] & {
    eid: bigint;
    msgType: bigint;
    options: string;
};
type OriginStruct$b = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
type InboundPacketStruct$2 = {
    origin: OriginStruct$b;
    dstEid: BigNumberish;
    receiver: AddressLike;
    guid: BytesLike;
    message: BytesLike;
};
interface OmniCounterInterface extends Interface {
    getFunction(nameOrSignature: "_simulateLzReceive" | "admin" | "batchIncrement" | "brokenIncrement" | "callEndpoint" | "combineOptions" | "composedCount" | "count" | "eid" | "endpoint" | "enforcedOptions" | "getTestArgs" | "inboundCount" | "increment" | "isPeer" | "lzCompose" | "lzReceive" | "lzReceiveAndRevert" | "nextNonce" | "oapp" | "outboundCount" | "owner" | "peers" | "precrime" | "quote" | "renounceOwnership" | "safeGetPeer" | "setAdmin" | "setEnforcedOptions" | "setOrderedNonce" | "setPeer" | "setPreCrime" | "skipInboundNonce" | "supportsInterface" | "transferOwnership" | "version" | "withdraw"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred" | "SetEnforcedOption" | "SetPeer" | "SetPreCrime"): EventFragment;
    encodeFunctionData(functionFragment: "_simulateLzReceive", values: [InboundPacketStruct$2[]]): string;
    encodeFunctionData(functionFragment: "admin", values?: undefined): string;
    encodeFunctionData(functionFragment: "batchIncrement", values: [BigNumberish[], BigNumberish[], BytesLike[]]): string;
    encodeFunctionData(functionFragment: "brokenIncrement", values: [BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "callEndpoint", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "combineOptions", values: [BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "composedCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "count", values?: undefined): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "enforcedOptions", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTestArgs", values?: undefined): string;
    encodeFunctionData(functionFragment: "inboundCount", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "increment", values: [BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "isPeer", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [AddressLike, BytesLike, BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [OriginStruct$b, BytesLike, BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [InboundPacketStruct$2[]]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "oapp", values?: undefined): string;
    encodeFunctionData(functionFragment: "outboundCount", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setAdmin", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct$6[]]): string;
    encodeFunctionData(functionFragment: "setOrderedNonce", values: [boolean]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "skipInboundNonce", values: [BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdraw", values: [AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "_simulateLzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "batchIncrement", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "brokenIncrement", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "callEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "composedCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTestArgs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oapp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOrderedNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skipInboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$c {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetEnforcedOptionEvent$6 {
    type InputTuple = [_enforcedOptions: EnforcedOptionParamStruct$6[]];
    type OutputTuple = [
        _enforcedOptions: EnforcedOptionParamStructOutput$6[]
    ];
    interface OutputObject {
        _enforcedOptions: EnforcedOptionParamStructOutput$6[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPeerEvent$6 {
    type InputTuple = [remoteEid: BigNumberish, peer: BytesLike];
    type OutputTuple = [remoteEid: bigint, peer: string];
    interface OutputObject {
        remoteEid: bigint;
        peer: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPreCrimeEvent$6 {
    type InputTuple = [precrime: AddressLike];
    type OutputTuple = [precrime: string];
    interface OutputObject {
        precrime: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface OmniCounter extends BaseContract {
    connect(runner?: ContractRunner | null): OmniCounter;
    waitForDeployment(): Promise<this>;
    interface: OmniCounterInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    _simulateLzReceive: TypedContractMethod<[
        _packets: InboundPacketStruct$2[]
    ], [
        void
    ], "payable">;
    admin: TypedContractMethod<[], [string], "view">;
    batchIncrement: TypedContractMethod<[
        _eids: BigNumberish[],
        _types: BigNumberish[],
        _options: BytesLike[]
    ], [
        void
    ], "payable">;
    brokenIncrement: TypedContractMethod<[
        _eid: BigNumberish,
        _type: BigNumberish,
        _options: BytesLike
    ], [
        void
    ], "payable">;
    callEndpoint: TypedContractMethod<[
        _callData: BytesLike
    ], [
        void
    ], "nonpayable">;
    combineOptions: TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    composedCount: TypedContractMethod<[], [bigint], "view">;
    count: TypedContractMethod<[], [bigint], "view">;
    eid: TypedContractMethod<[], [bigint], "view">;
    endpoint: TypedContractMethod<[], [string], "view">;
    enforcedOptions: TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    getTestArgs: TypedContractMethod<[], [string], "view">;
    inboundCount: TypedContractMethod<[srcEid: BigNumberish], [bigint], "view">;
    increment: TypedContractMethod<[
        _eid: BigNumberish,
        _type: BigNumberish,
        _options: BytesLike
    ], [
        void
    ], "payable">;
    isPeer: TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        boolean
    ], "view">;
    lzCompose: TypedContractMethod<[
        _oapp: AddressLike,
        arg1: BytesLike,
        _message: BytesLike,
        arg3: AddressLike,
        arg4: BytesLike
    ], [
        void
    ], "payable">;
    lzReceive: TypedContractMethod<[
        _origin: OriginStruct$b,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    lzReceiveAndRevert: TypedContractMethod<[
        _packets: InboundPacketStruct$2[]
    ], [
        void
    ], "payable">;
    nextNonce: TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    oapp: TypedContractMethod<[], [string], "view">;
    outboundCount: TypedContractMethod<[dstEid: BigNumberish], [bigint], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    peers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    precrime: TypedContractMethod<[], [string], "view">;
    quote: TypedContractMethod<[
        _eid: BigNumberish,
        _type: BigNumberish,
        _options: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    safeGetPeer: TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
    setEnforcedOptions: TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$6[]
    ], [
        void
    ], "nonpayable">;
    setOrderedNonce: TypedContractMethod<[
        _orderedNonce: boolean
    ], [
        void
    ], "nonpayable">;
    setPeer: TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    setPreCrime: TypedContractMethod<[
        _precrime: AddressLike
    ], [
        void
    ], "nonpayable">;
    skipInboundNonce: TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    version: TypedContractMethod<[], [bigint], "view">;
    withdraw: TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "_simulateLzReceive"): TypedContractMethod<[_packets: InboundPacketStruct$2[]], [void], "payable">;
    getFunction(nameOrSignature: "admin"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "batchIncrement"): TypedContractMethod<[
        _eids: BigNumberish[],
        _types: BigNumberish[],
        _options: BytesLike[]
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "brokenIncrement"): TypedContractMethod<[
        _eid: BigNumberish,
        _type: BigNumberish,
        _options: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "callEndpoint"): TypedContractMethod<[_callData: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "combineOptions"): TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "composedCount"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "count"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "eid"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "endpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "enforcedOptions"): TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "getTestArgs"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "inboundCount"): TypedContractMethod<[srcEid: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "increment"): TypedContractMethod<[
        _eid: BigNumberish,
        _type: BigNumberish,
        _options: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "isPeer"): TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "lzCompose"): TypedContractMethod<[
        _oapp: AddressLike,
        arg1: BytesLike,
        _message: BytesLike,
        arg3: AddressLike,
        arg4: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "lzReceive"): TypedContractMethod<[
        _origin: OriginStruct$b,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "lzReceiveAndRevert"): TypedContractMethod<[_packets: InboundPacketStruct$2[]], [void], "payable">;
    getFunction(nameOrSignature: "nextNonce"): TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "oapp"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "outboundCount"): TypedContractMethod<[dstEid: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "peers"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "precrime"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quote"): TypedContractMethod<[
        _eid: BigNumberish,
        _type: BigNumberish,
        _options: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "safeGetPeer"): TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "setAdmin"): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setEnforcedOptions"): TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$6[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setOrderedNonce"): TypedContractMethod<[_orderedNonce: boolean], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPeer"): TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPreCrime"): TypedContractMethod<[_precrime: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "skipInboundNonce"): TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$c.InputTuple, OwnershipTransferredEvent$c.OutputTuple, OwnershipTransferredEvent$c.OutputObject>;
    getEvent(key: "SetEnforcedOption"): TypedContractEvent<SetEnforcedOptionEvent$6.InputTuple, SetEnforcedOptionEvent$6.OutputTuple, SetEnforcedOptionEvent$6.OutputObject>;
    getEvent(key: "SetPeer"): TypedContractEvent<SetPeerEvent$6.InputTuple, SetPeerEvent$6.OutputTuple, SetPeerEvent$6.OutputObject>;
    getEvent(key: "SetPreCrime"): TypedContractEvent<SetPreCrimeEvent$6.InputTuple, SetPreCrimeEvent$6.OutputTuple, SetPreCrimeEvent$6.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$c.InputTuple, OwnershipTransferredEvent$c.OutputTuple, OwnershipTransferredEvent$c.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$c.InputTuple, OwnershipTransferredEvent$c.OutputTuple, OwnershipTransferredEvent$c.OutputObject>;
        "SetEnforcedOption(tuple[])": TypedContractEvent<SetEnforcedOptionEvent$6.InputTuple, SetEnforcedOptionEvent$6.OutputTuple, SetEnforcedOptionEvent$6.OutputObject>;
        SetEnforcedOption: TypedContractEvent<SetEnforcedOptionEvent$6.InputTuple, SetEnforcedOptionEvent$6.OutputTuple, SetEnforcedOptionEvent$6.OutputObject>;
        "SetPeer(uint32,bytes32)": TypedContractEvent<SetPeerEvent$6.InputTuple, SetPeerEvent$6.OutputTuple, SetPeerEvent$6.OutputObject>;
        SetPeer: TypedContractEvent<SetPeerEvent$6.InputTuple, SetPeerEvent$6.OutputTuple, SetPeerEvent$6.OutputObject>;
        "SetPreCrime(address)": TypedContractEvent<SetPreCrimeEvent$6.InputTuple, SetPreCrimeEvent$6.OutputTuple, SetPreCrimeEvent$6.OutputObject>;
        SetPreCrime: TypedContractEvent<SetPreCrimeEvent$6.InputTuple, SetPreCrimeEvent$6.OutputTuple, SetPreCrimeEvent$6.OutputObject>;
    };
}

type PreCrimePeerStruct$1 = {
    eid: BigNumberish;
    precrime: BytesLike;
    oapp: BytesLike;
};
type PreCrimePeerStructOutput$1 = [
    eid: bigint,
    precrime: string,
    oapp: string
] & {
    eid: bigint;
    precrime: string;
    oapp: string;
};
interface OmniCounterPreCrimeInterface extends Interface {
    getFunction(nameOrSignature: "buildSimulationResult" | "getConfig" | "getPreCrimePeers" | "maxBatchSize" | "oapp" | "owner" | "precrime" | "renounceOwnership" | "setMaxBatchSize" | "setPreCrimePeers" | "simulate" | "simulator" | "transferOwnership" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    encodeFunctionData(functionFragment: "buildSimulationResult", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "getPreCrimePeers", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxBatchSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "oapp", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "precrime", values: [BytesLike[], BytesLike[]]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setMaxBatchSize", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setPreCrimePeers", values: [PreCrimePeerStruct$1[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "simulator", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "buildSimulationResult", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPreCrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oapp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$b {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface OmniCounterPreCrime extends BaseContract {
    connect(runner?: ContractRunner | null): OmniCounterPreCrime;
    waitForDeployment(): Promise<this>;
    interface: OmniCounterPreCrimeInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    buildSimulationResult: TypedContractMethod<[], [string], "view">;
    getConfig: TypedContractMethod<[
        _packets: BytesLike[]
    ], [
        string
    ], "nonpayable">;
    getPreCrimePeers: TypedContractMethod<[
    ], [
        PreCrimePeerStructOutput$1[]
    ], "view">;
    maxBatchSize: TypedContractMethod<[], [bigint], "view">;
    oapp: TypedContractMethod<[], [string], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    precrime: TypedContractMethod<[
        _packets: BytesLike[],
        _simulations: BytesLike[]
    ], [
        void
    ], "nonpayable">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setMaxBatchSize: TypedContractMethod<[
        _maxBatchSize: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setPreCrimePeers: TypedContractMethod<[
        _precrimePeers: PreCrimePeerStruct$1[]
    ], [
        void
    ], "nonpayable">;
    simulate: TypedContractMethod<[_packets: BytesLike[]], [string], "payable">;
    simulator: TypedContractMethod<[], [string], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    version: TypedContractMethod<[
    ], [
        [bigint, bigint] & {
            major: bigint;
            minor: bigint;
        }
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "buildSimulationResult"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[_packets: BytesLike[]], [string], "nonpayable">;
    getFunction(nameOrSignature: "getPreCrimePeers"): TypedContractMethod<[], [PreCrimePeerStructOutput$1[]], "view">;
    getFunction(nameOrSignature: "maxBatchSize"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "oapp"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "precrime"): TypedContractMethod<[
        _packets: BytesLike[],
        _simulations: BytesLike[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setMaxBatchSize"): TypedContractMethod<[_maxBatchSize: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPreCrimePeers"): TypedContractMethod<[
        _precrimePeers: PreCrimePeerStruct$1[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "simulate"): TypedContractMethod<[_packets: BytesLike[]], [string], "payable">;
    getFunction(nameOrSignature: "simulator"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[
    ], [
        [bigint, bigint] & {
            major: bigint;
            minor: bigint;
        }
    ], "view">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$b.InputTuple, OwnershipTransferredEvent$b.OutputTuple, OwnershipTransferredEvent$b.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$b.InputTuple, OwnershipTransferredEvent$b.OutputTuple, OwnershipTransferredEvent$b.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$b.InputTuple, OwnershipTransferredEvent$b.OutputTuple, OwnershipTransferredEvent$b.OutputObject>;
    };
}

type index$15_OmniCounter = OmniCounter;
type index$15_OmniCounterPreCrime = OmniCounterPreCrime;
declare namespace index$15 {
  export {
    index$15_OmniCounter as OmniCounter,
    index$15_OmniCounterPreCrime as OmniCounterPreCrime,
  };
}

interface IInspectorInterface extends Interface {
    getFunction(nameOrSignature: "inspect"): FunctionFragment;
    encodeFunctionData(functionFragment: "inspect", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "inspect", data: BytesLike): Result;
}
interface IInspector extends BaseContract {
    connect(runner?: ContractRunner | null): IInspector;
    waitForDeployment(): Promise<this>;
    interface: IInspectorInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    inspect: TypedContractMethod<[
        _message: BytesLike,
        _options: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "inspect"): TypedContractMethod<[
        _message: BytesLike,
        _options: BytesLike
    ], [
        boolean
    ], "view">;
    filters: {};
}

type OriginStruct$a = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
interface IOAppInterface extends Interface {
    getFunction(nameOrSignature: "callEndpoint" | "lzReceive" | "nextNonce" | "peers" | "precrime" | "setPeer" | "setPreCrime" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "SetPeer" | "SetPreCrime"): EventFragment;
    encodeFunctionData(functionFragment: "callEndpoint", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [OriginStruct$a, BytesLike, BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "setPeer", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "callEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
declare namespace SetPeerEvent$5 {
    type InputTuple = [remoteEid: BigNumberish, peer: BytesLike];
    type OutputTuple = [remoteEid: bigint, peer: string];
    interface OutputObject {
        remoteEid: bigint;
        peer: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPreCrimeEvent$5 {
    type InputTuple = [precrime: AddressLike];
    type OutputTuple = [precrime: string];
    interface OutputObject {
        precrime: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface IOApp extends BaseContract {
    connect(runner?: ContractRunner | null): IOApp;
    waitForDeployment(): Promise<this>;
    interface: IOAppInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    callEndpoint: TypedContractMethod<[
        _callData: BytesLike
    ], [
        void
    ], "nonpayable">;
    lzReceive: TypedContractMethod<[
        _origin: OriginStruct$a,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    nextNonce: TypedContractMethod<[
        _eid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    peers: TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    precrime: TypedContractMethod<[], [string], "view">;
    setPeer: TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    setPreCrime: TypedContractMethod<[
        _precrime: AddressLike
    ], [
        void
    ], "nonpayable">;
    version: TypedContractMethod<[], [bigint], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "callEndpoint"): TypedContractMethod<[_callData: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "lzReceive"): TypedContractMethod<[
        _origin: OriginStruct$a,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "nextNonce"): TypedContractMethod<[
        _eid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "peers"): TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "precrime"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "setPeer"): TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPreCrime"): TypedContractMethod<[_precrime: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [bigint], "view">;
    getEvent(key: "SetPeer"): TypedContractEvent<SetPeerEvent$5.InputTuple, SetPeerEvent$5.OutputTuple, SetPeerEvent$5.OutputObject>;
    getEvent(key: "SetPreCrime"): TypedContractEvent<SetPreCrimeEvent$5.InputTuple, SetPreCrimeEvent$5.OutputTuple, SetPreCrimeEvent$5.OutputObject>;
    filters: {
        "SetPeer(uint32,bytes32)": TypedContractEvent<SetPeerEvent$5.InputTuple, SetPeerEvent$5.OutputTuple, SetPeerEvent$5.OutputObject>;
        SetPeer: TypedContractEvent<SetPeerEvent$5.InputTuple, SetPeerEvent$5.OutputTuple, SetPeerEvent$5.OutputObject>;
        "SetPreCrime(address)": TypedContractEvent<SetPreCrimeEvent$5.InputTuple, SetPreCrimeEvent$5.OutputTuple, SetPreCrimeEvent$5.OutputObject>;
        SetPreCrime: TypedContractEvent<SetPreCrimeEvent$5.InputTuple, SetPreCrimeEvent$5.OutputTuple, SetPreCrimeEvent$5.OutputObject>;
    };
}

type index$14_IInspector = IInspector;
type index$14_IOApp = IOApp;
declare namespace index$14 {
  export {
    index$14_IInspector as IInspector,
    index$14_IOApp as IOApp,
  };
}

interface OptionsBuilderInterface extends Interface {
}
interface OptionsBuilder extends BaseContract {
    connect(runner?: ContractRunner | null): OptionsBuilder;
    waitForDeployment(): Promise<this>;
    interface: OptionsBuilderInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    filters: {};
}

type index$13_OptionsBuilder = OptionsBuilder;
declare namespace index$13 {
  export {
    index$13_OptionsBuilder as OptionsBuilder,
  };
}

type MessagingFeeStructOutput$8 = [
    nativeFee: bigint,
    lzTokenFee: bigint
] & {
    nativeFee: bigint;
    lzTokenFee: bigint;
};
type MessagingReceiptStructOutput$6 = [
    guid: string,
    nonce: bigint,
    fee: MessagingFeeStructOutput$8
] & {
    guid: string;
    nonce: bigint;
    fee: MessagingFeeStructOutput$8;
};
interface IOFTInterface extends Interface {
    getFunction(nameOrSignature: "quoteSendFee" | "send" | "token"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveOFT" | "SendOFT" | "SetInspector"): EventFragment;
    encodeFunctionData(functionFragment: "quoteSendFee", values: [IOFT$4.SendParamStruct, BytesLike, boolean, BytesLike]): string;
    encodeFunctionData(functionFragment: "send", values: [IOFT$4.SendParamStruct, BytesLike, boolean, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    decodeFunctionResult(functionFragment: "quoteSendFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}
declare namespace ReceiveOFTEvent$4 {
    type InputTuple = [
        _guid: BytesLike,
        _toAddress: AddressLike,
        _amountLD: BigNumberish
    ];
    type OutputTuple = [
        _guid: string,
        _toAddress: string,
        _amountLD: bigint
    ];
    interface OutputObject {
        _guid: string;
        _toAddress: string;
        _amountLD: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SendOFTEvent$4 {
    type InputTuple = [
        _guid: BytesLike,
        _fromAddress: AddressLike,
        _amountLD: BigNumberish,
        _composeMsg: BytesLike
    ];
    type OutputTuple = [
        _guid: string,
        _fromAddress: string,
        _amountLD: bigint,
        _composeMsg: string
    ];
    interface OutputObject {
        _guid: string;
        _fromAddress: string;
        _amountLD: bigint;
        _composeMsg: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetInspectorEvent$4 {
    type InputTuple = [_inspector: AddressLike];
    type OutputTuple = [_inspector: string];
    interface OutputObject {
        _inspector: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace IOFT$4 {
    type SendParamStruct = {
        to: BytesLike;
        amountLD: BigNumberish;
        minAmountLD: BigNumberish;
        dstEid: BigNumberish;
    };
    type SendParamStructOutput = [
        to: string,
        amountLD: bigint,
        minAmountLD: bigint,
        dstEid: bigint
    ] & {
        to: string;
        amountLD: bigint;
        minAmountLD: bigint;
        dstEid: bigint;
    };
}
interface IOFT$4 extends BaseContract {
    connect(runner?: ContractRunner | null): IOFT$4;
    waitForDeployment(): Promise<this>;
    interface: IOFTInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    quoteSendFee: TypedContractMethod<[
        _send: IOFT$4.SendParamStruct,
        _options: BytesLike,
        _payInLzToken: boolean,
        _composeMsg: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    send: TypedContractMethod<[
        _send: IOFT$4.SendParamStruct,
        _options: BytesLike,
        _payInLzToken: boolean,
        _refundAddress: AddressLike,
        _composeMsg: BytesLike
    ], [
        MessagingReceiptStructOutput$6
    ], "payable">;
    token: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "quoteSendFee"): TypedContractMethod<[
        _send: IOFT$4.SendParamStruct,
        _options: BytesLike,
        _payInLzToken: boolean,
        _composeMsg: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "send"): TypedContractMethod<[
        _send: IOFT$4.SendParamStruct,
        _options: BytesLike,
        _payInLzToken: boolean,
        _refundAddress: AddressLike,
        _composeMsg: BytesLike
    ], [
        MessagingReceiptStructOutput$6
    ], "payable">;
    getFunction(nameOrSignature: "token"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "ReceiveOFT"): TypedContractEvent<ReceiveOFTEvent$4.InputTuple, ReceiveOFTEvent$4.OutputTuple, ReceiveOFTEvent$4.OutputObject>;
    getEvent(key: "SendOFT"): TypedContractEvent<SendOFTEvent$4.InputTuple, SendOFTEvent$4.OutputTuple, SendOFTEvent$4.OutputObject>;
    getEvent(key: "SetInspector"): TypedContractEvent<SetInspectorEvent$4.InputTuple, SetInspectorEvent$4.OutputTuple, SetInspectorEvent$4.OutputObject>;
    filters: {
        "ReceiveOFT(bytes32,address,uint256)": TypedContractEvent<ReceiveOFTEvent$4.InputTuple, ReceiveOFTEvent$4.OutputTuple, ReceiveOFTEvent$4.OutputObject>;
        ReceiveOFT: TypedContractEvent<ReceiveOFTEvent$4.InputTuple, ReceiveOFTEvent$4.OutputTuple, ReceiveOFTEvent$4.OutputObject>;
        "SendOFT(bytes32,address,uint256,bytes)": TypedContractEvent<SendOFTEvent$4.InputTuple, SendOFTEvent$4.OutputTuple, SendOFTEvent$4.OutputObject>;
        SendOFT: TypedContractEvent<SendOFTEvent$4.InputTuple, SendOFTEvent$4.OutputTuple, SendOFTEvent$4.OutputObject>;
        "SetInspector(address)": TypedContractEvent<SetInspectorEvent$4.InputTuple, SetInspectorEvent$4.OutputTuple, SetInspectorEvent$4.OutputObject>;
        SetInspector: TypedContractEvent<SetInspectorEvent$4.InputTuple, SetInspectorEvent$4.OutputTuple, SetInspectorEvent$4.OutputObject>;
    };
}

declare namespace index$12 {
  export {
    IOFT$4 as IOFT,
  };
}

type EnforcedOptionParamStruct$5 = {
    eid: BigNumberish;
    msgType: BigNumberish;
    options: BytesLike;
};
type EnforcedOptionParamStructOutput$5 = [
    eid: bigint,
    msgType: bigint,
    options: string
] & {
    eid: bigint;
    msgType: bigint;
    options: string;
};
type OriginStruct$9 = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
type MessagingFeeStructOutput$7 = [
    nativeFee: bigint,
    lzTokenFee: bigint
] & {
    nativeFee: bigint;
    lzTokenFee: bigint;
};
type MessagingReceiptStructOutput$5 = [
    guid: string,
    nonce: bigint,
    fee: MessagingFeeStructOutput$7
] & {
    guid: string;
    nonce: bigint;
    fee: MessagingFeeStructOutput$7;
};
declare namespace IOFT$3 {
    type SendParamStruct = {
        to: BytesLike;
        amountLD: BigNumberish;
        minAmountLD: BigNumberish;
        dstEid: BigNumberish;
    };
    type SendParamStructOutput = [
        to: string,
        amountLD: bigint,
        minAmountLD: bigint,
        dstEid: bigint
    ] & {
        to: string;
        amountLD: bigint;
        minAmountLD: bigint;
        dstEid: bigint;
    };
}
interface TestOFTInterface extends Interface {
    getFunction(nameOrSignature: "allowance" | "approve" | "balanceOf" | "callEndpoint" | "combineOptions" | "decimals" | "decreaseAllowance" | "endpoint" | "enforcedOptions" | "increaseAllowance" | "inspector" | "lzReceive" | "mint" | "name" | "nextNonce" | "owner" | "peers" | "precrime" | "quoteSendFee" | "renounceOwnership" | "safeGetPeer" | "send" | "setEnforcedOptions" | "setInspector" | "setPeer" | "setPreCrime" | "sharedDecimals" | "supportsInterface" | "symbol" | "token" | "totalSupply" | "transfer" | "transferFrom" | "transferOwnership" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "OwnershipTransferred" | "ReceiveOFT" | "SendOFT" | "SetEnforcedOption" | "SetInspector" | "SetPeer" | "SetPreCrime" | "Transfer"): EventFragment;
    encodeFunctionData(functionFragment: "allowance", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "callEndpoint", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "combineOptions", values: [BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "enforcedOptions", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "inspector", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [OriginStruct$9, BytesLike, BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "mint", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteSendFee", values: [IOFT$3.SendParamStruct, BytesLike, boolean, BytesLike]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "send", values: [IOFT$3.SendParamStruct, BytesLike, boolean, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct$5[]]): string;
    encodeFunctionData(functionFragment: "setInspector", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "callEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
declare namespace ApprovalEvent$1 {
    type InputTuple = [
        owner: AddressLike,
        spender: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [owner: string, spender: string, value: bigint];
    interface OutputObject {
        owner: string;
        spender: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$a {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveOFTEvent$3 {
    type InputTuple = [
        _guid: BytesLike,
        _toAddress: AddressLike,
        _amountLD: BigNumberish
    ];
    type OutputTuple = [
        _guid: string,
        _toAddress: string,
        _amountLD: bigint
    ];
    interface OutputObject {
        _guid: string;
        _toAddress: string;
        _amountLD: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SendOFTEvent$3 {
    type InputTuple = [
        _guid: BytesLike,
        _fromAddress: AddressLike,
        _amountLD: BigNumberish,
        _composeMsg: BytesLike
    ];
    type OutputTuple = [
        _guid: string,
        _fromAddress: string,
        _amountLD: bigint,
        _composeMsg: string
    ];
    interface OutputObject {
        _guid: string;
        _fromAddress: string;
        _amountLD: bigint;
        _composeMsg: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetEnforcedOptionEvent$5 {
    type InputTuple = [_enforcedOptions: EnforcedOptionParamStruct$5[]];
    type OutputTuple = [
        _enforcedOptions: EnforcedOptionParamStructOutput$5[]
    ];
    interface OutputObject {
        _enforcedOptions: EnforcedOptionParamStructOutput$5[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetInspectorEvent$3 {
    type InputTuple = [_inspector: AddressLike];
    type OutputTuple = [_inspector: string];
    interface OutputObject {
        _inspector: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPeerEvent$4 {
    type InputTuple = [remoteEid: BigNumberish, peer: BytesLike];
    type OutputTuple = [remoteEid: bigint, peer: string];
    interface OutputObject {
        remoteEid: bigint;
        peer: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPreCrimeEvent$4 {
    type InputTuple = [precrime: AddressLike];
    type OutputTuple = [precrime: string];
    interface OutputObject {
        precrime: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$1 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [from: string, to: string, value: bigint];
    interface OutputObject {
        from: string;
        to: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface TestOFT extends BaseContract {
    connect(runner?: ContractRunner | null): TestOFT;
    waitForDeployment(): Promise<this>;
    interface: TestOFTInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    allowance: TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    approve: TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;
    callEndpoint: TypedContractMethod<[
        _callData: BytesLike
    ], [
        void
    ], "nonpayable">;
    combineOptions: TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    decimals: TypedContractMethod<[], [bigint], "view">;
    decreaseAllowance: TypedContractMethod<[
        spender: AddressLike,
        subtractedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    endpoint: TypedContractMethod<[], [string], "view">;
    enforcedOptions: TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    increaseAllowance: TypedContractMethod<[
        spender: AddressLike,
        addedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    inspector: TypedContractMethod<[], [string], "view">;
    lzReceive: TypedContractMethod<[
        _origin: OriginStruct$9,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    mint: TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    name: TypedContractMethod<[], [string], "view">;
    nextNonce: TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BytesLike
    ], [
        bigint
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    peers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    precrime: TypedContractMethod<[], [string], "view">;
    quoteSendFee: TypedContractMethod<[
        _send: IOFT$3.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _composeMsg: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    safeGetPeer: TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    send: TypedContractMethod<[
        _send: IOFT$3.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _refundAddress: AddressLike,
        _composeMsg: BytesLike
    ], [
        MessagingReceiptStructOutput$5
    ], "payable">;
    setEnforcedOptions: TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$5[]
    ], [
        void
    ], "nonpayable">;
    setInspector: TypedContractMethod<[
        _inspector: AddressLike
    ], [
        void
    ], "nonpayable">;
    setPeer: TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    setPreCrime: TypedContractMethod<[
        _precrime: AddressLike
    ], [
        void
    ], "nonpayable">;
    sharedDecimals: TypedContractMethod<[], [bigint], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    symbol: TypedContractMethod<[], [string], "view">;
    token: TypedContractMethod<[], [string], "view">;
    totalSupply: TypedContractMethod<[], [bigint], "view">;
    transfer: TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    transferFrom: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    version: TypedContractMethod<[], [bigint], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "approve"): TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "callEndpoint"): TypedContractMethod<[_callData: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "combineOptions"): TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "decimals"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "decreaseAllowance"): TypedContractMethod<[
        spender: AddressLike,
        subtractedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "endpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "enforcedOptions"): TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "increaseAllowance"): TypedContractMethod<[
        spender: AddressLike,
        addedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "inspector"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "lzReceive"): TypedContractMethod<[
        _origin: OriginStruct$9,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "mint"): TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "name"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "nextNonce"): TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "peers"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "precrime"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quoteSendFee"): TypedContractMethod<[
        _send: IOFT$3.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _composeMsg: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "safeGetPeer"): TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "send"): TypedContractMethod<[
        _send: IOFT$3.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _refundAddress: AddressLike,
        _composeMsg: BytesLike
    ], [
        MessagingReceiptStructOutput$5
    ], "payable">;
    getFunction(nameOrSignature: "setEnforcedOptions"): TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$5[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setInspector"): TypedContractMethod<[_inspector: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPeer"): TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPreCrime"): TypedContractMethod<[_precrime: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "sharedDecimals"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "symbol"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "token"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [bigint], "view">;
    getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$1.InputTuple, ApprovalEvent$1.OutputTuple, ApprovalEvent$1.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$a.InputTuple, OwnershipTransferredEvent$a.OutputTuple, OwnershipTransferredEvent$a.OutputObject>;
    getEvent(key: "ReceiveOFT"): TypedContractEvent<ReceiveOFTEvent$3.InputTuple, ReceiveOFTEvent$3.OutputTuple, ReceiveOFTEvent$3.OutputObject>;
    getEvent(key: "SendOFT"): TypedContractEvent<SendOFTEvent$3.InputTuple, SendOFTEvent$3.OutputTuple, SendOFTEvent$3.OutputObject>;
    getEvent(key: "SetEnforcedOption"): TypedContractEvent<SetEnforcedOptionEvent$5.InputTuple, SetEnforcedOptionEvent$5.OutputTuple, SetEnforcedOptionEvent$5.OutputObject>;
    getEvent(key: "SetInspector"): TypedContractEvent<SetInspectorEvent$3.InputTuple, SetInspectorEvent$3.OutputTuple, SetInspectorEvent$3.OutputObject>;
    getEvent(key: "SetPeer"): TypedContractEvent<SetPeerEvent$4.InputTuple, SetPeerEvent$4.OutputTuple, SetPeerEvent$4.OutputObject>;
    getEvent(key: "SetPreCrime"): TypedContractEvent<SetPreCrimeEvent$4.InputTuple, SetPreCrimeEvent$4.OutputTuple, SetPreCrimeEvent$4.OutputObject>;
    getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$1.InputTuple, TransferEvent$1.OutputTuple, TransferEvent$1.OutputObject>;
    filters: {
        "Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$1.InputTuple, ApprovalEvent$1.OutputTuple, ApprovalEvent$1.OutputObject>;
        Approval: TypedContractEvent<ApprovalEvent$1.InputTuple, ApprovalEvent$1.OutputTuple, ApprovalEvent$1.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$a.InputTuple, OwnershipTransferredEvent$a.OutputTuple, OwnershipTransferredEvent$a.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$a.InputTuple, OwnershipTransferredEvent$a.OutputTuple, OwnershipTransferredEvent$a.OutputObject>;
        "ReceiveOFT(bytes32,address,uint256)": TypedContractEvent<ReceiveOFTEvent$3.InputTuple, ReceiveOFTEvent$3.OutputTuple, ReceiveOFTEvent$3.OutputObject>;
        ReceiveOFT: TypedContractEvent<ReceiveOFTEvent$3.InputTuple, ReceiveOFTEvent$3.OutputTuple, ReceiveOFTEvent$3.OutputObject>;
        "SendOFT(bytes32,address,uint256,bytes)": TypedContractEvent<SendOFTEvent$3.InputTuple, SendOFTEvent$3.OutputTuple, SendOFTEvent$3.OutputObject>;
        SendOFT: TypedContractEvent<SendOFTEvent$3.InputTuple, SendOFTEvent$3.OutputTuple, SendOFTEvent$3.OutputObject>;
        "SetEnforcedOption(tuple[])": TypedContractEvent<SetEnforcedOptionEvent$5.InputTuple, SetEnforcedOptionEvent$5.OutputTuple, SetEnforcedOptionEvent$5.OutputObject>;
        SetEnforcedOption: TypedContractEvent<SetEnforcedOptionEvent$5.InputTuple, SetEnforcedOptionEvent$5.OutputTuple, SetEnforcedOptionEvent$5.OutputObject>;
        "SetInspector(address)": TypedContractEvent<SetInspectorEvent$3.InputTuple, SetInspectorEvent$3.OutputTuple, SetInspectorEvent$3.OutputObject>;
        SetInspector: TypedContractEvent<SetInspectorEvent$3.InputTuple, SetInspectorEvent$3.OutputTuple, SetInspectorEvent$3.OutputObject>;
        "SetPeer(uint32,bytes32)": TypedContractEvent<SetPeerEvent$4.InputTuple, SetPeerEvent$4.OutputTuple, SetPeerEvent$4.OutputObject>;
        SetPeer: TypedContractEvent<SetPeerEvent$4.InputTuple, SetPeerEvent$4.OutputTuple, SetPeerEvent$4.OutputObject>;
        "SetPreCrime(address)": TypedContractEvent<SetPreCrimeEvent$4.InputTuple, SetPreCrimeEvent$4.OutputTuple, SetPreCrimeEvent$4.OutputObject>;
        SetPreCrime: TypedContractEvent<SetPreCrimeEvent$4.InputTuple, SetPreCrimeEvent$4.OutputTuple, SetPreCrimeEvent$4.OutputObject>;
        "Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$1.InputTuple, TransferEvent$1.OutputTuple, TransferEvent$1.OutputObject>;
        Transfer: TypedContractEvent<TransferEvent$1.InputTuple, TransferEvent$1.OutputTuple, TransferEvent$1.OutputObject>;
    };
}

type index$11_TestOFT = TestOFT;
declare namespace index$11 {
  export {
    index$11_TestOFT as TestOFT,
  };
}

interface FeeInterface extends Interface {
    getFunction(nameOrSignature: "BP_DENOMINATOR" | "defaultFeeBp" | "dstEidToFeeBps" | "feeOwner" | "owner" | "quoteOFTFee" | "renounceOwnership" | "setDefaultFeeBp" | "setFeeBp" | "setFeeOwner" | "transferOwnership"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred" | "SetDefaultFeeBp" | "SetFeeBp" | "SetFeeOwner" | "SetFeesEnabled"): EventFragment;
    encodeFunctionData(functionFragment: "BP_DENOMINATOR", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultFeeBp", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstEidToFeeBps", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "feeOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteOFTFee", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultFeeBp", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setFeeBp", values: [BigNumberish, boolean, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setFeeOwner", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "BP_DENOMINATOR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultFeeBp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstEidToFeeBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "feeOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteOFTFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultFeeBp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeeBp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeeOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$9 {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetDefaultFeeBpEvent {
    type InputTuple = [feeBp: BigNumberish];
    type OutputTuple = [feeBp: bigint];
    interface OutputObject {
        feeBp: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetFeeBpEvent {
    type InputTuple = [
        dstEid: BigNumberish,
        enabled: boolean,
        feeBp: BigNumberish
    ];
    type OutputTuple = [dstEid: bigint, enabled: boolean, feeBp: bigint];
    interface OutputObject {
        dstEid: bigint;
        enabled: boolean;
        feeBp: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetFeeOwnerEvent {
    type InputTuple = [feeOwner: AddressLike];
    type OutputTuple = [feeOwner: string];
    interface OutputObject {
        feeOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetFeesEnabledEvent {
    type InputTuple = [isEnabled: boolean];
    type OutputTuple = [isEnabled: boolean];
    interface OutputObject {
        isEnabled: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface Fee extends BaseContract {
    connect(runner?: ContractRunner | null): Fee;
    waitForDeployment(): Promise<this>;
    interface: FeeInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    BP_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;
    defaultFeeBp: TypedContractMethod<[], [bigint], "view">;
    dstEidToFeeBps: TypedContractMethod<[
        arg0: BigNumberish
    ], [
        [bigint, boolean] & {
            feeBP: bigint;
            enabled: boolean;
        }
    ], "view">;
    feeOwner: TypedContractMethod<[], [string], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    quoteOFTFee: TypedContractMethod<[
        _dstEid: BigNumberish,
        _amount: BigNumberish
    ], [
        bigint
    ], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setDefaultFeeBp: TypedContractMethod<[
        _feeBp: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setFeeBp: TypedContractMethod<[
        _dstEid: BigNumberish,
        _enabled: boolean,
        _feeBp: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setFeeOwner: TypedContractMethod<[
        _feeOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "BP_DENOMINATOR"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "defaultFeeBp"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "dstEidToFeeBps"): TypedContractMethod<[
        arg0: BigNumberish
    ], [
        [bigint, boolean] & {
            feeBP: bigint;
            enabled: boolean;
        }
    ], "view">;
    getFunction(nameOrSignature: "feeOwner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quoteOFTFee"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _amount: BigNumberish
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultFeeBp"): TypedContractMethod<[_feeBp: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setFeeBp"): TypedContractMethod<[
        _dstEid: BigNumberish,
        _enabled: boolean,
        _feeBp: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setFeeOwner"): TypedContractMethod<[_feeOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$9.InputTuple, OwnershipTransferredEvent$9.OutputTuple, OwnershipTransferredEvent$9.OutputObject>;
    getEvent(key: "SetDefaultFeeBp"): TypedContractEvent<SetDefaultFeeBpEvent.InputTuple, SetDefaultFeeBpEvent.OutputTuple, SetDefaultFeeBpEvent.OutputObject>;
    getEvent(key: "SetFeeBp"): TypedContractEvent<SetFeeBpEvent.InputTuple, SetFeeBpEvent.OutputTuple, SetFeeBpEvent.OutputObject>;
    getEvent(key: "SetFeeOwner"): TypedContractEvent<SetFeeOwnerEvent.InputTuple, SetFeeOwnerEvent.OutputTuple, SetFeeOwnerEvent.OutputObject>;
    getEvent(key: "SetFeesEnabled"): TypedContractEvent<SetFeesEnabledEvent.InputTuple, SetFeesEnabledEvent.OutputTuple, SetFeesEnabledEvent.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$9.InputTuple, OwnershipTransferredEvent$9.OutputTuple, OwnershipTransferredEvent$9.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$9.InputTuple, OwnershipTransferredEvent$9.OutputTuple, OwnershipTransferredEvent$9.OutputObject>;
        "SetDefaultFeeBp(uint16)": TypedContractEvent<SetDefaultFeeBpEvent.InputTuple, SetDefaultFeeBpEvent.OutputTuple, SetDefaultFeeBpEvent.OutputObject>;
        SetDefaultFeeBp: TypedContractEvent<SetDefaultFeeBpEvent.InputTuple, SetDefaultFeeBpEvent.OutputTuple, SetDefaultFeeBpEvent.OutputObject>;
        "SetFeeBp(uint32,bool,uint16)": TypedContractEvent<SetFeeBpEvent.InputTuple, SetFeeBpEvent.OutputTuple, SetFeeBpEvent.OutputObject>;
        SetFeeBp: TypedContractEvent<SetFeeBpEvent.InputTuple, SetFeeBpEvent.OutputTuple, SetFeeBpEvent.OutputObject>;
        "SetFeeOwner(address)": TypedContractEvent<SetFeeOwnerEvent.InputTuple, SetFeeOwnerEvent.OutputTuple, SetFeeOwnerEvent.OutputObject>;
        SetFeeOwner: TypedContractEvent<SetFeeOwnerEvent.InputTuple, SetFeeOwnerEvent.OutputTuple, SetFeeOwnerEvent.OutputObject>;
        "SetFeesEnabled(bool)": TypedContractEvent<SetFeesEnabledEvent.InputTuple, SetFeesEnabledEvent.OutputTuple, SetFeesEnabledEvent.OutputObject>;
        SetFeesEnabled: TypedContractEvent<SetFeesEnabledEvent.InputTuple, SetFeesEnabledEvent.OutputTuple, SetFeesEnabledEvent.OutputObject>;
    };
}

type EnforcedOptionParamStruct$4 = {
    eid: BigNumberish;
    msgType: BigNumberish;
    options: BytesLike;
};
type EnforcedOptionParamStructOutput$4 = [
    eid: bigint,
    msgType: bigint,
    options: string
] & {
    eid: bigint;
    msgType: bigint;
    options: string;
};
type OriginStruct$8 = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
type MessagingFeeStructOutput$6 = [
    nativeFee: bigint,
    lzTokenFee: bigint
] & {
    nativeFee: bigint;
    lzTokenFee: bigint;
};
type MessagingReceiptStructOutput$4 = [
    guid: string,
    nonce: bigint,
    fee: MessagingFeeStructOutput$6
] & {
    guid: string;
    nonce: bigint;
    fee: MessagingFeeStructOutput$6;
};
declare namespace IOFT$2 {
    type SendParamStruct = {
        to: BytesLike;
        amountLD: BigNumberish;
        minAmountLD: BigNumberish;
        dstEid: BigNumberish;
    };
    type SendParamStructOutput = [
        to: string,
        amountLD: bigint,
        minAmountLD: bigint,
        dstEid: bigint
    ] & {
        to: string;
        amountLD: bigint;
        minAmountLD: bigint;
        dstEid: bigint;
    };
}
interface OFTInterface extends Interface {
    getFunction(nameOrSignature: "allowance" | "approve" | "balanceOf" | "callEndpoint" | "combineOptions" | "decimals" | "decreaseAllowance" | "endpoint" | "enforcedOptions" | "increaseAllowance" | "inspector" | "lzReceive" | "name" | "nextNonce" | "owner" | "peers" | "precrime" | "quoteSendFee" | "renounceOwnership" | "safeGetPeer" | "send" | "setEnforcedOptions" | "setInspector" | "setPeer" | "setPreCrime" | "sharedDecimals" | "supportsInterface" | "symbol" | "token" | "totalSupply" | "transfer" | "transferFrom" | "transferOwnership" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "OwnershipTransferred" | "ReceiveOFT" | "SendOFT" | "SetEnforcedOption" | "SetInspector" | "SetPeer" | "SetPreCrime" | "Transfer"): EventFragment;
    encodeFunctionData(functionFragment: "allowance", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "callEndpoint", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "combineOptions", values: [BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "enforcedOptions", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "inspector", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [OriginStruct$8, BytesLike, BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteSendFee", values: [IOFT$2.SendParamStruct, BytesLike, boolean, BytesLike]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "send", values: [IOFT$2.SendParamStruct, BytesLike, boolean, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct$4[]]): string;
    encodeFunctionData(functionFragment: "setInspector", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "callEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
declare namespace ApprovalEvent {
    type InputTuple = [
        owner: AddressLike,
        spender: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [owner: string, spender: string, value: bigint];
    interface OutputObject {
        owner: string;
        spender: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$8 {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveOFTEvent$2 {
    type InputTuple = [
        _guid: BytesLike,
        _toAddress: AddressLike,
        _amountLD: BigNumberish
    ];
    type OutputTuple = [
        _guid: string,
        _toAddress: string,
        _amountLD: bigint
    ];
    interface OutputObject {
        _guid: string;
        _toAddress: string;
        _amountLD: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SendOFTEvent$2 {
    type InputTuple = [
        _guid: BytesLike,
        _fromAddress: AddressLike,
        _amountLD: BigNumberish,
        _composeMsg: BytesLike
    ];
    type OutputTuple = [
        _guid: string,
        _fromAddress: string,
        _amountLD: bigint,
        _composeMsg: string
    ];
    interface OutputObject {
        _guid: string;
        _fromAddress: string;
        _amountLD: bigint;
        _composeMsg: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetEnforcedOptionEvent$4 {
    type InputTuple = [_enforcedOptions: EnforcedOptionParamStruct$4[]];
    type OutputTuple = [
        _enforcedOptions: EnforcedOptionParamStructOutput$4[]
    ];
    interface OutputObject {
        _enforcedOptions: EnforcedOptionParamStructOutput$4[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetInspectorEvent$2 {
    type InputTuple = [_inspector: AddressLike];
    type OutputTuple = [_inspector: string];
    interface OutputObject {
        _inspector: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPeerEvent$3 {
    type InputTuple = [remoteEid: BigNumberish, peer: BytesLike];
    type OutputTuple = [remoteEid: bigint, peer: string];
    interface OutputObject {
        remoteEid: bigint;
        peer: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPreCrimeEvent$3 {
    type InputTuple = [precrime: AddressLike];
    type OutputTuple = [precrime: string];
    interface OutputObject {
        precrime: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [from: string, to: string, value: bigint];
    interface OutputObject {
        from: string;
        to: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface OFT extends BaseContract {
    connect(runner?: ContractRunner | null): OFT;
    waitForDeployment(): Promise<this>;
    interface: OFTInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    allowance: TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    approve: TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;
    callEndpoint: TypedContractMethod<[
        _callData: BytesLike
    ], [
        void
    ], "nonpayable">;
    combineOptions: TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    decimals: TypedContractMethod<[], [bigint], "view">;
    decreaseAllowance: TypedContractMethod<[
        spender: AddressLike,
        subtractedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    endpoint: TypedContractMethod<[], [string], "view">;
    enforcedOptions: TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    increaseAllowance: TypedContractMethod<[
        spender: AddressLike,
        addedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    inspector: TypedContractMethod<[], [string], "view">;
    lzReceive: TypedContractMethod<[
        _origin: OriginStruct$8,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    name: TypedContractMethod<[], [string], "view">;
    nextNonce: TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BytesLike
    ], [
        bigint
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    peers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    precrime: TypedContractMethod<[], [string], "view">;
    quoteSendFee: TypedContractMethod<[
        _send: IOFT$2.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _composeMsg: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    safeGetPeer: TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    send: TypedContractMethod<[
        _send: IOFT$2.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _refundAddress: AddressLike,
        _composeMsg: BytesLike
    ], [
        MessagingReceiptStructOutput$4
    ], "payable">;
    setEnforcedOptions: TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$4[]
    ], [
        void
    ], "nonpayable">;
    setInspector: TypedContractMethod<[
        _inspector: AddressLike
    ], [
        void
    ], "nonpayable">;
    setPeer: TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    setPreCrime: TypedContractMethod<[
        _precrime: AddressLike
    ], [
        void
    ], "nonpayable">;
    sharedDecimals: TypedContractMethod<[], [bigint], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    symbol: TypedContractMethod<[], [string], "view">;
    token: TypedContractMethod<[], [string], "view">;
    totalSupply: TypedContractMethod<[], [bigint], "view">;
    transfer: TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    transferFrom: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    version: TypedContractMethod<[], [bigint], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "approve"): TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "callEndpoint"): TypedContractMethod<[_callData: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "combineOptions"): TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "decimals"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "decreaseAllowance"): TypedContractMethod<[
        spender: AddressLike,
        subtractedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "endpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "enforcedOptions"): TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "increaseAllowance"): TypedContractMethod<[
        spender: AddressLike,
        addedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "inspector"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "lzReceive"): TypedContractMethod<[
        _origin: OriginStruct$8,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "name"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "nextNonce"): TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "peers"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "precrime"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quoteSendFee"): TypedContractMethod<[
        _send: IOFT$2.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _composeMsg: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "safeGetPeer"): TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "send"): TypedContractMethod<[
        _send: IOFT$2.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _refundAddress: AddressLike,
        _composeMsg: BytesLike
    ], [
        MessagingReceiptStructOutput$4
    ], "payable">;
    getFunction(nameOrSignature: "setEnforcedOptions"): TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$4[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setInspector"): TypedContractMethod<[_inspector: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPeer"): TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPreCrime"): TypedContractMethod<[_precrime: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "sharedDecimals"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "symbol"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "token"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [bigint], "view">;
    getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$8.InputTuple, OwnershipTransferredEvent$8.OutputTuple, OwnershipTransferredEvent$8.OutputObject>;
    getEvent(key: "ReceiveOFT"): TypedContractEvent<ReceiveOFTEvent$2.InputTuple, ReceiveOFTEvent$2.OutputTuple, ReceiveOFTEvent$2.OutputObject>;
    getEvent(key: "SendOFT"): TypedContractEvent<SendOFTEvent$2.InputTuple, SendOFTEvent$2.OutputTuple, SendOFTEvent$2.OutputObject>;
    getEvent(key: "SetEnforcedOption"): TypedContractEvent<SetEnforcedOptionEvent$4.InputTuple, SetEnforcedOptionEvent$4.OutputTuple, SetEnforcedOptionEvent$4.OutputObject>;
    getEvent(key: "SetInspector"): TypedContractEvent<SetInspectorEvent$2.InputTuple, SetInspectorEvent$2.OutputTuple, SetInspectorEvent$2.OutputObject>;
    getEvent(key: "SetPeer"): TypedContractEvent<SetPeerEvent$3.InputTuple, SetPeerEvent$3.OutputTuple, SetPeerEvent$3.OutputObject>;
    getEvent(key: "SetPreCrime"): TypedContractEvent<SetPreCrimeEvent$3.InputTuple, SetPreCrimeEvent$3.OutputTuple, SetPreCrimeEvent$3.OutputObject>;
    getEvent(key: "Transfer"): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    filters: {
        "Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
        Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$8.InputTuple, OwnershipTransferredEvent$8.OutputTuple, OwnershipTransferredEvent$8.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$8.InputTuple, OwnershipTransferredEvent$8.OutputTuple, OwnershipTransferredEvent$8.OutputObject>;
        "ReceiveOFT(bytes32,address,uint256)": TypedContractEvent<ReceiveOFTEvent$2.InputTuple, ReceiveOFTEvent$2.OutputTuple, ReceiveOFTEvent$2.OutputObject>;
        ReceiveOFT: TypedContractEvent<ReceiveOFTEvent$2.InputTuple, ReceiveOFTEvent$2.OutputTuple, ReceiveOFTEvent$2.OutputObject>;
        "SendOFT(bytes32,address,uint256,bytes)": TypedContractEvent<SendOFTEvent$2.InputTuple, SendOFTEvent$2.OutputTuple, SendOFTEvent$2.OutputObject>;
        SendOFT: TypedContractEvent<SendOFTEvent$2.InputTuple, SendOFTEvent$2.OutputTuple, SendOFTEvent$2.OutputObject>;
        "SetEnforcedOption(tuple[])": TypedContractEvent<SetEnforcedOptionEvent$4.InputTuple, SetEnforcedOptionEvent$4.OutputTuple, SetEnforcedOptionEvent$4.OutputObject>;
        SetEnforcedOption: TypedContractEvent<SetEnforcedOptionEvent$4.InputTuple, SetEnforcedOptionEvent$4.OutputTuple, SetEnforcedOptionEvent$4.OutputObject>;
        "SetInspector(address)": TypedContractEvent<SetInspectorEvent$2.InputTuple, SetInspectorEvent$2.OutputTuple, SetInspectorEvent$2.OutputObject>;
        SetInspector: TypedContractEvent<SetInspectorEvent$2.InputTuple, SetInspectorEvent$2.OutputTuple, SetInspectorEvent$2.OutputObject>;
        "SetPeer(uint32,bytes32)": TypedContractEvent<SetPeerEvent$3.InputTuple, SetPeerEvent$3.OutputTuple, SetPeerEvent$3.OutputObject>;
        SetPeer: TypedContractEvent<SetPeerEvent$3.InputTuple, SetPeerEvent$3.OutputTuple, SetPeerEvent$3.OutputObject>;
        "SetPreCrime(address)": TypedContractEvent<SetPreCrimeEvent$3.InputTuple, SetPreCrimeEvent$3.OutputTuple, SetPreCrimeEvent$3.OutputObject>;
        SetPreCrime: TypedContractEvent<SetPreCrimeEvent$3.InputTuple, SetPreCrimeEvent$3.OutputTuple, SetPreCrimeEvent$3.OutputObject>;
        "Transfer(address,address,uint256)": TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
        Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    };
}

type EnforcedOptionParamStruct$3 = {
    eid: BigNumberish;
    msgType: BigNumberish;
    options: BytesLike;
};
type EnforcedOptionParamStructOutput$3 = [
    eid: bigint,
    msgType: bigint,
    options: string
] & {
    eid: bigint;
    msgType: bigint;
    options: string;
};
type OriginStruct$7 = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
type MessagingFeeStructOutput$5 = [
    nativeFee: bigint,
    lzTokenFee: bigint
] & {
    nativeFee: bigint;
    lzTokenFee: bigint;
};
type MessagingReceiptStructOutput$3 = [
    guid: string,
    nonce: bigint,
    fee: MessagingFeeStructOutput$5
] & {
    guid: string;
    nonce: bigint;
    fee: MessagingFeeStructOutput$5;
};
declare namespace IOFT$1 {
    type SendParamStruct = {
        to: BytesLike;
        amountLD: BigNumberish;
        minAmountLD: BigNumberish;
        dstEid: BigNumberish;
    };
    type SendParamStructOutput = [
        to: string,
        amountLD: bigint,
        minAmountLD: bigint,
        dstEid: bigint
    ] & {
        to: string;
        amountLD: bigint;
        minAmountLD: bigint;
        dstEid: bigint;
    };
}
interface OFTAdapterInterface extends Interface {
    getFunction(nameOrSignature: "callEndpoint" | "combineOptions" | "endpoint" | "enforcedOptions" | "inspector" | "lzReceive" | "nextNonce" | "owner" | "peers" | "precrime" | "quoteSendFee" | "renounceOwnership" | "safeGetPeer" | "send" | "setEnforcedOptions" | "setInspector" | "setPeer" | "setPreCrime" | "sharedDecimals" | "supportsInterface" | "token" | "transferOwnership" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred" | "ReceiveOFT" | "SendOFT" | "SetEnforcedOption" | "SetInspector" | "SetPeer" | "SetPreCrime"): EventFragment;
    encodeFunctionData(functionFragment: "callEndpoint", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "combineOptions", values: [BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "enforcedOptions", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "inspector", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [OriginStruct$7, BytesLike, BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteSendFee", values: [IOFT$1.SendParamStruct, BytesLike, boolean, BytesLike]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "send", values: [IOFT$1.SendParamStruct, BytesLike, boolean, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct$3[]]): string;
    encodeFunctionData(functionFragment: "setInspector", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "callEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$7 {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveOFTEvent$1 {
    type InputTuple = [
        _guid: BytesLike,
        _toAddress: AddressLike,
        _amountLD: BigNumberish
    ];
    type OutputTuple = [
        _guid: string,
        _toAddress: string,
        _amountLD: bigint
    ];
    interface OutputObject {
        _guid: string;
        _toAddress: string;
        _amountLD: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SendOFTEvent$1 {
    type InputTuple = [
        _guid: BytesLike,
        _fromAddress: AddressLike,
        _amountLD: BigNumberish,
        _composeMsg: BytesLike
    ];
    type OutputTuple = [
        _guid: string,
        _fromAddress: string,
        _amountLD: bigint,
        _composeMsg: string
    ];
    interface OutputObject {
        _guid: string;
        _fromAddress: string;
        _amountLD: bigint;
        _composeMsg: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetEnforcedOptionEvent$3 {
    type InputTuple = [_enforcedOptions: EnforcedOptionParamStruct$3[]];
    type OutputTuple = [
        _enforcedOptions: EnforcedOptionParamStructOutput$3[]
    ];
    interface OutputObject {
        _enforcedOptions: EnforcedOptionParamStructOutput$3[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetInspectorEvent$1 {
    type InputTuple = [_inspector: AddressLike];
    type OutputTuple = [_inspector: string];
    interface OutputObject {
        _inspector: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPeerEvent$2 {
    type InputTuple = [remoteEid: BigNumberish, peer: BytesLike];
    type OutputTuple = [remoteEid: bigint, peer: string];
    interface OutputObject {
        remoteEid: bigint;
        peer: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPreCrimeEvent$2 {
    type InputTuple = [precrime: AddressLike];
    type OutputTuple = [precrime: string];
    interface OutputObject {
        precrime: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface OFTAdapter extends BaseContract {
    connect(runner?: ContractRunner | null): OFTAdapter;
    waitForDeployment(): Promise<this>;
    interface: OFTAdapterInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    callEndpoint: TypedContractMethod<[
        _callData: BytesLike
    ], [
        void
    ], "nonpayable">;
    combineOptions: TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    endpoint: TypedContractMethod<[], [string], "view">;
    enforcedOptions: TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    inspector: TypedContractMethod<[], [string], "view">;
    lzReceive: TypedContractMethod<[
        _origin: OriginStruct$7,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    nextNonce: TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BytesLike
    ], [
        bigint
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    peers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    precrime: TypedContractMethod<[], [string], "view">;
    quoteSendFee: TypedContractMethod<[
        _send: IOFT$1.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _composeMsg: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    safeGetPeer: TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    send: TypedContractMethod<[
        _send: IOFT$1.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _refundAddress: AddressLike,
        _composeMsg: BytesLike
    ], [
        MessagingReceiptStructOutput$3
    ], "payable">;
    setEnforcedOptions: TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$3[]
    ], [
        void
    ], "nonpayable">;
    setInspector: TypedContractMethod<[
        _inspector: AddressLike
    ], [
        void
    ], "nonpayable">;
    setPeer: TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    setPreCrime: TypedContractMethod<[
        _precrime: AddressLike
    ], [
        void
    ], "nonpayable">;
    sharedDecimals: TypedContractMethod<[], [bigint], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    token: TypedContractMethod<[], [string], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    version: TypedContractMethod<[], [bigint], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "callEndpoint"): TypedContractMethod<[_callData: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "combineOptions"): TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "endpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "enforcedOptions"): TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "inspector"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "lzReceive"): TypedContractMethod<[
        _origin: OriginStruct$7,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "nextNonce"): TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "peers"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "precrime"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quoteSendFee"): TypedContractMethod<[
        _send: IOFT$1.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _composeMsg: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "safeGetPeer"): TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "send"): TypedContractMethod<[
        _send: IOFT$1.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _refundAddress: AddressLike,
        _composeMsg: BytesLike
    ], [
        MessagingReceiptStructOutput$3
    ], "payable">;
    getFunction(nameOrSignature: "setEnforcedOptions"): TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$3[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setInspector"): TypedContractMethod<[_inspector: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPeer"): TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPreCrime"): TypedContractMethod<[_precrime: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "sharedDecimals"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "token"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [bigint], "view">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$7.InputTuple, OwnershipTransferredEvent$7.OutputTuple, OwnershipTransferredEvent$7.OutputObject>;
    getEvent(key: "ReceiveOFT"): TypedContractEvent<ReceiveOFTEvent$1.InputTuple, ReceiveOFTEvent$1.OutputTuple, ReceiveOFTEvent$1.OutputObject>;
    getEvent(key: "SendOFT"): TypedContractEvent<SendOFTEvent$1.InputTuple, SendOFTEvent$1.OutputTuple, SendOFTEvent$1.OutputObject>;
    getEvent(key: "SetEnforcedOption"): TypedContractEvent<SetEnforcedOptionEvent$3.InputTuple, SetEnforcedOptionEvent$3.OutputTuple, SetEnforcedOptionEvent$3.OutputObject>;
    getEvent(key: "SetInspector"): TypedContractEvent<SetInspectorEvent$1.InputTuple, SetInspectorEvent$1.OutputTuple, SetInspectorEvent$1.OutputObject>;
    getEvent(key: "SetPeer"): TypedContractEvent<SetPeerEvent$2.InputTuple, SetPeerEvent$2.OutputTuple, SetPeerEvent$2.OutputObject>;
    getEvent(key: "SetPreCrime"): TypedContractEvent<SetPreCrimeEvent$2.InputTuple, SetPreCrimeEvent$2.OutputTuple, SetPreCrimeEvent$2.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$7.InputTuple, OwnershipTransferredEvent$7.OutputTuple, OwnershipTransferredEvent$7.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$7.InputTuple, OwnershipTransferredEvent$7.OutputTuple, OwnershipTransferredEvent$7.OutputObject>;
        "ReceiveOFT(bytes32,address,uint256)": TypedContractEvent<ReceiveOFTEvent$1.InputTuple, ReceiveOFTEvent$1.OutputTuple, ReceiveOFTEvent$1.OutputObject>;
        ReceiveOFT: TypedContractEvent<ReceiveOFTEvent$1.InputTuple, ReceiveOFTEvent$1.OutputTuple, ReceiveOFTEvent$1.OutputObject>;
        "SendOFT(bytes32,address,uint256,bytes)": TypedContractEvent<SendOFTEvent$1.InputTuple, SendOFTEvent$1.OutputTuple, SendOFTEvent$1.OutputObject>;
        SendOFT: TypedContractEvent<SendOFTEvent$1.InputTuple, SendOFTEvent$1.OutputTuple, SendOFTEvent$1.OutputObject>;
        "SetEnforcedOption(tuple[])": TypedContractEvent<SetEnforcedOptionEvent$3.InputTuple, SetEnforcedOptionEvent$3.OutputTuple, SetEnforcedOptionEvent$3.OutputObject>;
        SetEnforcedOption: TypedContractEvent<SetEnforcedOptionEvent$3.InputTuple, SetEnforcedOptionEvent$3.OutputTuple, SetEnforcedOptionEvent$3.OutputObject>;
        "SetInspector(address)": TypedContractEvent<SetInspectorEvent$1.InputTuple, SetInspectorEvent$1.OutputTuple, SetInspectorEvent$1.OutputObject>;
        SetInspector: TypedContractEvent<SetInspectorEvent$1.InputTuple, SetInspectorEvent$1.OutputTuple, SetInspectorEvent$1.OutputObject>;
        "SetPeer(uint32,bytes32)": TypedContractEvent<SetPeerEvent$2.InputTuple, SetPeerEvent$2.OutputTuple, SetPeerEvent$2.OutputObject>;
        SetPeer: TypedContractEvent<SetPeerEvent$2.InputTuple, SetPeerEvent$2.OutputTuple, SetPeerEvent$2.OutputObject>;
        "SetPreCrime(address)": TypedContractEvent<SetPreCrimeEvent$2.InputTuple, SetPreCrimeEvent$2.OutputTuple, SetPreCrimeEvent$2.OutputObject>;
        SetPreCrime: TypedContractEvent<SetPreCrimeEvent$2.InputTuple, SetPreCrimeEvent$2.OutputTuple, SetPreCrimeEvent$2.OutputObject>;
    };
}

type EnforcedOptionParamStruct$2 = {
    eid: BigNumberish;
    msgType: BigNumberish;
    options: BytesLike;
};
type EnforcedOptionParamStructOutput$2 = [
    eid: bigint,
    msgType: bigint,
    options: string
] & {
    eid: bigint;
    msgType: bigint;
    options: string;
};
type OriginStruct$6 = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
type MessagingFeeStructOutput$4 = [
    nativeFee: bigint,
    lzTokenFee: bigint
] & {
    nativeFee: bigint;
    lzTokenFee: bigint;
};
type MessagingReceiptStructOutput$2 = [
    guid: string,
    nonce: bigint,
    fee: MessagingFeeStructOutput$4
] & {
    guid: string;
    nonce: bigint;
    fee: MessagingFeeStructOutput$4;
};
declare namespace IOFT {
    type SendParamStruct = {
        to: BytesLike;
        amountLD: BigNumberish;
        minAmountLD: BigNumberish;
        dstEid: BigNumberish;
    };
    type SendParamStructOutput = [
        to: string,
        amountLD: bigint,
        minAmountLD: bigint,
        dstEid: bigint
    ] & {
        to: string;
        amountLD: bigint;
        minAmountLD: bigint;
        dstEid: bigint;
    };
}
interface OFTCoreInterface extends Interface {
    getFunction(nameOrSignature: "callEndpoint" | "combineOptions" | "endpoint" | "enforcedOptions" | "inspector" | "lzReceive" | "nextNonce" | "owner" | "peers" | "precrime" | "quoteSendFee" | "renounceOwnership" | "safeGetPeer" | "send" | "setEnforcedOptions" | "setInspector" | "setPeer" | "setPreCrime" | "sharedDecimals" | "supportsInterface" | "token" | "transferOwnership" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred" | "ReceiveOFT" | "SendOFT" | "SetEnforcedOption" | "SetInspector" | "SetPeer" | "SetPreCrime"): EventFragment;
    encodeFunctionData(functionFragment: "callEndpoint", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "combineOptions", values: [BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "enforcedOptions", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "inspector", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [OriginStruct$6, BytesLike, BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteSendFee", values: [IOFT.SendParamStruct, BytesLike, boolean, BytesLike]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "send", values: [IOFT.SendParamStruct, BytesLike, boolean, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct$2[]]): string;
    encodeFunctionData(functionFragment: "setInspector", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "callEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$6 {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveOFTEvent {
    type InputTuple = [
        _guid: BytesLike,
        _toAddress: AddressLike,
        _amountLD: BigNumberish
    ];
    type OutputTuple = [
        _guid: string,
        _toAddress: string,
        _amountLD: bigint
    ];
    interface OutputObject {
        _guid: string;
        _toAddress: string;
        _amountLD: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SendOFTEvent {
    type InputTuple = [
        _guid: BytesLike,
        _fromAddress: AddressLike,
        _amountLD: BigNumberish,
        _composeMsg: BytesLike
    ];
    type OutputTuple = [
        _guid: string,
        _fromAddress: string,
        _amountLD: bigint,
        _composeMsg: string
    ];
    interface OutputObject {
        _guid: string;
        _fromAddress: string;
        _amountLD: bigint;
        _composeMsg: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetEnforcedOptionEvent$2 {
    type InputTuple = [_enforcedOptions: EnforcedOptionParamStruct$2[]];
    type OutputTuple = [
        _enforcedOptions: EnforcedOptionParamStructOutput$2[]
    ];
    interface OutputObject {
        _enforcedOptions: EnforcedOptionParamStructOutput$2[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetInspectorEvent {
    type InputTuple = [_inspector: AddressLike];
    type OutputTuple = [_inspector: string];
    interface OutputObject {
        _inspector: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPeerEvent$1 {
    type InputTuple = [remoteEid: BigNumberish, peer: BytesLike];
    type OutputTuple = [remoteEid: bigint, peer: string];
    interface OutputObject {
        remoteEid: bigint;
        peer: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPreCrimeEvent$1 {
    type InputTuple = [precrime: AddressLike];
    type OutputTuple = [precrime: string];
    interface OutputObject {
        precrime: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface OFTCore extends BaseContract {
    connect(runner?: ContractRunner | null): OFTCore;
    waitForDeployment(): Promise<this>;
    interface: OFTCoreInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    callEndpoint: TypedContractMethod<[
        _callData: BytesLike
    ], [
        void
    ], "nonpayable">;
    combineOptions: TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    endpoint: TypedContractMethod<[], [string], "view">;
    enforcedOptions: TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    inspector: TypedContractMethod<[], [string], "view">;
    lzReceive: TypedContractMethod<[
        _origin: OriginStruct$6,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    nextNonce: TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BytesLike
    ], [
        bigint
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    peers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    precrime: TypedContractMethod<[], [string], "view">;
    quoteSendFee: TypedContractMethod<[
        _send: IOFT.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _composeMsg: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    safeGetPeer: TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    send: TypedContractMethod<[
        _send: IOFT.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _refundAddress: AddressLike,
        _composeMsg: BytesLike
    ], [
        MessagingReceiptStructOutput$2
    ], "payable">;
    setEnforcedOptions: TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$2[]
    ], [
        void
    ], "nonpayable">;
    setInspector: TypedContractMethod<[
        _inspector: AddressLike
    ], [
        void
    ], "nonpayable">;
    setPeer: TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    setPreCrime: TypedContractMethod<[
        _precrime: AddressLike
    ], [
        void
    ], "nonpayable">;
    sharedDecimals: TypedContractMethod<[], [bigint], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    token: TypedContractMethod<[], [string], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    version: TypedContractMethod<[], [bigint], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "callEndpoint"): TypedContractMethod<[_callData: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "combineOptions"): TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "endpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "enforcedOptions"): TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "inspector"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "lzReceive"): TypedContractMethod<[
        _origin: OriginStruct$6,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "nextNonce"): TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "peers"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "precrime"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quoteSendFee"): TypedContractMethod<[
        _send: IOFT.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _composeMsg: BytesLike
    ], [
        [bigint, bigint] & {
            nativeFee: bigint;
            lzTokenFee: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "safeGetPeer"): TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "send"): TypedContractMethod<[
        _send: IOFT.SendParamStruct,
        _extraOptions: BytesLike,
        _payInLzToken: boolean,
        _refundAddress: AddressLike,
        _composeMsg: BytesLike
    ], [
        MessagingReceiptStructOutput$2
    ], "payable">;
    getFunction(nameOrSignature: "setEnforcedOptions"): TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$2[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setInspector"): TypedContractMethod<[_inspector: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPeer"): TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPreCrime"): TypedContractMethod<[_precrime: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "sharedDecimals"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "token"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [bigint], "view">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$6.InputTuple, OwnershipTransferredEvent$6.OutputTuple, OwnershipTransferredEvent$6.OutputObject>;
    getEvent(key: "ReceiveOFT"): TypedContractEvent<ReceiveOFTEvent.InputTuple, ReceiveOFTEvent.OutputTuple, ReceiveOFTEvent.OutputObject>;
    getEvent(key: "SendOFT"): TypedContractEvent<SendOFTEvent.InputTuple, SendOFTEvent.OutputTuple, SendOFTEvent.OutputObject>;
    getEvent(key: "SetEnforcedOption"): TypedContractEvent<SetEnforcedOptionEvent$2.InputTuple, SetEnforcedOptionEvent$2.OutputTuple, SetEnforcedOptionEvent$2.OutputObject>;
    getEvent(key: "SetInspector"): TypedContractEvent<SetInspectorEvent.InputTuple, SetInspectorEvent.OutputTuple, SetInspectorEvent.OutputObject>;
    getEvent(key: "SetPeer"): TypedContractEvent<SetPeerEvent$1.InputTuple, SetPeerEvent$1.OutputTuple, SetPeerEvent$1.OutputObject>;
    getEvent(key: "SetPreCrime"): TypedContractEvent<SetPreCrimeEvent$1.InputTuple, SetPreCrimeEvent$1.OutputTuple, SetPreCrimeEvent$1.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$6.InputTuple, OwnershipTransferredEvent$6.OutputTuple, OwnershipTransferredEvent$6.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$6.InputTuple, OwnershipTransferredEvent$6.OutputTuple, OwnershipTransferredEvent$6.OutputObject>;
        "ReceiveOFT(bytes32,address,uint256)": TypedContractEvent<ReceiveOFTEvent.InputTuple, ReceiveOFTEvent.OutputTuple, ReceiveOFTEvent.OutputObject>;
        ReceiveOFT: TypedContractEvent<ReceiveOFTEvent.InputTuple, ReceiveOFTEvent.OutputTuple, ReceiveOFTEvent.OutputObject>;
        "SendOFT(bytes32,address,uint256,bytes)": TypedContractEvent<SendOFTEvent.InputTuple, SendOFTEvent.OutputTuple, SendOFTEvent.OutputObject>;
        SendOFT: TypedContractEvent<SendOFTEvent.InputTuple, SendOFTEvent.OutputTuple, SendOFTEvent.OutputObject>;
        "SetEnforcedOption(tuple[])": TypedContractEvent<SetEnforcedOptionEvent$2.InputTuple, SetEnforcedOptionEvent$2.OutputTuple, SetEnforcedOptionEvent$2.OutputObject>;
        SetEnforcedOption: TypedContractEvent<SetEnforcedOptionEvent$2.InputTuple, SetEnforcedOptionEvent$2.OutputTuple, SetEnforcedOptionEvent$2.OutputObject>;
        "SetInspector(address)": TypedContractEvent<SetInspectorEvent.InputTuple, SetInspectorEvent.OutputTuple, SetInspectorEvent.OutputObject>;
        SetInspector: TypedContractEvent<SetInspectorEvent.InputTuple, SetInspectorEvent.OutputTuple, SetInspectorEvent.OutputObject>;
        "SetPeer(uint32,bytes32)": TypedContractEvent<SetPeerEvent$1.InputTuple, SetPeerEvent$1.OutputTuple, SetPeerEvent$1.OutputObject>;
        SetPeer: TypedContractEvent<SetPeerEvent$1.InputTuple, SetPeerEvent$1.OutputTuple, SetPeerEvent$1.OutputObject>;
        "SetPreCrime(address)": TypedContractEvent<SetPreCrimeEvent$1.InputTuple, SetPreCrimeEvent$1.OutputTuple, SetPreCrimeEvent$1.OutputObject>;
        SetPreCrime: TypedContractEvent<SetPreCrimeEvent$1.InputTuple, SetPreCrimeEvent$1.OutputTuple, SetPreCrimeEvent$1.OutputObject>;
    };
}

type index$10_Fee = Fee;
type index$10_OFT = OFT;
type index$10_OFTAdapter = OFTAdapter;
type index$10_OFTCore = OFTCore;
declare namespace index$10 {
  export {
    index$10_Fee as Fee,
    index$10_OFT as OFT,
    index$10_OFTAdapter as OFTAdapter,
    index$10_OFTCore as OFTCore,
    index$12 as interfaces,
    index$11 as mocks,
  };
}

interface IPreCrimeV2Interface extends Interface {
    getFunction(nameOrSignature: "buildSimulationResult" | "getConfig" | "precrime" | "simulate" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "buildSimulationResult", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "precrime", values: [BytesLike[], BytesLike[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "buildSimulationResult", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
interface IPreCrimeV2 extends BaseContract {
    connect(runner?: ContractRunner | null): IPreCrimeV2;
    waitForDeployment(): Promise<this>;
    interface: IPreCrimeV2Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    buildSimulationResult: TypedContractMethod<[], [string], "view">;
    getConfig: TypedContractMethod<[
        _packets: BytesLike[]
    ], [
        string
    ], "nonpayable">;
    precrime: TypedContractMethod<[
        _packets: BytesLike[],
        _simulations: BytesLike[]
    ], [
        void
    ], "nonpayable">;
    simulate: TypedContractMethod<[_packets: BytesLike[]], [string], "payable">;
    version: TypedContractMethod<[
    ], [
        [bigint, bigint] & {
            major: bigint;
            minor: bigint;
        }
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "buildSimulationResult"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[_packets: BytesLike[]], [string], "nonpayable">;
    getFunction(nameOrSignature: "precrime"): TypedContractMethod<[
        _packets: BytesLike[],
        _simulations: BytesLike[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "simulate"): TypedContractMethod<[_packets: BytesLike[]], [string], "payable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[
    ], [
        [bigint, bigint] & {
            major: bigint;
            minor: bigint;
        }
    ], "view">;
    filters: {};
}

type OriginStruct$5 = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
type InboundPacketStruct$1 = {
    origin: OriginStruct$5;
    dstEid: BigNumberish;
    receiver: AddressLike;
    guid: BytesLike;
    message: BytesLike;
};
interface IPreCrimeV2SimulatorInterface extends Interface {
    getFunction(nameOrSignature: "isPeer" | "lzReceiveAndRevert" | "oapp"): FunctionFragment;
    encodeFunctionData(functionFragment: "isPeer", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [InboundPacketStruct$1[]]): string;
    encodeFunctionData(functionFragment: "oapp", values?: undefined): string;
    decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oapp", data: BytesLike): Result;
}
interface IPreCrimeV2Simulator extends BaseContract {
    connect(runner?: ContractRunner | null): IPreCrimeV2Simulator;
    waitForDeployment(): Promise<this>;
    interface: IPreCrimeV2SimulatorInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    isPeer: TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        boolean
    ], "view">;
    lzReceiveAndRevert: TypedContractMethod<[
        _packets: InboundPacketStruct$1[]
    ], [
        void
    ], "payable">;
    oapp: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "isPeer"): TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "lzReceiveAndRevert"): TypedContractMethod<[_packets: InboundPacketStruct$1[]], [void], "payable">;
    getFunction(nameOrSignature: "oapp"): TypedContractMethod<[], [string], "view">;
    filters: {};
}

type index$$_IPreCrimeV2 = IPreCrimeV2;
type index$$_IPreCrimeV2Simulator = IPreCrimeV2Simulator;
declare namespace index$$ {
  export {
    index$$_IPreCrimeV2 as IPreCrimeV2,
    index$$_IPreCrimeV2Simulator as IPreCrimeV2Simulator,
  };
}

type PreCrimePeerStruct = {
    eid: BigNumberish;
    precrime: BytesLike;
    oapp: BytesLike;
};
type PreCrimePeerStructOutput = [
    eid: bigint,
    precrime: string,
    oapp: string
] & {
    eid: bigint;
    precrime: string;
    oapp: string;
};
interface PreCrimeV2Interface extends Interface {
    getFunction(nameOrSignature: "buildSimulationResult" | "getConfig" | "getPreCrimePeers" | "maxBatchSize" | "oapp" | "owner" | "precrime" | "renounceOwnership" | "setMaxBatchSize" | "setPreCrimePeers" | "simulate" | "simulator" | "transferOwnership" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    encodeFunctionData(functionFragment: "buildSimulationResult", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "getPreCrimePeers", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxBatchSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "oapp", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "precrime", values: [BytesLike[], BytesLike[]]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setMaxBatchSize", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setPreCrimePeers", values: [PreCrimePeerStruct[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "simulator", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "buildSimulationResult", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPreCrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oapp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$5 {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface PreCrimeV2 extends BaseContract {
    connect(runner?: ContractRunner | null): PreCrimeV2;
    waitForDeployment(): Promise<this>;
    interface: PreCrimeV2Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    buildSimulationResult: TypedContractMethod<[], [string], "view">;
    getConfig: TypedContractMethod<[
        _packets: BytesLike[]
    ], [
        string
    ], "nonpayable">;
    getPreCrimePeers: TypedContractMethod<[
    ], [
        PreCrimePeerStructOutput[]
    ], "view">;
    maxBatchSize: TypedContractMethod<[], [bigint], "view">;
    oapp: TypedContractMethod<[], [string], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    precrime: TypedContractMethod<[
        _packets: BytesLike[],
        _simulations: BytesLike[]
    ], [
        void
    ], "nonpayable">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setMaxBatchSize: TypedContractMethod<[
        _maxBatchSize: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setPreCrimePeers: TypedContractMethod<[
        _precrimePeers: PreCrimePeerStruct[]
    ], [
        void
    ], "nonpayable">;
    simulate: TypedContractMethod<[_packets: BytesLike[]], [string], "payable">;
    simulator: TypedContractMethod<[], [string], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    version: TypedContractMethod<[
    ], [
        [bigint, bigint] & {
            major: bigint;
            minor: bigint;
        }
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "buildSimulationResult"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[_packets: BytesLike[]], [string], "nonpayable">;
    getFunction(nameOrSignature: "getPreCrimePeers"): TypedContractMethod<[], [PreCrimePeerStructOutput[]], "view">;
    getFunction(nameOrSignature: "maxBatchSize"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "oapp"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "precrime"): TypedContractMethod<[
        _packets: BytesLike[],
        _simulations: BytesLike[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setMaxBatchSize"): TypedContractMethod<[_maxBatchSize: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setPreCrimePeers"): TypedContractMethod<[
        _precrimePeers: PreCrimePeerStruct[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "simulate"): TypedContractMethod<[_packets: BytesLike[]], [string], "payable">;
    getFunction(nameOrSignature: "simulator"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[
    ], [
        [bigint, bigint] & {
            major: bigint;
            minor: bigint;
        }
    ], "view">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$5.InputTuple, OwnershipTransferredEvent$5.OutputTuple, OwnershipTransferredEvent$5.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$5.InputTuple, OwnershipTransferredEvent$5.OutputTuple, OwnershipTransferredEvent$5.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$5.InputTuple, OwnershipTransferredEvent$5.OutputTuple, OwnershipTransferredEvent$5.OutputObject>;
    };
}

type OriginStruct$4 = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
type InboundPacketStruct = {
    origin: OriginStruct$4;
    dstEid: BigNumberish;
    receiver: AddressLike;
    guid: BytesLike;
    message: BytesLike;
};
interface PreCrimeV2SimulatorInterface extends Interface {
    getFunction(nameOrSignature: "_simulateLzReceive" | "isPeer" | "lzReceiveAndRevert" | "oapp"): FunctionFragment;
    encodeFunctionData(functionFragment: "_simulateLzReceive", values: [InboundPacketStruct[]]): string;
    encodeFunctionData(functionFragment: "isPeer", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [InboundPacketStruct[]]): string;
    encodeFunctionData(functionFragment: "oapp", values?: undefined): string;
    decodeFunctionResult(functionFragment: "_simulateLzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oapp", data: BytesLike): Result;
}
interface PreCrimeV2Simulator extends BaseContract {
    connect(runner?: ContractRunner | null): PreCrimeV2Simulator;
    waitForDeployment(): Promise<this>;
    interface: PreCrimeV2SimulatorInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    _simulateLzReceive: TypedContractMethod<[
        _packets: InboundPacketStruct[]
    ], [
        void
    ], "payable">;
    isPeer: TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        boolean
    ], "view">;
    lzReceiveAndRevert: TypedContractMethod<[
        _packets: InboundPacketStruct[]
    ], [
        void
    ], "payable">;
    oapp: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "_simulateLzReceive"): TypedContractMethod<[_packets: InboundPacketStruct[]], [void], "payable">;
    getFunction(nameOrSignature: "isPeer"): TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "lzReceiveAndRevert"): TypedContractMethod<[_packets: InboundPacketStruct[]], [void], "payable">;
    getFunction(nameOrSignature: "oapp"): TypedContractMethod<[], [string], "view">;
    filters: {};
}

type index$__PreCrimeV2 = PreCrimeV2;
type index$__PreCrimeV2Simulator = PreCrimeV2Simulator;
declare namespace index$_ {
  export {
    index$__PreCrimeV2 as PreCrimeV2,
    index$__PreCrimeV2Simulator as PreCrimeV2Simulator,
    index$$ as interfaces,
  };
}

declare namespace index$Z {
  export {
    index$10 as oft,
    index$_ as precrime,
  };
}

type EnforcedOptionParamStruct$1 = {
    eid: BigNumberish;
    msgType: BigNumberish;
    options: BytesLike;
};
type EnforcedOptionParamStructOutput$1 = [
    eid: bigint,
    msgType: bigint,
    options: string
] & {
    eid: bigint;
    msgType: bigint;
    options: string;
};
interface EnforcedOptionsInterface extends Interface {
    getFunction(nameOrSignature: "combineOptions" | "enforcedOptions" | "owner" | "renounceOwnership" | "setEnforcedOptions" | "transferOwnership"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred" | "SetEnforcedOption"): EventFragment;
    encodeFunctionData(functionFragment: "combineOptions", values: [BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "enforcedOptions", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct$1[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$4 {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetEnforcedOptionEvent$1 {
    type InputTuple = [_enforcedOptions: EnforcedOptionParamStruct$1[]];
    type OutputTuple = [
        _enforcedOptions: EnforcedOptionParamStructOutput$1[]
    ];
    interface OutputObject {
        _enforcedOptions: EnforcedOptionParamStructOutput$1[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface EnforcedOptions extends BaseContract {
    connect(runner?: ContractRunner | null): EnforcedOptions;
    waitForDeployment(): Promise<this>;
    interface: EnforcedOptionsInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    combineOptions: TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    enforcedOptions: TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setEnforcedOptions: TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$1[]
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "combineOptions"): TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "enforcedOptions"): TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setEnforcedOptions"): TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct$1[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$4.InputTuple, OwnershipTransferredEvent$4.OutputTuple, OwnershipTransferredEvent$4.OutputObject>;
    getEvent(key: "SetEnforcedOption"): TypedContractEvent<SetEnforcedOptionEvent$1.InputTuple, SetEnforcedOptionEvent$1.OutputTuple, SetEnforcedOptionEvent$1.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$4.InputTuple, OwnershipTransferredEvent$4.OutputTuple, OwnershipTransferredEvent$4.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$4.InputTuple, OwnershipTransferredEvent$4.OutputTuple, OwnershipTransferredEvent$4.OutputObject>;
        "SetEnforcedOption(tuple[])": TypedContractEvent<SetEnforcedOptionEvent$1.InputTuple, SetEnforcedOptionEvent$1.OutputTuple, SetEnforcedOptionEvent$1.OutputObject>;
        SetEnforcedOption: TypedContractEvent<SetEnforcedOptionEvent$1.InputTuple, SetEnforcedOptionEvent$1.OutputTuple, SetEnforcedOptionEvent$1.OutputObject>;
    };
}

type EnforcedOptionParamStruct = {
    eid: BigNumberish;
    msgType: BigNumberish;
    options: BytesLike;
};
type EnforcedOptionParamStructOutput = [
    eid: bigint,
    msgType: bigint,
    options: string
] & {
    eid: bigint;
    msgType: bigint;
    options: string;
};
type OriginStruct$3 = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
interface OAppInterface extends Interface {
    getFunction(nameOrSignature: "callEndpoint" | "combineOptions" | "endpoint" | "enforcedOptions" | "lzReceive" | "nextNonce" | "owner" | "peers" | "precrime" | "renounceOwnership" | "safeGetPeer" | "setEnforcedOptions" | "setPeer" | "setPreCrime" | "supportsInterface" | "transferOwnership" | "version"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred" | "SetEnforcedOption" | "SetPeer" | "SetPreCrime"): EventFragment;
    encodeFunctionData(functionFragment: "callEndpoint", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "combineOptions", values: [BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "enforcedOptions", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [OriginStruct$3, BytesLike, BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [EnforcedOptionParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setPreCrime", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "callEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "combineOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreCrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$3 {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetEnforcedOptionEvent {
    type InputTuple = [_enforcedOptions: EnforcedOptionParamStruct[]];
    type OutputTuple = [
        _enforcedOptions: EnforcedOptionParamStructOutput[]
    ];
    interface OutputObject {
        _enforcedOptions: EnforcedOptionParamStructOutput[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPeerEvent {
    type InputTuple = [remoteEid: BigNumberish, peer: BytesLike];
    type OutputTuple = [remoteEid: bigint, peer: string];
    interface OutputObject {
        remoteEid: bigint;
        peer: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPreCrimeEvent {
    type InputTuple = [precrime: AddressLike];
    type OutputTuple = [precrime: string];
    interface OutputObject {
        precrime: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface OApp extends BaseContract {
    connect(runner?: ContractRunner | null): OApp;
    waitForDeployment(): Promise<this>;
    interface: OAppInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    callEndpoint: TypedContractMethod<[
        _callData: BytesLike
    ], [
        void
    ], "nonpayable">;
    combineOptions: TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    endpoint: TypedContractMethod<[], [string], "view">;
    enforcedOptions: TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    lzReceive: TypedContractMethod<[
        _origin: OriginStruct$3,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    nextNonce: TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BytesLike
    ], [
        bigint
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    peers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    precrime: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    safeGetPeer: TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    setEnforcedOptions: TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct[]
    ], [
        void
    ], "nonpayable">;
    setPeer: TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    setPreCrime: TypedContractMethod<[
        _precrime: AddressLike
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    version: TypedContractMethod<[], [bigint], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "callEndpoint"): TypedContractMethod<[_callData: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "combineOptions"): TypedContractMethod<[
        _eid: BigNumberish,
        _msgType: BigNumberish,
        _extraOptions: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "endpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "enforcedOptions"): TypedContractMethod<[
        eid: BigNumberish,
        msgType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "lzReceive"): TypedContractMethod<[
        _origin: OriginStruct$3,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "nextNonce"): TypedContractMethod<[
        arg0: BigNumberish,
        arg1: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "peers"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "precrime"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "safeGetPeer"): TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "setEnforcedOptions"): TypedContractMethod<[
        _enforcedOptions: EnforcedOptionParamStruct[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPeer"): TypedContractMethod<[
        _eid: BigNumberish,
        _peer: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setPreCrime"): TypedContractMethod<[_precrime: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [bigint], "view">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$3.InputTuple, OwnershipTransferredEvent$3.OutputTuple, OwnershipTransferredEvent$3.OutputObject>;
    getEvent(key: "SetEnforcedOption"): TypedContractEvent<SetEnforcedOptionEvent.InputTuple, SetEnforcedOptionEvent.OutputTuple, SetEnforcedOptionEvent.OutputObject>;
    getEvent(key: "SetPeer"): TypedContractEvent<SetPeerEvent.InputTuple, SetPeerEvent.OutputTuple, SetPeerEvent.OutputObject>;
    getEvent(key: "SetPreCrime"): TypedContractEvent<SetPreCrimeEvent.InputTuple, SetPreCrimeEvent.OutputTuple, SetPreCrimeEvent.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$3.InputTuple, OwnershipTransferredEvent$3.OutputTuple, OwnershipTransferredEvent$3.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$3.InputTuple, OwnershipTransferredEvent$3.OutputTuple, OwnershipTransferredEvent$3.OutputObject>;
        "SetEnforcedOption(tuple[])": TypedContractEvent<SetEnforcedOptionEvent.InputTuple, SetEnforcedOptionEvent.OutputTuple, SetEnforcedOptionEvent.OutputObject>;
        SetEnforcedOption: TypedContractEvent<SetEnforcedOptionEvent.InputTuple, SetEnforcedOptionEvent.OutputTuple, SetEnforcedOptionEvent.OutputObject>;
        "SetPeer(uint32,bytes32)": TypedContractEvent<SetPeerEvent.InputTuple, SetPeerEvent.OutputTuple, SetPeerEvent.OutputObject>;
        SetPeer: TypedContractEvent<SetPeerEvent.InputTuple, SetPeerEvent.OutputTuple, SetPeerEvent.OutputObject>;
        "SetPreCrime(address)": TypedContractEvent<SetPreCrimeEvent.InputTuple, SetPreCrimeEvent.OutputTuple, SetPreCrimeEvent.OutputObject>;
        SetPreCrime: TypedContractEvent<SetPreCrimeEvent.InputTuple, SetPreCrimeEvent.OutputTuple, SetPreCrimeEvent.OutputObject>;
    };
}

type index$Y_EnforcedOptions = EnforcedOptions;
type index$Y_OApp = OApp;
declare namespace index$Y {
  export {
    index$Y_EnforcedOptions as EnforcedOptions,
    index$Y_OApp as OApp,
    index$15 as examples,
    index$14 as interfaces,
    index$13 as libs,
    index$Z as standards,
  };
}

declare namespace index$X {
  export {
    index$Y as contracts,
  };
}

interface ILayerZeroComposerInterface extends Interface {
    getFunction(nameOrSignature: "lzCompose"): FunctionFragment;
    encodeFunctionData(functionFragment: "lzCompose", values: [AddressLike, BytesLike, BytesLike, AddressLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
}
interface ILayerZeroComposer extends BaseContract {
    connect(runner?: ContractRunner | null): ILayerZeroComposer;
    waitForDeployment(): Promise<this>;
    interface: ILayerZeroComposerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    lzCompose: TypedContractMethod<[
        _from: AddressLike,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "lzCompose"): TypedContractMethod<[
        _from: AddressLike,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    filters: {};
}

type OriginStruct$2 = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
type OriginStructOutput$1 = [
    srcEid: bigint,
    sender: string,
    nonce: bigint
] & {
    srcEid: bigint;
    sender: string;
    nonce: bigint;
};
type MessagingParamsStruct$1 = {
    dstEid: BigNumberish;
    receiver: BytesLike;
    message: BytesLike;
    options: BytesLike;
    payInLzToken: boolean;
};
type MessagingFeeStructOutput$3 = [
    nativeFee: bigint,
    lzTokenFee: bigint
] & {
    nativeFee: bigint;
    lzTokenFee: bigint;
};
type MessagingReceiptStructOutput$1 = [
    guid: string,
    nonce: bigint,
    fee: MessagingFeeStructOutput$3
] & {
    guid: string;
    nonce: bigint;
    fee: MessagingFeeStructOutput$3;
};
type SetConfigParamStruct$5 = {
    eid: BigNumberish;
    configType: BigNumberish;
    config: BytesLike;
};
interface ILayerZeroEndpointV2Interface extends Interface {
    getFunction(nameOrSignature: "clear" | "composeQueue" | "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "eid" | "executable" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendContext" | "getSendLibrary" | "hasPayloadHash" | "inboundNonce" | "inboundPayloadHash" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSendingMessage" | "isSupportedEid" | "lzCompose" | "lzReceive" | "lzToken" | "nativeToken" | "nextGuid" | "outboundNonce" | "quote" | "receiveLibraryTimeout" | "registerLibrary" | "send" | "sendCompose" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setLzToken" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary" | "skip" | "verifiable" | "verify"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "ComposeDelivered" | "ComposeSent" | "DefaultReceiveLibrarySet" | "DefaultReceiveLibraryTimeoutSet" | "DefaultSendLibrarySet" | "InboundNonceSkipped" | "LibraryRegistered" | "LzComposeAlert" | "LzReceiveAlert" | "LzTokenSet" | "PacketDelivered" | "PacketSent" | "PacketVerified" | "ReceiveLibrarySet" | "ReceiveLibraryTimoutSet" | "SendLibrarySet"): EventFragment;
    encodeFunctionData(functionFragment: "clear", values: [OriginStruct$2, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "composeQueue", values: [AddressLike, AddressLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "executable", values: [OriginStruct$2, AddressLike]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [AddressLike, AddressLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "hasPayloadHash", values: [AddressLike, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [AddressLike, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        AddressLike,
        AddressLike,
        BytesLike,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [OriginStruct$2, AddressLike, BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "lzToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "quote", values: [MessagingParamsStruct$1, AddressLike]): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "send", values: [MessagingParamsStruct$1, AddressLike]): string;
    encodeFunctionData(functionFragment: "sendCompose", values: [AddressLike, BytesLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [AddressLike, SetConfigParamStruct$5[]]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "setLzToken", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "skip", values: [BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [OriginStruct$2, AddressLike]): string;
    encodeFunctionData(functionFragment: "verify", values: [OriginStruct$2, AddressLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "composeQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}
declare namespace ComposeDeliveredEvent$3 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ];
    type OutputTuple = [
        from: string,
        to: string,
        guid: string,
        index: bigint
    ];
    interface OutputObject {
        from: string;
        to: string;
        guid: string;
        index: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ComposeSentEvent$3 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish,
        message: BytesLike
    ];
    type OutputTuple = [
        from: string,
        to: string,
        guid: string,
        index: bigint,
        message: string
    ];
    interface OutputObject {
        from: string;
        to: string;
        guid: string;
        index: bigint;
        message: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultReceiveLibrarySetEvent$3 {
    type InputTuple = [
        eid: BigNumberish,
        oldLib: AddressLike,
        newLib: AddressLike
    ];
    type OutputTuple = [eid: bigint, oldLib: string, newLib: string];
    interface OutputObject {
        eid: bigint;
        oldLib: string;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultReceiveLibraryTimeoutSetEvent$3 {
    type InputTuple = [
        eid: BigNumberish,
        oldLib: AddressLike,
        expiry: BigNumberish
    ];
    type OutputTuple = [eid: bigint, oldLib: string, expiry: bigint];
    interface OutputObject {
        eid: bigint;
        oldLib: string;
        expiry: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultSendLibrarySetEvent$3 {
    type InputTuple = [eid: BigNumberish, newLib: AddressLike];
    type OutputTuple = [eid: bigint, newLib: string];
    interface OutputObject {
        eid: bigint;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace InboundNonceSkippedEvent$3 {
    type InputTuple = [
        srcEid: BigNumberish,
        sender: BytesLike,
        receiver: AddressLike,
        nonce: BigNumberish
    ];
    type OutputTuple = [
        srcEid: bigint,
        sender: string,
        receiver: string,
        nonce: bigint
    ];
    interface OutputObject {
        srcEid: bigint;
        sender: string;
        receiver: string;
        nonce: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LibraryRegisteredEvent$3 {
    type InputTuple = [newLib: AddressLike];
    type OutputTuple = [newLib: string];
    interface OutputObject {
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LzComposeAlertEvent$3 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        executor: AddressLike,
        guid: BytesLike,
        index: BigNumberish,
        gas: BigNumberish,
        value: BigNumberish,
        message: BytesLike,
        extraData: BytesLike,
        reason: BytesLike
    ];
    type OutputTuple = [
        from: string,
        to: string,
        executor: string,
        guid: string,
        index: bigint,
        gas: bigint,
        value: bigint,
        message: string,
        extraData: string,
        reason: string
    ];
    interface OutputObject {
        from: string;
        to: string;
        executor: string;
        guid: string;
        index: bigint;
        gas: bigint;
        value: bigint;
        message: string;
        extraData: string;
        reason: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LzReceiveAlertEvent$1 {
    type InputTuple = [
        receiver: AddressLike,
        executor: AddressLike,
        origin: OriginStruct$2,
        guid: BytesLike,
        gas: BigNumberish,
        value: BigNumberish,
        message: BytesLike,
        extraData: BytesLike,
        reason: BytesLike
    ];
    type OutputTuple = [
        receiver: string,
        executor: string,
        origin: OriginStructOutput$1,
        guid: string,
        gas: bigint,
        value: bigint,
        message: string,
        extraData: string,
        reason: string
    ];
    interface OutputObject {
        receiver: string;
        executor: string;
        origin: OriginStructOutput$1;
        guid: string;
        gas: bigint;
        value: bigint;
        message: string;
        extraData: string;
        reason: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LzTokenSetEvent$1 {
    type InputTuple = [token: AddressLike];
    type OutputTuple = [token: string];
    interface OutputObject {
        token: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PacketDeliveredEvent$1 {
    type InputTuple = [origin: OriginStruct$2, receiver: AddressLike];
    type OutputTuple = [origin: OriginStructOutput$1, receiver: string];
    interface OutputObject {
        origin: OriginStructOutput$1;
        receiver: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PacketSentEvent$1 {
    type InputTuple = [
        encodedPayload: BytesLike,
        options: BytesLike,
        sendLibrary: AddressLike
    ];
    type OutputTuple = [
        encodedPayload: string,
        options: string,
        sendLibrary: string
    ];
    interface OutputObject {
        encodedPayload: string;
        options: string;
        sendLibrary: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PacketVerifiedEvent$1 {
    type InputTuple = [
        origin: OriginStruct$2,
        receiver: AddressLike,
        payloadHash: BytesLike
    ];
    type OutputTuple = [
        origin: OriginStructOutput$1,
        receiver: string,
        payloadHash: string
    ];
    interface OutputObject {
        origin: OriginStructOutput$1;
        receiver: string;
        payloadHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveLibrarySetEvent$3 {
    type InputTuple = [
        receiver: AddressLike,
        eid: BigNumberish,
        oldLib: AddressLike,
        newLib: AddressLike
    ];
    type OutputTuple = [
        receiver: string,
        eid: bigint,
        oldLib: string,
        newLib: string
    ];
    interface OutputObject {
        receiver: string;
        eid: bigint;
        oldLib: string;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveLibraryTimoutSetEvent$3 {
    type InputTuple = [
        receiver: AddressLike,
        eid: BigNumberish,
        oldLib: AddressLike,
        timeout: BigNumberish
    ];
    type OutputTuple = [
        receiver: string,
        eid: bigint,
        oldLib: string,
        timeout: bigint
    ];
    interface OutputObject {
        receiver: string;
        eid: bigint;
        oldLib: string;
        timeout: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SendLibrarySetEvent$3 {
    type InputTuple = [
        sender: AddressLike,
        eid: BigNumberish,
        newLib: AddressLike
    ];
    type OutputTuple = [sender: string, eid: bigint, newLib: string];
    interface OutputObject {
        sender: string;
        eid: bigint;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface ILayerZeroEndpointV2 extends BaseContract {
    connect(runner?: ContractRunner | null): ILayerZeroEndpointV2;
    waitForDeployment(): Promise<this>;
    interface: ILayerZeroEndpointV2Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    clear: TypedContractMethod<[
        _origin: OriginStruct$2,
        _guid: BytesLike,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    composeQueue: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ], [
        string
    ], "view">;
    defaultReceiveLibrary: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        string
    ], "view">;
    defaultReceiveLibraryTimeout: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    defaultSendLibrary: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        string
    ], "view">;
    eid: TypedContractMethod<[], [bigint], "view">;
    executable: TypedContractMethod<[
        _origin: OriginStruct$2,
        _receiver: AddressLike
    ], [
        bigint
    ], "view">;
    getConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _lib: AddressLike,
        _eid: BigNumberish,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getReceiveLibrary: TypedContractMethod<[
        _receiver: AddressLike,
        _eid: BigNumberish
    ], [
        [string, boolean] & {
            lib: string;
            isDefault: boolean;
        }
    ], "view">;
    getRegisteredLibraries: TypedContractMethod<[], [string[]], "view">;
    getSendContext: TypedContractMethod<[], [[bigint, string]], "view">;
    getSendLibrary: TypedContractMethod<[
        _sender: AddressLike,
        _eid: BigNumberish
    ], [
        string
    ], "view">;
    hasPayloadHash: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        boolean
    ], "view">;
    inboundNonce: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    inboundPayloadHash: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        string
    ], "view">;
    isDefaultSendLibrary: TypedContractMethod<[
        _sender: AddressLike,
        _eid: BigNumberish
    ], [
        boolean
    ], "view">;
    isRegisteredLibrary: TypedContractMethod<[
        _lib: AddressLike
    ], [
        boolean
    ], "view">;
    isSendingMessage: TypedContractMethod<[], [boolean], "view">;
    isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    lzCompose: TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    lzReceive: TypedContractMethod<[
        _origin: OriginStruct$2,
        _receiver: AddressLike,
        _guid: BytesLike,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    lzToken: TypedContractMethod<[], [string], "view">;
    nativeToken: TypedContractMethod<[], [string], "view">;
    nextGuid: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        string
    ], "view">;
    outboundNonce: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        bigint
    ], "view">;
    quote: TypedContractMethod<[
        _params: MessagingParamsStruct$1,
        _sender: AddressLike
    ], [
        MessagingFeeStructOutput$3
    ], "view">;
    receiveLibraryTimeout: TypedContractMethod<[
        _receiver: AddressLike,
        _eid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    registerLibrary: TypedContractMethod<[
        _lib: AddressLike
    ], [
        void
    ], "nonpayable">;
    send: TypedContractMethod<[
        _params: MessagingParamsStruct$1,
        _refundAddress: AddressLike
    ], [
        MessagingReceiptStructOutput$1
    ], "payable">;
    sendCompose: TypedContractMethod<[
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    setConfig: TypedContractMethod<[
        _lib: AddressLike,
        _params: SetConfigParamStruct$5[]
    ], [
        void
    ], "nonpayable">;
    setDefaultReceiveLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _timeout: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setDefaultReceiveLibraryTimeout: TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setDefaultSendLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    setLzToken: TypedContractMethod<[
        _lzToken: AddressLike
    ], [
        void
    ], "nonpayable">;
    setReceiveLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setReceiveLibraryTimeout: TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setSendLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    skip: TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    verifiable: TypedContractMethod<[
        _origin: OriginStruct$2,
        _receiver: AddressLike
    ], [
        boolean
    ], "view">;
    verify: TypedContractMethod<[
        _origin: OriginStruct$2,
        _receiver: AddressLike,
        _payloadHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "clear"): TypedContractMethod<[
        _origin: OriginStruct$2,
        _guid: BytesLike,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "composeQueue"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "defaultReceiveLibrary"): TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "defaultReceiveLibraryTimeout"): TypedContractMethod<[
        _eid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "defaultSendLibrary"): TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "eid"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "executable"): TypedContractMethod<[
        _origin: OriginStruct$2,
        _receiver: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _lib: AddressLike,
        _eid: BigNumberish,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "getReceiveLibrary"): TypedContractMethod<[
        _receiver: AddressLike,
        _eid: BigNumberish
    ], [
        [string, boolean] & {
            lib: string;
            isDefault: boolean;
        }
    ], "view">;
    getFunction(nameOrSignature: "getRegisteredLibraries"): TypedContractMethod<[], [string[]], "view">;
    getFunction(nameOrSignature: "getSendContext"): TypedContractMethod<[], [[bigint, string]], "view">;
    getFunction(nameOrSignature: "getSendLibrary"): TypedContractMethod<[
        _sender: AddressLike,
        _eid: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "hasPayloadHash"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "inboundNonce"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "inboundPayloadHash"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "isDefaultSendLibrary"): TypedContractMethod<[
        _sender: AddressLike,
        _eid: BigNumberish
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "isRegisteredLibrary"): TypedContractMethod<[_lib: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "isSendingMessage"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "lzCompose"): TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "lzReceive"): TypedContractMethod<[
        _origin: OriginStruct$2,
        _receiver: AddressLike,
        _guid: BytesLike,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "lzToken"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "nativeToken"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "nextGuid"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "outboundNonce"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "quote"): TypedContractMethod<[
        _params: MessagingParamsStruct$1,
        _sender: AddressLike
    ], [
        MessagingFeeStructOutput$3
    ], "view">;
    getFunction(nameOrSignature: "receiveLibraryTimeout"): TypedContractMethod<[
        _receiver: AddressLike,
        _eid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "registerLibrary"): TypedContractMethod<[_lib: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "send"): TypedContractMethod<[
        _params: MessagingParamsStruct$1,
        _refundAddress: AddressLike
    ], [
        MessagingReceiptStructOutput$1
    ], "payable">;
    getFunction(nameOrSignature: "sendCompose"): TypedContractMethod<[
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        _lib: AddressLike,
        _params: SetConfigParamStruct$5[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultReceiveLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _timeout: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultReceiveLibraryTimeout"): TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultSendLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setLzToken"): TypedContractMethod<[_lzToken: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setReceiveLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setReceiveLibraryTimeout"): TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setSendLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "skip"): TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "verifiable"): TypedContractMethod<[
        _origin: OriginStruct$2,
        _receiver: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "verify"): TypedContractMethod<[
        _origin: OriginStruct$2,
        _receiver: AddressLike,
        _payloadHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "ComposeDelivered"): TypedContractEvent<ComposeDeliveredEvent$3.InputTuple, ComposeDeliveredEvent$3.OutputTuple, ComposeDeliveredEvent$3.OutputObject>;
    getEvent(key: "ComposeSent"): TypedContractEvent<ComposeSentEvent$3.InputTuple, ComposeSentEvent$3.OutputTuple, ComposeSentEvent$3.OutputObject>;
    getEvent(key: "DefaultReceiveLibrarySet"): TypedContractEvent<DefaultReceiveLibrarySetEvent$3.InputTuple, DefaultReceiveLibrarySetEvent$3.OutputTuple, DefaultReceiveLibrarySetEvent$3.OutputObject>;
    getEvent(key: "DefaultReceiveLibraryTimeoutSet"): TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent$3.InputTuple, DefaultReceiveLibraryTimeoutSetEvent$3.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent$3.OutputObject>;
    getEvent(key: "DefaultSendLibrarySet"): TypedContractEvent<DefaultSendLibrarySetEvent$3.InputTuple, DefaultSendLibrarySetEvent$3.OutputTuple, DefaultSendLibrarySetEvent$3.OutputObject>;
    getEvent(key: "InboundNonceSkipped"): TypedContractEvent<InboundNonceSkippedEvent$3.InputTuple, InboundNonceSkippedEvent$3.OutputTuple, InboundNonceSkippedEvent$3.OutputObject>;
    getEvent(key: "LibraryRegistered"): TypedContractEvent<LibraryRegisteredEvent$3.InputTuple, LibraryRegisteredEvent$3.OutputTuple, LibraryRegisteredEvent$3.OutputObject>;
    getEvent(key: "LzComposeAlert"): TypedContractEvent<LzComposeAlertEvent$3.InputTuple, LzComposeAlertEvent$3.OutputTuple, LzComposeAlertEvent$3.OutputObject>;
    getEvent(key: "LzReceiveAlert"): TypedContractEvent<LzReceiveAlertEvent$1.InputTuple, LzReceiveAlertEvent$1.OutputTuple, LzReceiveAlertEvent$1.OutputObject>;
    getEvent(key: "LzTokenSet"): TypedContractEvent<LzTokenSetEvent$1.InputTuple, LzTokenSetEvent$1.OutputTuple, LzTokenSetEvent$1.OutputObject>;
    getEvent(key: "PacketDelivered"): TypedContractEvent<PacketDeliveredEvent$1.InputTuple, PacketDeliveredEvent$1.OutputTuple, PacketDeliveredEvent$1.OutputObject>;
    getEvent(key: "PacketSent"): TypedContractEvent<PacketSentEvent$1.InputTuple, PacketSentEvent$1.OutputTuple, PacketSentEvent$1.OutputObject>;
    getEvent(key: "PacketVerified"): TypedContractEvent<PacketVerifiedEvent$1.InputTuple, PacketVerifiedEvent$1.OutputTuple, PacketVerifiedEvent$1.OutputObject>;
    getEvent(key: "ReceiveLibrarySet"): TypedContractEvent<ReceiveLibrarySetEvent$3.InputTuple, ReceiveLibrarySetEvent$3.OutputTuple, ReceiveLibrarySetEvent$3.OutputObject>;
    getEvent(key: "ReceiveLibraryTimoutSet"): TypedContractEvent<ReceiveLibraryTimoutSetEvent$3.InputTuple, ReceiveLibraryTimoutSetEvent$3.OutputTuple, ReceiveLibraryTimoutSetEvent$3.OutputObject>;
    getEvent(key: "SendLibrarySet"): TypedContractEvent<SendLibrarySetEvent$3.InputTuple, SendLibrarySetEvent$3.OutputTuple, SendLibrarySetEvent$3.OutputObject>;
    filters: {
        "ComposeDelivered(address,address,bytes32,uint16)": TypedContractEvent<ComposeDeliveredEvent$3.InputTuple, ComposeDeliveredEvent$3.OutputTuple, ComposeDeliveredEvent$3.OutputObject>;
        ComposeDelivered: TypedContractEvent<ComposeDeliveredEvent$3.InputTuple, ComposeDeliveredEvent$3.OutputTuple, ComposeDeliveredEvent$3.OutputObject>;
        "ComposeSent(address,address,bytes32,uint16,bytes)": TypedContractEvent<ComposeSentEvent$3.InputTuple, ComposeSentEvent$3.OutputTuple, ComposeSentEvent$3.OutputObject>;
        ComposeSent: TypedContractEvent<ComposeSentEvent$3.InputTuple, ComposeSentEvent$3.OutputTuple, ComposeSentEvent$3.OutputObject>;
        "DefaultReceiveLibrarySet(uint32,address,address)": TypedContractEvent<DefaultReceiveLibrarySetEvent$3.InputTuple, DefaultReceiveLibrarySetEvent$3.OutputTuple, DefaultReceiveLibrarySetEvent$3.OutputObject>;
        DefaultReceiveLibrarySet: TypedContractEvent<DefaultReceiveLibrarySetEvent$3.InputTuple, DefaultReceiveLibrarySetEvent$3.OutputTuple, DefaultReceiveLibrarySetEvent$3.OutputObject>;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent$3.InputTuple, DefaultReceiveLibraryTimeoutSetEvent$3.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent$3.OutputObject>;
        DefaultReceiveLibraryTimeoutSet: TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent$3.InputTuple, DefaultReceiveLibraryTimeoutSetEvent$3.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent$3.OutputObject>;
        "DefaultSendLibrarySet(uint32,address)": TypedContractEvent<DefaultSendLibrarySetEvent$3.InputTuple, DefaultSendLibrarySetEvent$3.OutputTuple, DefaultSendLibrarySetEvent$3.OutputObject>;
        DefaultSendLibrarySet: TypedContractEvent<DefaultSendLibrarySetEvent$3.InputTuple, DefaultSendLibrarySetEvent$3.OutputTuple, DefaultSendLibrarySetEvent$3.OutputObject>;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": TypedContractEvent<InboundNonceSkippedEvent$3.InputTuple, InboundNonceSkippedEvent$3.OutputTuple, InboundNonceSkippedEvent$3.OutputObject>;
        InboundNonceSkipped: TypedContractEvent<InboundNonceSkippedEvent$3.InputTuple, InboundNonceSkippedEvent$3.OutputTuple, InboundNonceSkippedEvent$3.OutputObject>;
        "LibraryRegistered(address)": TypedContractEvent<LibraryRegisteredEvent$3.InputTuple, LibraryRegisteredEvent$3.OutputTuple, LibraryRegisteredEvent$3.OutputObject>;
        LibraryRegistered: TypedContractEvent<LibraryRegisteredEvent$3.InputTuple, LibraryRegisteredEvent$3.OutputTuple, LibraryRegisteredEvent$3.OutputObject>;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": TypedContractEvent<LzComposeAlertEvent$3.InputTuple, LzComposeAlertEvent$3.OutputTuple, LzComposeAlertEvent$3.OutputObject>;
        LzComposeAlert: TypedContractEvent<LzComposeAlertEvent$3.InputTuple, LzComposeAlertEvent$3.OutputTuple, LzComposeAlertEvent$3.OutputObject>;
        "LzReceiveAlert(address,address,tuple,bytes32,uint256,uint256,bytes,bytes,bytes)": TypedContractEvent<LzReceiveAlertEvent$1.InputTuple, LzReceiveAlertEvent$1.OutputTuple, LzReceiveAlertEvent$1.OutputObject>;
        LzReceiveAlert: TypedContractEvent<LzReceiveAlertEvent$1.InputTuple, LzReceiveAlertEvent$1.OutputTuple, LzReceiveAlertEvent$1.OutputObject>;
        "LzTokenSet(address)": TypedContractEvent<LzTokenSetEvent$1.InputTuple, LzTokenSetEvent$1.OutputTuple, LzTokenSetEvent$1.OutputObject>;
        LzTokenSet: TypedContractEvent<LzTokenSetEvent$1.InputTuple, LzTokenSetEvent$1.OutputTuple, LzTokenSetEvent$1.OutputObject>;
        "PacketDelivered(tuple,address)": TypedContractEvent<PacketDeliveredEvent$1.InputTuple, PacketDeliveredEvent$1.OutputTuple, PacketDeliveredEvent$1.OutputObject>;
        PacketDelivered: TypedContractEvent<PacketDeliveredEvent$1.InputTuple, PacketDeliveredEvent$1.OutputTuple, PacketDeliveredEvent$1.OutputObject>;
        "PacketSent(bytes,bytes,address)": TypedContractEvent<PacketSentEvent$1.InputTuple, PacketSentEvent$1.OutputTuple, PacketSentEvent$1.OutputObject>;
        PacketSent: TypedContractEvent<PacketSentEvent$1.InputTuple, PacketSentEvent$1.OutputTuple, PacketSentEvent$1.OutputObject>;
        "PacketVerified(tuple,address,bytes32)": TypedContractEvent<PacketVerifiedEvent$1.InputTuple, PacketVerifiedEvent$1.OutputTuple, PacketVerifiedEvent$1.OutputObject>;
        PacketVerified: TypedContractEvent<PacketVerifiedEvent$1.InputTuple, PacketVerifiedEvent$1.OutputTuple, PacketVerifiedEvent$1.OutputObject>;
        "ReceiveLibrarySet(address,uint32,address,address)": TypedContractEvent<ReceiveLibrarySetEvent$3.InputTuple, ReceiveLibrarySetEvent$3.OutputTuple, ReceiveLibrarySetEvent$3.OutputObject>;
        ReceiveLibrarySet: TypedContractEvent<ReceiveLibrarySetEvent$3.InputTuple, ReceiveLibrarySetEvent$3.OutputTuple, ReceiveLibrarySetEvent$3.OutputObject>;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)": TypedContractEvent<ReceiveLibraryTimoutSetEvent$3.InputTuple, ReceiveLibraryTimoutSetEvent$3.OutputTuple, ReceiveLibraryTimoutSetEvent$3.OutputObject>;
        ReceiveLibraryTimoutSet: TypedContractEvent<ReceiveLibraryTimoutSetEvent$3.InputTuple, ReceiveLibraryTimoutSetEvent$3.OutputTuple, ReceiveLibraryTimoutSetEvent$3.OutputObject>;
        "SendLibrarySet(address,uint32,address)": TypedContractEvent<SendLibrarySetEvent$3.InputTuple, SendLibrarySetEvent$3.OutputTuple, SendLibrarySetEvent$3.OutputObject>;
        SendLibrarySet: TypedContractEvent<SendLibrarySetEvent$3.InputTuple, SendLibrarySetEvent$3.OutputTuple, SendLibrarySetEvent$3.OutputObject>;
    };
}

type OriginStruct$1 = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
interface ILayerZeroReceiverInterface extends Interface {
    getFunction(nameOrSignature: "lzReceive" | "nextNonce"): FunctionFragment;
    encodeFunctionData(functionFragment: "lzReceive", values: [OriginStruct$1, BytesLike, BytesLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [BigNumberish, BytesLike]): string;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
}
interface ILayerZeroReceiver extends BaseContract {
    connect(runner?: ContractRunner | null): ILayerZeroReceiver;
    waitForDeployment(): Promise<this>;
    interface: ILayerZeroReceiverInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    lzReceive: TypedContractMethod<[
        _origin: OriginStruct$1,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    nextNonce: TypedContractMethod<[
        _eid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "lzReceive"): TypedContractMethod<[
        _origin: OriginStruct$1,
        _guid: BytesLike,
        _message: BytesLike,
        _executor: AddressLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "nextNonce"): TypedContractMethod<[
        _eid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    filters: {};
}

type SetConfigParamStruct$4 = {
    eid: BigNumberish;
    configType: BigNumberish;
    config: BytesLike;
};
interface IMessageLibInterface extends Interface {
    getFunction(nameOrSignature: "getConfig" | "isSupportedEid" | "messageLibType" | "setConfig" | "supportsInterface" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "getConfig", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "setConfig", values: [AddressLike, SetConfigParamStruct$4[]]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
interface IMessageLib extends BaseContract {
    connect(runner?: ContractRunner | null): IMessageLib;
    waitForDeployment(): Promise<this>;
    interface: IMessageLibInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getConfig: TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    messageLibType: TypedContractMethod<[], [bigint], "view">;
    setConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _config: SetConfigParamStruct$4[]
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    version: TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "messageLibType"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _config: SetConfigParamStruct$4[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    filters: {};
}

type SetConfigParamStruct$3 = {
    eid: BigNumberish;
    configType: BigNumberish;
    config: BytesLike;
};
interface IMessageLibManagerInterface extends Interface {
    getFunction(nameOrSignature: "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendLibrary" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSupportedEid" | "receiveLibraryTimeout" | "registerLibrary" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibrarySet" | "DefaultReceiveLibraryTimeoutSet" | "DefaultSendLibrarySet" | "LibraryRegistered" | "ReceiveLibrarySet" | "ReceiveLibraryTimoutSet" | "SendLibrarySet"): EventFragment;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [AddressLike, AddressLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [AddressLike, SetConfigParamStruct$3[]]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [BigNumberish, AddressLike]): string;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
}
declare namespace DefaultReceiveLibrarySetEvent$2 {
    type InputTuple = [
        eid: BigNumberish,
        oldLib: AddressLike,
        newLib: AddressLike
    ];
    type OutputTuple = [eid: bigint, oldLib: string, newLib: string];
    interface OutputObject {
        eid: bigint;
        oldLib: string;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultReceiveLibraryTimeoutSetEvent$2 {
    type InputTuple = [
        eid: BigNumberish,
        oldLib: AddressLike,
        expiry: BigNumberish
    ];
    type OutputTuple = [eid: bigint, oldLib: string, expiry: bigint];
    interface OutputObject {
        eid: bigint;
        oldLib: string;
        expiry: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultSendLibrarySetEvent$2 {
    type InputTuple = [eid: BigNumberish, newLib: AddressLike];
    type OutputTuple = [eid: bigint, newLib: string];
    interface OutputObject {
        eid: bigint;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LibraryRegisteredEvent$2 {
    type InputTuple = [newLib: AddressLike];
    type OutputTuple = [newLib: string];
    interface OutputObject {
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveLibrarySetEvent$2 {
    type InputTuple = [
        receiver: AddressLike,
        eid: BigNumberish,
        oldLib: AddressLike,
        newLib: AddressLike
    ];
    type OutputTuple = [
        receiver: string,
        eid: bigint,
        oldLib: string,
        newLib: string
    ];
    interface OutputObject {
        receiver: string;
        eid: bigint;
        oldLib: string;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveLibraryTimoutSetEvent$2 {
    type InputTuple = [
        receiver: AddressLike,
        eid: BigNumberish,
        oldLib: AddressLike,
        timeout: BigNumberish
    ];
    type OutputTuple = [
        receiver: string,
        eid: bigint,
        oldLib: string,
        timeout: bigint
    ];
    interface OutputObject {
        receiver: string;
        eid: bigint;
        oldLib: string;
        timeout: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SendLibrarySetEvent$2 {
    type InputTuple = [
        sender: AddressLike,
        eid: BigNumberish,
        newLib: AddressLike
    ];
    type OutputTuple = [sender: string, eid: bigint, newLib: string];
    interface OutputObject {
        sender: string;
        eid: bigint;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface IMessageLibManager extends BaseContract {
    connect(runner?: ContractRunner | null): IMessageLibManager;
    waitForDeployment(): Promise<this>;
    interface: IMessageLibManagerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    defaultReceiveLibrary: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        string
    ], "view">;
    defaultReceiveLibraryTimeout: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    defaultSendLibrary: TypedContractMethod<[
        _eid: BigNumberish
    ], [
        string
    ], "view">;
    getConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _lib: AddressLike,
        _eid: BigNumberish,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getReceiveLibrary: TypedContractMethod<[
        _receiver: AddressLike,
        _eid: BigNumberish
    ], [
        [string, boolean] & {
            lib: string;
            isDefault: boolean;
        }
    ], "view">;
    getRegisteredLibraries: TypedContractMethod<[], [string[]], "view">;
    getSendLibrary: TypedContractMethod<[
        _sender: AddressLike,
        _eid: BigNumberish
    ], [
        string
    ], "view">;
    isDefaultSendLibrary: TypedContractMethod<[
        _sender: AddressLike,
        _eid: BigNumberish
    ], [
        boolean
    ], "view">;
    isRegisteredLibrary: TypedContractMethod<[
        _lib: AddressLike
    ], [
        boolean
    ], "view">;
    isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    receiveLibraryTimeout: TypedContractMethod<[
        _receiver: AddressLike,
        _eid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    registerLibrary: TypedContractMethod<[
        _lib: AddressLike
    ], [
        void
    ], "nonpayable">;
    setConfig: TypedContractMethod<[
        _lib: AddressLike,
        _params: SetConfigParamStruct$3[]
    ], [
        void
    ], "nonpayable">;
    setDefaultReceiveLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _timeout: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setDefaultReceiveLibraryTimeout: TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setDefaultSendLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    setReceiveLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setReceiveLibraryTimeout: TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setSendLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "defaultReceiveLibrary"): TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "defaultReceiveLibraryTimeout"): TypedContractMethod<[
        _eid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "defaultSendLibrary"): TypedContractMethod<[_eid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _lib: AddressLike,
        _eid: BigNumberish,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "getReceiveLibrary"): TypedContractMethod<[
        _receiver: AddressLike,
        _eid: BigNumberish
    ], [
        [string, boolean] & {
            lib: string;
            isDefault: boolean;
        }
    ], "view">;
    getFunction(nameOrSignature: "getRegisteredLibraries"): TypedContractMethod<[], [string[]], "view">;
    getFunction(nameOrSignature: "getSendLibrary"): TypedContractMethod<[
        _sender: AddressLike,
        _eid: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "isDefaultSendLibrary"): TypedContractMethod<[
        _sender: AddressLike,
        _eid: BigNumberish
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "isRegisteredLibrary"): TypedContractMethod<[_lib: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "receiveLibraryTimeout"): TypedContractMethod<[
        _receiver: AddressLike,
        _eid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "registerLibrary"): TypedContractMethod<[_lib: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        _lib: AddressLike,
        _params: SetConfigParamStruct$3[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultReceiveLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _timeout: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultReceiveLibraryTimeout"): TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultSendLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setReceiveLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setReceiveLibraryTimeout"): TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setSendLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "DefaultReceiveLibrarySet"): TypedContractEvent<DefaultReceiveLibrarySetEvent$2.InputTuple, DefaultReceiveLibrarySetEvent$2.OutputTuple, DefaultReceiveLibrarySetEvent$2.OutputObject>;
    getEvent(key: "DefaultReceiveLibraryTimeoutSet"): TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent$2.InputTuple, DefaultReceiveLibraryTimeoutSetEvent$2.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent$2.OutputObject>;
    getEvent(key: "DefaultSendLibrarySet"): TypedContractEvent<DefaultSendLibrarySetEvent$2.InputTuple, DefaultSendLibrarySetEvent$2.OutputTuple, DefaultSendLibrarySetEvent$2.OutputObject>;
    getEvent(key: "LibraryRegistered"): TypedContractEvent<LibraryRegisteredEvent$2.InputTuple, LibraryRegisteredEvent$2.OutputTuple, LibraryRegisteredEvent$2.OutputObject>;
    getEvent(key: "ReceiveLibrarySet"): TypedContractEvent<ReceiveLibrarySetEvent$2.InputTuple, ReceiveLibrarySetEvent$2.OutputTuple, ReceiveLibrarySetEvent$2.OutputObject>;
    getEvent(key: "ReceiveLibraryTimoutSet"): TypedContractEvent<ReceiveLibraryTimoutSetEvent$2.InputTuple, ReceiveLibraryTimoutSetEvent$2.OutputTuple, ReceiveLibraryTimoutSetEvent$2.OutputObject>;
    getEvent(key: "SendLibrarySet"): TypedContractEvent<SendLibrarySetEvent$2.InputTuple, SendLibrarySetEvent$2.OutputTuple, SendLibrarySetEvent$2.OutputObject>;
    filters: {
        "DefaultReceiveLibrarySet(uint32,address,address)": TypedContractEvent<DefaultReceiveLibrarySetEvent$2.InputTuple, DefaultReceiveLibrarySetEvent$2.OutputTuple, DefaultReceiveLibrarySetEvent$2.OutputObject>;
        DefaultReceiveLibrarySet: TypedContractEvent<DefaultReceiveLibrarySetEvent$2.InputTuple, DefaultReceiveLibrarySetEvent$2.OutputTuple, DefaultReceiveLibrarySetEvent$2.OutputObject>;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent$2.InputTuple, DefaultReceiveLibraryTimeoutSetEvent$2.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent$2.OutputObject>;
        DefaultReceiveLibraryTimeoutSet: TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent$2.InputTuple, DefaultReceiveLibraryTimeoutSetEvent$2.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent$2.OutputObject>;
        "DefaultSendLibrarySet(uint32,address)": TypedContractEvent<DefaultSendLibrarySetEvent$2.InputTuple, DefaultSendLibrarySetEvent$2.OutputTuple, DefaultSendLibrarySetEvent$2.OutputObject>;
        DefaultSendLibrarySet: TypedContractEvent<DefaultSendLibrarySetEvent$2.InputTuple, DefaultSendLibrarySetEvent$2.OutputTuple, DefaultSendLibrarySetEvent$2.OutputObject>;
        "LibraryRegistered(address)": TypedContractEvent<LibraryRegisteredEvent$2.InputTuple, LibraryRegisteredEvent$2.OutputTuple, LibraryRegisteredEvent$2.OutputObject>;
        LibraryRegistered: TypedContractEvent<LibraryRegisteredEvent$2.InputTuple, LibraryRegisteredEvent$2.OutputTuple, LibraryRegisteredEvent$2.OutputObject>;
        "ReceiveLibrarySet(address,uint32,address,address)": TypedContractEvent<ReceiveLibrarySetEvent$2.InputTuple, ReceiveLibrarySetEvent$2.OutputTuple, ReceiveLibrarySetEvent$2.OutputObject>;
        ReceiveLibrarySet: TypedContractEvent<ReceiveLibrarySetEvent$2.InputTuple, ReceiveLibrarySetEvent$2.OutputTuple, ReceiveLibrarySetEvent$2.OutputObject>;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)": TypedContractEvent<ReceiveLibraryTimoutSetEvent$2.InputTuple, ReceiveLibraryTimoutSetEvent$2.OutputTuple, ReceiveLibraryTimoutSetEvent$2.OutputObject>;
        ReceiveLibraryTimoutSet: TypedContractEvent<ReceiveLibraryTimoutSetEvent$2.InputTuple, ReceiveLibraryTimoutSetEvent$2.OutputTuple, ReceiveLibraryTimoutSetEvent$2.OutputObject>;
        "SendLibrarySet(address,uint32,address)": TypedContractEvent<SendLibrarySetEvent$2.InputTuple, SendLibrarySetEvent$2.OutputTuple, SendLibrarySetEvent$2.OutputObject>;
        SendLibrarySet: TypedContractEvent<SendLibrarySetEvent$2.InputTuple, SendLibrarySetEvent$2.OutputTuple, SendLibrarySetEvent$2.OutputObject>;
    };
}

interface IMessagingChannelInterface extends Interface {
    getFunction(nameOrSignature: "eid" | "hasPayloadHash" | "inboundNonce" | "inboundPayloadHash" | "nextGuid" | "outboundNonce" | "skip"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "InboundNonceSkipped"): EventFragment;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "hasPayloadHash", values: [AddressLike, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [AddressLike, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "skip", values: [BigNumberish, BytesLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
}
declare namespace InboundNonceSkippedEvent$2 {
    type InputTuple = [
        srcEid: BigNumberish,
        sender: BytesLike,
        receiver: AddressLike,
        nonce: BigNumberish
    ];
    type OutputTuple = [
        srcEid: bigint,
        sender: string,
        receiver: string,
        nonce: bigint
    ];
    interface OutputObject {
        srcEid: bigint;
        sender: string;
        receiver: string;
        nonce: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface IMessagingChannel extends BaseContract {
    connect(runner?: ContractRunner | null): IMessagingChannel;
    waitForDeployment(): Promise<this>;
    interface: IMessagingChannelInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    eid: TypedContractMethod<[], [bigint], "view">;
    hasPayloadHash: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        boolean
    ], "view">;
    inboundNonce: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    inboundPayloadHash: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        string
    ], "view">;
    nextGuid: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        string
    ], "view">;
    outboundNonce: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        bigint
    ], "view">;
    skip: TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "eid"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "hasPayloadHash"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "inboundNonce"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "inboundPayloadHash"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "nextGuid"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "outboundNonce"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "skip"): TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "InboundNonceSkipped"): TypedContractEvent<InboundNonceSkippedEvent$2.InputTuple, InboundNonceSkippedEvent$2.OutputTuple, InboundNonceSkippedEvent$2.OutputObject>;
    filters: {
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": TypedContractEvent<InboundNonceSkippedEvent$2.InputTuple, InboundNonceSkippedEvent$2.OutputTuple, InboundNonceSkippedEvent$2.OutputObject>;
        InboundNonceSkipped: TypedContractEvent<InboundNonceSkippedEvent$2.InputTuple, InboundNonceSkippedEvent$2.OutputTuple, InboundNonceSkippedEvent$2.OutputObject>;
    };
}

interface IMessagingComposerInterface extends Interface {
    getFunction(nameOrSignature: "composeQueue" | "lzCompose" | "sendCompose"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "ComposeDelivered" | "ComposeSent" | "LzComposeAlert"): EventFragment;
    encodeFunctionData(functionFragment: "composeQueue", values: [AddressLike, AddressLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        AddressLike,
        AddressLike,
        BytesLike,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "sendCompose", values: [AddressLike, BytesLike, BigNumberish, BytesLike]): string;
    decodeFunctionResult(functionFragment: "composeQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendCompose", data: BytesLike): Result;
}
declare namespace ComposeDeliveredEvent$2 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ];
    type OutputTuple = [
        from: string,
        to: string,
        guid: string,
        index: bigint
    ];
    interface OutputObject {
        from: string;
        to: string;
        guid: string;
        index: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ComposeSentEvent$2 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish,
        message: BytesLike
    ];
    type OutputTuple = [
        from: string,
        to: string,
        guid: string,
        index: bigint,
        message: string
    ];
    interface OutputObject {
        from: string;
        to: string;
        guid: string;
        index: bigint;
        message: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LzComposeAlertEvent$2 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        executor: AddressLike,
        guid: BytesLike,
        index: BigNumberish,
        gas: BigNumberish,
        value: BigNumberish,
        message: BytesLike,
        extraData: BytesLike,
        reason: BytesLike
    ];
    type OutputTuple = [
        from: string,
        to: string,
        executor: string,
        guid: string,
        index: bigint,
        gas: bigint,
        value: bigint,
        message: string,
        extraData: string,
        reason: string
    ];
    interface OutputObject {
        from: string;
        to: string;
        executor: string;
        guid: string;
        index: bigint;
        gas: bigint;
        value: bigint;
        message: string;
        extraData: string;
        reason: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface IMessagingComposer extends BaseContract {
    connect(runner?: ContractRunner | null): IMessagingComposer;
    waitForDeployment(): Promise<this>;
    interface: IMessagingComposerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    composeQueue: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ], [
        string
    ], "view">;
    lzCompose: TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    sendCompose: TypedContractMethod<[
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "composeQueue"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "lzCompose"): TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "sendCompose"): TypedContractMethod<[
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "ComposeDelivered"): TypedContractEvent<ComposeDeliveredEvent$2.InputTuple, ComposeDeliveredEvent$2.OutputTuple, ComposeDeliveredEvent$2.OutputObject>;
    getEvent(key: "ComposeSent"): TypedContractEvent<ComposeSentEvent$2.InputTuple, ComposeSentEvent$2.OutputTuple, ComposeSentEvent$2.OutputObject>;
    getEvent(key: "LzComposeAlert"): TypedContractEvent<LzComposeAlertEvent$2.InputTuple, LzComposeAlertEvent$2.OutputTuple, LzComposeAlertEvent$2.OutputObject>;
    filters: {
        "ComposeDelivered(address,address,bytes32,uint16)": TypedContractEvent<ComposeDeliveredEvent$2.InputTuple, ComposeDeliveredEvent$2.OutputTuple, ComposeDeliveredEvent$2.OutputObject>;
        ComposeDelivered: TypedContractEvent<ComposeDeliveredEvent$2.InputTuple, ComposeDeliveredEvent$2.OutputTuple, ComposeDeliveredEvent$2.OutputObject>;
        "ComposeSent(address,address,bytes32,uint16,bytes)": TypedContractEvent<ComposeSentEvent$2.InputTuple, ComposeSentEvent$2.OutputTuple, ComposeSentEvent$2.OutputObject>;
        ComposeSent: TypedContractEvent<ComposeSentEvent$2.InputTuple, ComposeSentEvent$2.OutputTuple, ComposeSentEvent$2.OutputObject>;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": TypedContractEvent<LzComposeAlertEvent$2.InputTuple, LzComposeAlertEvent$2.OutputTuple, LzComposeAlertEvent$2.OutputObject>;
        LzComposeAlert: TypedContractEvent<LzComposeAlertEvent$2.InputTuple, LzComposeAlertEvent$2.OutputTuple, LzComposeAlertEvent$2.OutputObject>;
    };
}

interface IMessagingContextInterface extends Interface {
    getFunction(nameOrSignature: "getSendContext" | "isSendingMessage"): FunctionFragment;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
}
interface IMessagingContext extends BaseContract {
    connect(runner?: ContractRunner | null): IMessagingContext;
    waitForDeployment(): Promise<this>;
    interface: IMessagingContextInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getSendContext: TypedContractMethod<[], [[bigint, string]], "view">;
    isSendingMessage: TypedContractMethod<[], [boolean], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getSendContext"): TypedContractMethod<[], [[bigint, string]], "view">;
    getFunction(nameOrSignature: "isSendingMessage"): TypedContractMethod<[], [boolean], "view">;
    filters: {};
}

type PacketStruct$1 = {
    nonce: BigNumberish;
    srcEid: BigNumberish;
    sender: AddressLike;
    dstEid: BigNumberish;
    receiver: BytesLike;
    guid: BytesLike;
    message: BytesLike;
};
type MessagingFeeStructOutput$2 = [
    nativeFee: bigint,
    lzTokenFee: bigint
] & {
    nativeFee: bigint;
    lzTokenFee: bigint;
};
type SetConfigParamStruct$2 = {
    eid: BigNumberish;
    configType: BigNumberish;
    config: BytesLike;
};
interface ISendLibInterface extends Interface {
    getFunction(nameOrSignature: "getConfig" | "isSupportedEid" | "messageLibType" | "quote" | "send" | "setConfig" | "setTreasury" | "supportsInterface" | "version" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "getConfig", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [PacketStruct$1, BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "send", values: [PacketStruct$1, BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [AddressLike, SetConfigParamStruct$2[]]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
}
interface ISendLib extends BaseContract {
    connect(runner?: ContractRunner | null): ISendLib;
    waitForDeployment(): Promise<this>;
    interface: ISendLibInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getConfig: TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    messageLibType: TypedContractMethod<[], [bigint], "view">;
    quote: TypedContractMethod<[
        _packet: PacketStruct$1,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        MessagingFeeStructOutput$2
    ], "view">;
    send: TypedContractMethod<[
        _packet: PacketStruct$1,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        [MessagingFeeStructOutput$2, string] & {
            encodedPacket: string;
        }
    ], "nonpayable">;
    setConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _config: SetConfigParamStruct$2[]
    ], [
        void
    ], "nonpayable">;
    setTreasury: TypedContractMethod<[
        _treasury: AddressLike
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    version: TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    withdrawFee: TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawLzTokenFee: TypedContractMethod<[
        _lzToken: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[
        _eid: BigNumberish,
        _oapp: AddressLike,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "messageLibType"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "quote"): TypedContractMethod<[
        _packet: PacketStruct$1,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        MessagingFeeStructOutput$2
    ], "view">;
    getFunction(nameOrSignature: "send"): TypedContractMethod<[
        _packet: PacketStruct$1,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        [MessagingFeeStructOutput$2, string] & {
            encodedPacket: string;
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _config: SetConfigParamStruct$2[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setTreasury"): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawLzTokenFee"): TypedContractMethod<[
        _lzToken: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    filters: {};
}

type index$W_ILayerZeroComposer = ILayerZeroComposer;
type index$W_ILayerZeroEndpointV2 = ILayerZeroEndpointV2;
type index$W_ILayerZeroReceiver = ILayerZeroReceiver;
type index$W_IMessageLib = IMessageLib;
type index$W_IMessageLibManager = IMessageLibManager;
type index$W_IMessagingChannel = IMessagingChannel;
type index$W_IMessagingComposer = IMessagingComposer;
type index$W_IMessagingContext = IMessagingContext;
type index$W_ISendLib = ISendLib;
declare namespace index$W {
  export {
    index$W_ILayerZeroComposer as ILayerZeroComposer,
    index$W_ILayerZeroEndpointV2 as ILayerZeroEndpointV2,
    index$W_ILayerZeroReceiver as ILayerZeroReceiver,
    index$W_IMessageLib as IMessageLib,
    index$W_IMessageLibManager as IMessageLibManager,
    index$W_IMessagingChannel as IMessagingChannel,
    index$W_IMessagingComposer as IMessagingComposer,
    index$W_IMessagingContext as IMessagingContext,
    index$W_ISendLib as ISendLib,
  };
}

interface ErrorsInterface extends Interface {
}
interface Errors extends BaseContract {
    connect(runner?: ContractRunner | null): Errors;
    waitForDeployment(): Promise<this>;
    interface: ErrorsInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    filters: {};
}

interface TransferInterface extends Interface {
}
interface Transfer extends BaseContract {
    connect(runner?: ContractRunner | null): Transfer;
    waitForDeployment(): Promise<this>;
    interface: TransferInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    filters: {};
}

type index$V_Errors = Errors;
type index$V_Transfer = Transfer;
declare namespace index$V {
  export {
    index$V_Errors as Errors,
    index$V_Transfer as Transfer,
  };
}

interface ExecutorOptionsInterface extends Interface {
}
interface ExecutorOptions extends BaseContract {
    connect(runner?: ContractRunner | null): ExecutorOptions;
    waitForDeployment(): Promise<this>;
    interface: ExecutorOptionsInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    filters: {};
}

type index$U_ExecutorOptions = ExecutorOptions;
declare namespace index$U {
  export {
    index$U_ExecutorOptions as ExecutorOptions,
  };
}

interface BlockedMessageLibInterface extends Interface {
    getFunction(nameOrSignature: "isSupportedEid" | "messageLibType" | "supportsInterface" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
interface BlockedMessageLib extends BaseContract {
    connect(runner?: ContractRunner | null): BlockedMessageLib;
    waitForDeployment(): Promise<this>;
    interface: BlockedMessageLibInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    isSupportedEid: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
    messageLibType: TypedContractMethod<[], [bigint], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    version: TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "messageLibType"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    filters: {};
}

type PacketStruct = {
    nonce: BigNumberish;
    srcEid: BigNumberish;
    sender: AddressLike;
    dstEid: BigNumberish;
    receiver: BytesLike;
    guid: BytesLike;
    message: BytesLike;
};
type MessagingFeeStructOutput$1 = [
    nativeFee: bigint,
    lzTokenFee: bigint
] & {
    nativeFee: bigint;
    lzTokenFee: bigint;
};
interface SimpleMessageLibInterface extends Interface {
    getFunction(nameOrSignature: "PACKET_VERSION" | "defaultOption" | "endpoint" | "isSupportedEid" | "localEid" | "lzTokenFee" | "messageLibType" | "nativeFee" | "owner" | "quote" | "renounceOwnership" | "send" | "setDefaultOption" | "setMessagingFee" | "setWhitelistCaller" | "supportsInterface" | "transferOwnership" | "treasury" | "validatePacket" | "version" | "whitelistCaller" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    encodeFunctionData(functionFragment: "PACKET_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultOption", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "localEid", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzTokenFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "messageLibType", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [PacketStruct, BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [PacketStruct, BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "setDefaultOption", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "setMessagingFee", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setWhitelistCaller", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "validatePacket", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "whitelistCaller", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "PACKET_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultOption", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "localEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzTokenFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageLibType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultOption", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMessagingFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWhitelistCaller", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validatePacket", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "whitelistCaller", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent$2 {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface SimpleMessageLib extends BaseContract {
    connect(runner?: ContractRunner | null): SimpleMessageLib;
    waitForDeployment(): Promise<this>;
    interface: SimpleMessageLibInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    PACKET_VERSION: TypedContractMethod<[], [bigint], "view">;
    defaultOption: TypedContractMethod<[], [string], "view">;
    endpoint: TypedContractMethod<[], [string], "view">;
    isSupportedEid: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
    localEid: TypedContractMethod<[], [bigint], "view">;
    lzTokenFee: TypedContractMethod<[], [bigint], "view">;
    messageLibType: TypedContractMethod<[], [bigint], "view">;
    nativeFee: TypedContractMethod<[], [bigint], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    quote: TypedContractMethod<[
        arg0: PacketStruct,
        arg1: BytesLike,
        _payInLzToken: boolean
    ], [
        MessagingFeeStructOutput$1
    ], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    send: TypedContractMethod<[
        _packet: PacketStruct,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        [
            MessagingFeeStructOutput$1,
            string,
            string
        ] & {
            fee: MessagingFeeStructOutput$1;
            encodedPacket: string;
            options: string;
        }
    ], "nonpayable">;
    setDefaultOption: TypedContractMethod<[
        _defaultOption: BytesLike
    ], [
        void
    ], "nonpayable">;
    setMessagingFee: TypedContractMethod<[
        _nativeFee: BigNumberish,
        _lzTokenFee: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setWhitelistCaller: TypedContractMethod<[
        _whitelistCaller: AddressLike
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    treasury: TypedContractMethod<[], [string], "view">;
    validatePacket: TypedContractMethod<[
        packetBytes: BytesLike
    ], [
        void
    ], "nonpayable">;
    version: TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    whitelistCaller: TypedContractMethod<[], [string], "view">;
    withdrawFee: TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    withdrawLzTokenFee: TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "PACKET_VERSION"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "defaultOption"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "endpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "localEid"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "lzTokenFee"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "messageLibType"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "nativeFee"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quote"): TypedContractMethod<[
        arg0: PacketStruct,
        arg1: BytesLike,
        _payInLzToken: boolean
    ], [
        MessagingFeeStructOutput$1
    ], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "send"): TypedContractMethod<[
        _packet: PacketStruct,
        _options: BytesLike,
        _payInLzToken: boolean
    ], [
        [
            MessagingFeeStructOutput$1,
            string,
            string
        ] & {
            fee: MessagingFeeStructOutput$1;
            encodedPacket: string;
            options: string;
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultOption"): TypedContractMethod<[_defaultOption: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setMessagingFee"): TypedContractMethod<[
        _nativeFee: BigNumberish,
        _lzTokenFee: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setWhitelistCaller"): TypedContractMethod<[_whitelistCaller: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "treasury"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "validatePacket"): TypedContractMethod<[packetBytes: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint
        ] & {
            major: bigint;
            minor: bigint;
            endpointVersion: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "whitelistCaller"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "withdrawFee"): TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawLzTokenFee"): TypedContractMethod<[
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$2.InputTuple, OwnershipTransferredEvent$2.OutputTuple, OwnershipTransferredEvent$2.OutputObject>;
    filters: {
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$2.InputTuple, OwnershipTransferredEvent$2.OutputTuple, OwnershipTransferredEvent$2.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$2.InputTuple, OwnershipTransferredEvent$2.OutputTuple, OwnershipTransferredEvent$2.OutputObject>;
    };
}

type index$T_BlockedMessageLib = BlockedMessageLib;
type index$T_SimpleMessageLib = SimpleMessageLib;
declare namespace index$T {
  export {
    index$T_BlockedMessageLib as BlockedMessageLib,
    index$T_SimpleMessageLib as SimpleMessageLib,
    index$U as libs,
  };
}

type OriginStruct = {
    srcEid: BigNumberish;
    sender: BytesLike;
    nonce: BigNumberish;
};
type OriginStructOutput = [
    srcEid: bigint,
    sender: string,
    nonce: bigint
] & {
    srcEid: bigint;
    sender: string;
    nonce: bigint;
};
type MessagingParamsStruct = {
    dstEid: BigNumberish;
    receiver: BytesLike;
    message: BytesLike;
    options: BytesLike;
    payInLzToken: boolean;
};
type MessagingFeeStructOutput = [
    nativeFee: bigint,
    lzTokenFee: bigint
] & {
    nativeFee: bigint;
    lzTokenFee: bigint;
};
type MessagingReceiptStructOutput = [
    guid: string,
    nonce: bigint,
    fee: MessagingFeeStructOutput
] & {
    guid: string;
    nonce: bigint;
    fee: MessagingFeeStructOutput;
};
type SetConfigParamStruct$1 = {
    eid: BigNumberish;
    configType: BigNumberish;
    config: BytesLike;
};
interface EndpointV2Interface extends Interface {
    getFunction(nameOrSignature: "blockedLibrary" | "clear" | "composeQueue" | "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "eid" | "executable" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendContext" | "getSendLibrary" | "hasPayloadHash" | "inboundNonce" | "inboundPayloadHash" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSendingMessage" | "isSupportedEid" | "isValidReceiveLibrary" | "lazyInboundNonce" | "lzCompose" | "lzComposeAlert" | "lzReceive" | "lzReceiveAlert" | "lzToken" | "nativeToken" | "nextGuid" | "outboundNonce" | "owner" | "quote" | "receiveLibraryTimeout" | "recoverToken" | "registerLibrary" | "renounceOwnership" | "send" | "sendCompose" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setLzToken" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary" | "skip" | "transferOwnership" | "verifiable" | "verify"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "ComposeDelivered" | "ComposeSent" | "DefaultReceiveLibrarySet" | "DefaultReceiveLibraryTimeoutSet" | "DefaultSendLibrarySet" | "InboundNonceSkipped" | "LibraryRegistered" | "LzComposeAlert" | "LzReceiveAlert" | "LzTokenSet" | "OwnershipTransferred" | "PacketDelivered" | "PacketSent" | "PacketVerified" | "ReceiveLibrarySet" | "ReceiveLibraryTimoutSet" | "SendLibrarySet"): EventFragment;
    encodeFunctionData(functionFragment: "blockedLibrary", values?: undefined): string;
    encodeFunctionData(functionFragment: "clear", values: [OriginStruct, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "composeQueue", values: [AddressLike, AddressLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "executable", values: [OriginStruct, AddressLike]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [AddressLike, AddressLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "hasPayloadHash", values: [AddressLike, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [AddressLike, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isValidReceiveLibrary", values: [AddressLike, BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "lazyInboundNonce", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        AddressLike,
        AddressLike,
        BytesLike,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "lzComposeAlert", values: [
        AddressLike,
        AddressLike,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [OriginStruct, AddressLike, BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "lzReceiveAlert", values: [
        OriginStruct,
        AddressLike,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "lzToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [MessagingParamsStruct, AddressLike]): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "recoverToken", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [MessagingParamsStruct, AddressLike]): string;
    encodeFunctionData(functionFragment: "sendCompose", values: [AddressLike, BytesLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [AddressLike, SetConfigParamStruct$1[]]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "setLzToken", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "skip", values: [BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "verifiable", values: [OriginStruct, AddressLike]): string;
    encodeFunctionData(functionFragment: "verify", values: [OriginStruct, AddressLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "blockedLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "composeQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lazyInboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzComposeAlert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAlert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "recoverToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}
declare namespace ComposeDeliveredEvent$1 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ];
    type OutputTuple = [
        from: string,
        to: string,
        guid: string,
        index: bigint
    ];
    interface OutputObject {
        from: string;
        to: string;
        guid: string;
        index: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ComposeSentEvent$1 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish,
        message: BytesLike
    ];
    type OutputTuple = [
        from: string,
        to: string,
        guid: string,
        index: bigint,
        message: string
    ];
    interface OutputObject {
        from: string;
        to: string;
        guid: string;
        index: bigint;
        message: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultReceiveLibrarySetEvent$1 {
    type InputTuple = [
        eid: BigNumberish,
        oldLib: AddressLike,
        newLib: AddressLike
    ];
    type OutputTuple = [eid: bigint, oldLib: string, newLib: string];
    interface OutputObject {
        eid: bigint;
        oldLib: string;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultReceiveLibraryTimeoutSetEvent$1 {
    type InputTuple = [
        eid: BigNumberish,
        oldLib: AddressLike,
        expiry: BigNumberish
    ];
    type OutputTuple = [eid: bigint, oldLib: string, expiry: bigint];
    interface OutputObject {
        eid: bigint;
        oldLib: string;
        expiry: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultSendLibrarySetEvent$1 {
    type InputTuple = [eid: BigNumberish, newLib: AddressLike];
    type OutputTuple = [eid: bigint, newLib: string];
    interface OutputObject {
        eid: bigint;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace InboundNonceSkippedEvent$1 {
    type InputTuple = [
        srcEid: BigNumberish,
        sender: BytesLike,
        receiver: AddressLike,
        nonce: BigNumberish
    ];
    type OutputTuple = [
        srcEid: bigint,
        sender: string,
        receiver: string,
        nonce: bigint
    ];
    interface OutputObject {
        srcEid: bigint;
        sender: string;
        receiver: string;
        nonce: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LibraryRegisteredEvent$1 {
    type InputTuple = [newLib: AddressLike];
    type OutputTuple = [newLib: string];
    interface OutputObject {
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LzComposeAlertEvent$1 {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        executor: AddressLike,
        guid: BytesLike,
        index: BigNumberish,
        gas: BigNumberish,
        value: BigNumberish,
        message: BytesLike,
        extraData: BytesLike,
        reason: BytesLike
    ];
    type OutputTuple = [
        from: string,
        to: string,
        executor: string,
        guid: string,
        index: bigint,
        gas: bigint,
        value: bigint,
        message: string,
        extraData: string,
        reason: string
    ];
    interface OutputObject {
        from: string;
        to: string;
        executor: string;
        guid: string;
        index: bigint;
        gas: bigint;
        value: bigint;
        message: string;
        extraData: string;
        reason: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LzReceiveAlertEvent {
    type InputTuple = [
        receiver: AddressLike,
        executor: AddressLike,
        origin: OriginStruct,
        guid: BytesLike,
        gas: BigNumberish,
        value: BigNumberish,
        message: BytesLike,
        extraData: BytesLike,
        reason: BytesLike
    ];
    type OutputTuple = [
        receiver: string,
        executor: string,
        origin: OriginStructOutput,
        guid: string,
        gas: bigint,
        value: bigint,
        message: string,
        extraData: string,
        reason: string
    ];
    interface OutputObject {
        receiver: string;
        executor: string;
        origin: OriginStructOutput;
        guid: string;
        gas: bigint;
        value: bigint;
        message: string;
        extraData: string;
        reason: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LzTokenSetEvent {
    type InputTuple = [token: AddressLike];
    type OutputTuple = [token: string];
    interface OutputObject {
        token: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$1 {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PacketDeliveredEvent {
    type InputTuple = [origin: OriginStruct, receiver: AddressLike];
    type OutputTuple = [origin: OriginStructOutput, receiver: string];
    interface OutputObject {
        origin: OriginStructOutput;
        receiver: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PacketSentEvent {
    type InputTuple = [
        encodedPayload: BytesLike,
        options: BytesLike,
        sendLibrary: AddressLike
    ];
    type OutputTuple = [
        encodedPayload: string,
        options: string,
        sendLibrary: string
    ];
    interface OutputObject {
        encodedPayload: string;
        options: string;
        sendLibrary: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace PacketVerifiedEvent {
    type InputTuple = [
        origin: OriginStruct,
        receiver: AddressLike,
        payloadHash: BytesLike
    ];
    type OutputTuple = [
        origin: OriginStructOutput,
        receiver: string,
        payloadHash: string
    ];
    interface OutputObject {
        origin: OriginStructOutput;
        receiver: string;
        payloadHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveLibrarySetEvent$1 {
    type InputTuple = [
        receiver: AddressLike,
        eid: BigNumberish,
        oldLib: AddressLike,
        newLib: AddressLike
    ];
    type OutputTuple = [
        receiver: string,
        eid: bigint,
        oldLib: string,
        newLib: string
    ];
    interface OutputObject {
        receiver: string;
        eid: bigint;
        oldLib: string;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveLibraryTimoutSetEvent$1 {
    type InputTuple = [
        receiver: AddressLike,
        eid: BigNumberish,
        oldLib: AddressLike,
        timeout: BigNumberish
    ];
    type OutputTuple = [
        receiver: string,
        eid: bigint,
        oldLib: string,
        timeout: bigint
    ];
    interface OutputObject {
        receiver: string;
        eid: bigint;
        oldLib: string;
        timeout: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SendLibrarySetEvent$1 {
    type InputTuple = [
        sender: AddressLike,
        eid: BigNumberish,
        newLib: AddressLike
    ];
    type OutputTuple = [sender: string, eid: bigint, newLib: string];
    interface OutputObject {
        sender: string;
        eid: bigint;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface EndpointV2 extends BaseContract {
    connect(runner?: ContractRunner | null): EndpointV2;
    waitForDeployment(): Promise<this>;
    interface: EndpointV2Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    blockedLibrary: TypedContractMethod<[], [string], "view">;
    clear: TypedContractMethod<[
        _origin: OriginStruct,
        _guid: BytesLike,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    composeQueue: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ], [
        string
    ], "view">;
    defaultReceiveLibrary: TypedContractMethod<[
        srcEid: BigNumberish
    ], [
        string
    ], "view">;
    defaultReceiveLibraryTimeout: TypedContractMethod<[
        srcEid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    defaultSendLibrary: TypedContractMethod<[
        dstEid: BigNumberish
    ], [
        string
    ], "view">;
    eid: TypedContractMethod<[], [bigint], "view">;
    executable: TypedContractMethod<[
        _origin: OriginStruct,
        _receiver: AddressLike
    ], [
        bigint
    ], "view">;
    getConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _lib: AddressLike,
        _eid: BigNumberish,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getReceiveLibrary: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish
    ], [
        [string, boolean] & {
            lib: string;
            isDefault: boolean;
        }
    ], "view">;
    getRegisteredLibraries: TypedContractMethod<[], [string[]], "view">;
    getSendContext: TypedContractMethod<[], [[bigint, string]], "view">;
    getSendLibrary: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish
    ], [
        string
    ], "view">;
    hasPayloadHash: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        boolean
    ], "view">;
    inboundNonce: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    inboundPayloadHash: TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish,
        sender: BytesLike,
        inboundNonce: BigNumberish
    ], [
        string
    ], "view">;
    isDefaultSendLibrary: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish
    ], [
        boolean
    ], "view">;
    isRegisteredLibrary: TypedContractMethod<[
        lib: AddressLike
    ], [
        boolean
    ], "view">;
    isSendingMessage: TypedContractMethod<[], [boolean], "view">;
    isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    isValidReceiveLibrary: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _actualReceiveLib: AddressLike
    ], [
        boolean
    ], "view">;
    lazyInboundNonce: TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish,
        sender: BytesLike
    ], [
        bigint
    ], "view">;
    lzCompose: TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    lzComposeAlert: TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _gas: BigNumberish,
        _value: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike,
        _reason: BytesLike
    ], [
        void
    ], "nonpayable">;
    lzReceive: TypedContractMethod<[
        _origin: OriginStruct,
        _receiver: AddressLike,
        _guid: BytesLike,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    lzReceiveAlert: TypedContractMethod<[
        _origin: OriginStruct,
        _receiver: AddressLike,
        _guid: BytesLike,
        _gas: BigNumberish,
        _value: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike,
        _reason: BytesLike
    ], [
        void
    ], "nonpayable">;
    lzToken: TypedContractMethod<[], [string], "view">;
    nativeToken: TypedContractMethod<[], [string], "view">;
    nextGuid: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        string
    ], "view">;
    outboundNonce: TypedContractMethod<[
        sender: AddressLike,
        dstEid: BigNumberish,
        receiver: BytesLike
    ], [
        bigint
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    quote: TypedContractMethod<[
        _params: MessagingParamsStruct,
        _sender: AddressLike
    ], [
        MessagingFeeStructOutput
    ], "view">;
    receiveLibraryTimeout: TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    recoverToken: TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    registerLibrary: TypedContractMethod<[
        _lib: AddressLike
    ], [
        void
    ], "nonpayable">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    send: TypedContractMethod<[
        _params: MessagingParamsStruct,
        _refundAddress: AddressLike
    ], [
        MessagingReceiptStructOutput
    ], "payable">;
    sendCompose: TypedContractMethod<[
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    setConfig: TypedContractMethod<[
        _lib: AddressLike,
        _params: SetConfigParamStruct$1[]
    ], [
        void
    ], "nonpayable">;
    setDefaultReceiveLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setDefaultReceiveLibraryTimeout: TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setDefaultSendLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    setLzToken: TypedContractMethod<[
        _lzToken: AddressLike
    ], [
        void
    ], "nonpayable">;
    setReceiveLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setReceiveLibraryTimeout: TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setSendLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    skip: TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    verifiable: TypedContractMethod<[
        _origin: OriginStruct,
        _receiver: AddressLike
    ], [
        boolean
    ], "view">;
    verify: TypedContractMethod<[
        _origin: OriginStruct,
        _receiver: AddressLike,
        _payloadHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "blockedLibrary"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "clear"): TypedContractMethod<[
        _origin: OriginStruct,
        _guid: BytesLike,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "composeQueue"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "defaultReceiveLibrary"): TypedContractMethod<[srcEid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "defaultReceiveLibraryTimeout"): TypedContractMethod<[
        srcEid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "defaultSendLibrary"): TypedContractMethod<[dstEid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "eid"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "executable"): TypedContractMethod<[
        _origin: OriginStruct,
        _receiver: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _lib: AddressLike,
        _eid: BigNumberish,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "getReceiveLibrary"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish
    ], [
        [string, boolean] & {
            lib: string;
            isDefault: boolean;
        }
    ], "view">;
    getFunction(nameOrSignature: "getRegisteredLibraries"): TypedContractMethod<[], [string[]], "view">;
    getFunction(nameOrSignature: "getSendContext"): TypedContractMethod<[], [[bigint, string]], "view">;
    getFunction(nameOrSignature: "getSendLibrary"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "hasPayloadHash"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "inboundNonce"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "inboundPayloadHash"): TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish,
        sender: BytesLike,
        inboundNonce: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "isDefaultSendLibrary"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "isRegisteredLibrary"): TypedContractMethod<[lib: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "isSendingMessage"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "isValidReceiveLibrary"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _actualReceiveLib: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "lazyInboundNonce"): TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish,
        sender: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "lzCompose"): TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "lzComposeAlert"): TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _gas: BigNumberish,
        _value: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike,
        _reason: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "lzReceive"): TypedContractMethod<[
        _origin: OriginStruct,
        _receiver: AddressLike,
        _guid: BytesLike,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "lzReceiveAlert"): TypedContractMethod<[
        _origin: OriginStruct,
        _receiver: AddressLike,
        _guid: BytesLike,
        _gas: BigNumberish,
        _value: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike,
        _reason: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "lzToken"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "nativeToken"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "nextGuid"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "outboundNonce"): TypedContractMethod<[
        sender: AddressLike,
        dstEid: BigNumberish,
        receiver: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "quote"): TypedContractMethod<[
        _params: MessagingParamsStruct,
        _sender: AddressLike
    ], [
        MessagingFeeStructOutput
    ], "view">;
    getFunction(nameOrSignature: "receiveLibraryTimeout"): TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "recoverToken"): TypedContractMethod<[
        _token: AddressLike,
        _to: AddressLike,
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "registerLibrary"): TypedContractMethod<[_lib: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "send"): TypedContractMethod<[
        _params: MessagingParamsStruct,
        _refundAddress: AddressLike
    ], [
        MessagingReceiptStructOutput
    ], "payable">;
    getFunction(nameOrSignature: "sendCompose"): TypedContractMethod<[
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        _lib: AddressLike,
        _params: SetConfigParamStruct$1[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultReceiveLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultReceiveLibraryTimeout"): TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultSendLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setLzToken"): TypedContractMethod<[_lzToken: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setReceiveLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setReceiveLibraryTimeout"): TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setSendLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "skip"): TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "verifiable"): TypedContractMethod<[
        _origin: OriginStruct,
        _receiver: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "verify"): TypedContractMethod<[
        _origin: OriginStruct,
        _receiver: AddressLike,
        _payloadHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "ComposeDelivered"): TypedContractEvent<ComposeDeliveredEvent$1.InputTuple, ComposeDeliveredEvent$1.OutputTuple, ComposeDeliveredEvent$1.OutputObject>;
    getEvent(key: "ComposeSent"): TypedContractEvent<ComposeSentEvent$1.InputTuple, ComposeSentEvent$1.OutputTuple, ComposeSentEvent$1.OutputObject>;
    getEvent(key: "DefaultReceiveLibrarySet"): TypedContractEvent<DefaultReceiveLibrarySetEvent$1.InputTuple, DefaultReceiveLibrarySetEvent$1.OutputTuple, DefaultReceiveLibrarySetEvent$1.OutputObject>;
    getEvent(key: "DefaultReceiveLibraryTimeoutSet"): TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent$1.InputTuple, DefaultReceiveLibraryTimeoutSetEvent$1.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent$1.OutputObject>;
    getEvent(key: "DefaultSendLibrarySet"): TypedContractEvent<DefaultSendLibrarySetEvent$1.InputTuple, DefaultSendLibrarySetEvent$1.OutputTuple, DefaultSendLibrarySetEvent$1.OutputObject>;
    getEvent(key: "InboundNonceSkipped"): TypedContractEvent<InboundNonceSkippedEvent$1.InputTuple, InboundNonceSkippedEvent$1.OutputTuple, InboundNonceSkippedEvent$1.OutputObject>;
    getEvent(key: "LibraryRegistered"): TypedContractEvent<LibraryRegisteredEvent$1.InputTuple, LibraryRegisteredEvent$1.OutputTuple, LibraryRegisteredEvent$1.OutputObject>;
    getEvent(key: "LzComposeAlert"): TypedContractEvent<LzComposeAlertEvent$1.InputTuple, LzComposeAlertEvent$1.OutputTuple, LzComposeAlertEvent$1.OutputObject>;
    getEvent(key: "LzReceiveAlert"): TypedContractEvent<LzReceiveAlertEvent.InputTuple, LzReceiveAlertEvent.OutputTuple, LzReceiveAlertEvent.OutputObject>;
    getEvent(key: "LzTokenSet"): TypedContractEvent<LzTokenSetEvent.InputTuple, LzTokenSetEvent.OutputTuple, LzTokenSetEvent.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$1.InputTuple, OwnershipTransferredEvent$1.OutputTuple, OwnershipTransferredEvent$1.OutputObject>;
    getEvent(key: "PacketDelivered"): TypedContractEvent<PacketDeliveredEvent.InputTuple, PacketDeliveredEvent.OutputTuple, PacketDeliveredEvent.OutputObject>;
    getEvent(key: "PacketSent"): TypedContractEvent<PacketSentEvent.InputTuple, PacketSentEvent.OutputTuple, PacketSentEvent.OutputObject>;
    getEvent(key: "PacketVerified"): TypedContractEvent<PacketVerifiedEvent.InputTuple, PacketVerifiedEvent.OutputTuple, PacketVerifiedEvent.OutputObject>;
    getEvent(key: "ReceiveLibrarySet"): TypedContractEvent<ReceiveLibrarySetEvent$1.InputTuple, ReceiveLibrarySetEvent$1.OutputTuple, ReceiveLibrarySetEvent$1.OutputObject>;
    getEvent(key: "ReceiveLibraryTimoutSet"): TypedContractEvent<ReceiveLibraryTimoutSetEvent$1.InputTuple, ReceiveLibraryTimoutSetEvent$1.OutputTuple, ReceiveLibraryTimoutSetEvent$1.OutputObject>;
    getEvent(key: "SendLibrarySet"): TypedContractEvent<SendLibrarySetEvent$1.InputTuple, SendLibrarySetEvent$1.OutputTuple, SendLibrarySetEvent$1.OutputObject>;
    filters: {
        "ComposeDelivered(address,address,bytes32,uint16)": TypedContractEvent<ComposeDeliveredEvent$1.InputTuple, ComposeDeliveredEvent$1.OutputTuple, ComposeDeliveredEvent$1.OutputObject>;
        ComposeDelivered: TypedContractEvent<ComposeDeliveredEvent$1.InputTuple, ComposeDeliveredEvent$1.OutputTuple, ComposeDeliveredEvent$1.OutputObject>;
        "ComposeSent(address,address,bytes32,uint16,bytes)": TypedContractEvent<ComposeSentEvent$1.InputTuple, ComposeSentEvent$1.OutputTuple, ComposeSentEvent$1.OutputObject>;
        ComposeSent: TypedContractEvent<ComposeSentEvent$1.InputTuple, ComposeSentEvent$1.OutputTuple, ComposeSentEvent$1.OutputObject>;
        "DefaultReceiveLibrarySet(uint32,address,address)": TypedContractEvent<DefaultReceiveLibrarySetEvent$1.InputTuple, DefaultReceiveLibrarySetEvent$1.OutputTuple, DefaultReceiveLibrarySetEvent$1.OutputObject>;
        DefaultReceiveLibrarySet: TypedContractEvent<DefaultReceiveLibrarySetEvent$1.InputTuple, DefaultReceiveLibrarySetEvent$1.OutputTuple, DefaultReceiveLibrarySetEvent$1.OutputObject>;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent$1.InputTuple, DefaultReceiveLibraryTimeoutSetEvent$1.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent$1.OutputObject>;
        DefaultReceiveLibraryTimeoutSet: TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent$1.InputTuple, DefaultReceiveLibraryTimeoutSetEvent$1.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent$1.OutputObject>;
        "DefaultSendLibrarySet(uint32,address)": TypedContractEvent<DefaultSendLibrarySetEvent$1.InputTuple, DefaultSendLibrarySetEvent$1.OutputTuple, DefaultSendLibrarySetEvent$1.OutputObject>;
        DefaultSendLibrarySet: TypedContractEvent<DefaultSendLibrarySetEvent$1.InputTuple, DefaultSendLibrarySetEvent$1.OutputTuple, DefaultSendLibrarySetEvent$1.OutputObject>;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": TypedContractEvent<InboundNonceSkippedEvent$1.InputTuple, InboundNonceSkippedEvent$1.OutputTuple, InboundNonceSkippedEvent$1.OutputObject>;
        InboundNonceSkipped: TypedContractEvent<InboundNonceSkippedEvent$1.InputTuple, InboundNonceSkippedEvent$1.OutputTuple, InboundNonceSkippedEvent$1.OutputObject>;
        "LibraryRegistered(address)": TypedContractEvent<LibraryRegisteredEvent$1.InputTuple, LibraryRegisteredEvent$1.OutputTuple, LibraryRegisteredEvent$1.OutputObject>;
        LibraryRegistered: TypedContractEvent<LibraryRegisteredEvent$1.InputTuple, LibraryRegisteredEvent$1.OutputTuple, LibraryRegisteredEvent$1.OutputObject>;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": TypedContractEvent<LzComposeAlertEvent$1.InputTuple, LzComposeAlertEvent$1.OutputTuple, LzComposeAlertEvent$1.OutputObject>;
        LzComposeAlert: TypedContractEvent<LzComposeAlertEvent$1.InputTuple, LzComposeAlertEvent$1.OutputTuple, LzComposeAlertEvent$1.OutputObject>;
        "LzReceiveAlert(address,address,tuple,bytes32,uint256,uint256,bytes,bytes,bytes)": TypedContractEvent<LzReceiveAlertEvent.InputTuple, LzReceiveAlertEvent.OutputTuple, LzReceiveAlertEvent.OutputObject>;
        LzReceiveAlert: TypedContractEvent<LzReceiveAlertEvent.InputTuple, LzReceiveAlertEvent.OutputTuple, LzReceiveAlertEvent.OutputObject>;
        "LzTokenSet(address)": TypedContractEvent<LzTokenSetEvent.InputTuple, LzTokenSetEvent.OutputTuple, LzTokenSetEvent.OutputObject>;
        LzTokenSet: TypedContractEvent<LzTokenSetEvent.InputTuple, LzTokenSetEvent.OutputTuple, LzTokenSetEvent.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$1.InputTuple, OwnershipTransferredEvent$1.OutputTuple, OwnershipTransferredEvent$1.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$1.InputTuple, OwnershipTransferredEvent$1.OutputTuple, OwnershipTransferredEvent$1.OutputObject>;
        "PacketDelivered(tuple,address)": TypedContractEvent<PacketDeliveredEvent.InputTuple, PacketDeliveredEvent.OutputTuple, PacketDeliveredEvent.OutputObject>;
        PacketDelivered: TypedContractEvent<PacketDeliveredEvent.InputTuple, PacketDeliveredEvent.OutputTuple, PacketDeliveredEvent.OutputObject>;
        "PacketSent(bytes,bytes,address)": TypedContractEvent<PacketSentEvent.InputTuple, PacketSentEvent.OutputTuple, PacketSentEvent.OutputObject>;
        PacketSent: TypedContractEvent<PacketSentEvent.InputTuple, PacketSentEvent.OutputTuple, PacketSentEvent.OutputObject>;
        "PacketVerified(tuple,address,bytes32)": TypedContractEvent<PacketVerifiedEvent.InputTuple, PacketVerifiedEvent.OutputTuple, PacketVerifiedEvent.OutputObject>;
        PacketVerified: TypedContractEvent<PacketVerifiedEvent.InputTuple, PacketVerifiedEvent.OutputTuple, PacketVerifiedEvent.OutputObject>;
        "ReceiveLibrarySet(address,uint32,address,address)": TypedContractEvent<ReceiveLibrarySetEvent$1.InputTuple, ReceiveLibrarySetEvent$1.OutputTuple, ReceiveLibrarySetEvent$1.OutputObject>;
        ReceiveLibrarySet: TypedContractEvent<ReceiveLibrarySetEvent$1.InputTuple, ReceiveLibrarySetEvent$1.OutputTuple, ReceiveLibrarySetEvent$1.OutputObject>;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)": TypedContractEvent<ReceiveLibraryTimoutSetEvent$1.InputTuple, ReceiveLibraryTimoutSetEvent$1.OutputTuple, ReceiveLibraryTimoutSetEvent$1.OutputObject>;
        ReceiveLibraryTimoutSet: TypedContractEvent<ReceiveLibraryTimoutSetEvent$1.InputTuple, ReceiveLibraryTimoutSetEvent$1.OutputTuple, ReceiveLibraryTimoutSetEvent$1.OutputObject>;
        "SendLibrarySet(address,uint32,address)": TypedContractEvent<SendLibrarySetEvent$1.InputTuple, SendLibrarySetEvent$1.OutputTuple, SendLibrarySetEvent$1.OutputObject>;
        SendLibrarySet: TypedContractEvent<SendLibrarySetEvent$1.InputTuple, SendLibrarySetEvent$1.OutputTuple, SendLibrarySetEvent$1.OutputObject>;
    };
}

type SetConfigParamStruct = {
    eid: BigNumberish;
    configType: BigNumberish;
    config: BytesLike;
};
interface MessageLibManagerInterface extends Interface {
    getFunction(nameOrSignature: "blockedLibrary" | "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendLibrary" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSupportedEid" | "isValidReceiveLibrary" | "owner" | "receiveLibraryTimeout" | "registerLibrary" | "renounceOwnership" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary" | "transferOwnership"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibrarySet" | "DefaultReceiveLibraryTimeoutSet" | "DefaultSendLibrarySet" | "LibraryRegistered" | "OwnershipTransferred" | "ReceiveLibrarySet" | "ReceiveLibraryTimoutSet" | "SendLibrarySet"): EventFragment;
    encodeFunctionData(functionFragment: "blockedLibrary", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [AddressLike, AddressLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isValidReceiveLibrary", values: [AddressLike, BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setConfig", values: [AddressLike, SetConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [BigNumberish, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "blockedLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace DefaultReceiveLibrarySetEvent {
    type InputTuple = [
        eid: BigNumberish,
        oldLib: AddressLike,
        newLib: AddressLike
    ];
    type OutputTuple = [eid: bigint, oldLib: string, newLib: string];
    interface OutputObject {
        eid: bigint;
        oldLib: string;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultReceiveLibraryTimeoutSetEvent {
    type InputTuple = [
        eid: BigNumberish,
        oldLib: AddressLike,
        expiry: BigNumberish
    ];
    type OutputTuple = [eid: bigint, oldLib: string, expiry: bigint];
    interface OutputObject {
        eid: bigint;
        oldLib: string;
        expiry: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace DefaultSendLibrarySetEvent {
    type InputTuple = [eid: BigNumberish, newLib: AddressLike];
    type OutputTuple = [eid: bigint, newLib: string];
    interface OutputObject {
        eid: bigint;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LibraryRegisteredEvent {
    type InputTuple = [newLib: AddressLike];
    type OutputTuple = [newLib: string];
    interface OutputObject {
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveLibrarySetEvent {
    type InputTuple = [
        receiver: AddressLike,
        eid: BigNumberish,
        oldLib: AddressLike,
        newLib: AddressLike
    ];
    type OutputTuple = [
        receiver: string,
        eid: bigint,
        oldLib: string,
        newLib: string
    ];
    interface OutputObject {
        receiver: string;
        eid: bigint;
        oldLib: string;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ReceiveLibraryTimoutSetEvent {
    type InputTuple = [
        receiver: AddressLike,
        eid: BigNumberish,
        oldLib: AddressLike,
        timeout: BigNumberish
    ];
    type OutputTuple = [
        receiver: string,
        eid: bigint,
        oldLib: string,
        timeout: bigint
    ];
    interface OutputObject {
        receiver: string;
        eid: bigint;
        oldLib: string;
        timeout: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace SendLibrarySetEvent {
    type InputTuple = [
        sender: AddressLike,
        eid: BigNumberish,
        newLib: AddressLike
    ];
    type OutputTuple = [sender: string, eid: bigint, newLib: string];
    interface OutputObject {
        sender: string;
        eid: bigint;
        newLib: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface MessageLibManager extends BaseContract {
    connect(runner?: ContractRunner | null): MessageLibManager;
    waitForDeployment(): Promise<this>;
    interface: MessageLibManagerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    blockedLibrary: TypedContractMethod<[], [string], "view">;
    defaultReceiveLibrary: TypedContractMethod<[
        srcEid: BigNumberish
    ], [
        string
    ], "view">;
    defaultReceiveLibraryTimeout: TypedContractMethod<[
        srcEid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    defaultSendLibrary: TypedContractMethod<[
        dstEid: BigNumberish
    ], [
        string
    ], "view">;
    getConfig: TypedContractMethod<[
        _oapp: AddressLike,
        _lib: AddressLike,
        _eid: BigNumberish,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getReceiveLibrary: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish
    ], [
        [string, boolean] & {
            lib: string;
            isDefault: boolean;
        }
    ], "view">;
    getRegisteredLibraries: TypedContractMethod<[], [string[]], "view">;
    getSendLibrary: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish
    ], [
        string
    ], "view">;
    isDefaultSendLibrary: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish
    ], [
        boolean
    ], "view">;
    isRegisteredLibrary: TypedContractMethod<[
        lib: AddressLike
    ], [
        boolean
    ], "view">;
    isSupportedEid: TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    isValidReceiveLibrary: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _actualReceiveLib: AddressLike
    ], [
        boolean
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    receiveLibraryTimeout: TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    registerLibrary: TypedContractMethod<[
        _lib: AddressLike
    ], [
        void
    ], "nonpayable">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setConfig: TypedContractMethod<[
        _lib: AddressLike,
        _params: SetConfigParamStruct[]
    ], [
        void
    ], "nonpayable">;
    setDefaultReceiveLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setDefaultReceiveLibraryTimeout: TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setDefaultSendLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    setReceiveLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setReceiveLibraryTimeout: TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setSendLibrary: TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "blockedLibrary"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "defaultReceiveLibrary"): TypedContractMethod<[srcEid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "defaultReceiveLibraryTimeout"): TypedContractMethod<[
        srcEid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "defaultSendLibrary"): TypedContractMethod<[dstEid: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[
        _oapp: AddressLike,
        _lib: AddressLike,
        _eid: BigNumberish,
        _configType: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "getReceiveLibrary"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish
    ], [
        [string, boolean] & {
            lib: string;
            isDefault: boolean;
        }
    ], "view">;
    getFunction(nameOrSignature: "getRegisteredLibraries"): TypedContractMethod<[], [string[]], "view">;
    getFunction(nameOrSignature: "getSendLibrary"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "isDefaultSendLibrary"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "isRegisteredLibrary"): TypedContractMethod<[lib: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "isSupportedEid"): TypedContractMethod<[_eid: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "isValidReceiveLibrary"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _actualReceiveLib: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "receiveLibraryTimeout"): TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish
    ], [
        [string, bigint] & {
            lib: string;
            expiry: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "registerLibrary"): TypedContractMethod<[_lib: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        _lib: AddressLike,
        _params: SetConfigParamStruct[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultReceiveLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultReceiveLibraryTimeout"): TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDefaultSendLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setReceiveLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike,
        _gracePeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setReceiveLibraryTimeout"): TypedContractMethod<[
        _eid: BigNumberish,
        _lib: AddressLike,
        _expiry: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setSendLibrary"): TypedContractMethod<[
        _eid: BigNumberish,
        _newLib: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getEvent(key: "DefaultReceiveLibrarySet"): TypedContractEvent<DefaultReceiveLibrarySetEvent.InputTuple, DefaultReceiveLibrarySetEvent.OutputTuple, DefaultReceiveLibrarySetEvent.OutputObject>;
    getEvent(key: "DefaultReceiveLibraryTimeoutSet"): TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent.InputTuple, DefaultReceiveLibraryTimeoutSetEvent.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent.OutputObject>;
    getEvent(key: "DefaultSendLibrarySet"): TypedContractEvent<DefaultSendLibrarySetEvent.InputTuple, DefaultSendLibrarySetEvent.OutputTuple, DefaultSendLibrarySetEvent.OutputObject>;
    getEvent(key: "LibraryRegistered"): TypedContractEvent<LibraryRegisteredEvent.InputTuple, LibraryRegisteredEvent.OutputTuple, LibraryRegisteredEvent.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    getEvent(key: "ReceiveLibrarySet"): TypedContractEvent<ReceiveLibrarySetEvent.InputTuple, ReceiveLibrarySetEvent.OutputTuple, ReceiveLibrarySetEvent.OutputObject>;
    getEvent(key: "ReceiveLibraryTimoutSet"): TypedContractEvent<ReceiveLibraryTimoutSetEvent.InputTuple, ReceiveLibraryTimoutSetEvent.OutputTuple, ReceiveLibraryTimoutSetEvent.OutputObject>;
    getEvent(key: "SendLibrarySet"): TypedContractEvent<SendLibrarySetEvent.InputTuple, SendLibrarySetEvent.OutputTuple, SendLibrarySetEvent.OutputObject>;
    filters: {
        "DefaultReceiveLibrarySet(uint32,address,address)": TypedContractEvent<DefaultReceiveLibrarySetEvent.InputTuple, DefaultReceiveLibrarySetEvent.OutputTuple, DefaultReceiveLibrarySetEvent.OutputObject>;
        DefaultReceiveLibrarySet: TypedContractEvent<DefaultReceiveLibrarySetEvent.InputTuple, DefaultReceiveLibrarySetEvent.OutputTuple, DefaultReceiveLibrarySetEvent.OutputObject>;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent.InputTuple, DefaultReceiveLibraryTimeoutSetEvent.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent.OutputObject>;
        DefaultReceiveLibraryTimeoutSet: TypedContractEvent<DefaultReceiveLibraryTimeoutSetEvent.InputTuple, DefaultReceiveLibraryTimeoutSetEvent.OutputTuple, DefaultReceiveLibraryTimeoutSetEvent.OutputObject>;
        "DefaultSendLibrarySet(uint32,address)": TypedContractEvent<DefaultSendLibrarySetEvent.InputTuple, DefaultSendLibrarySetEvent.OutputTuple, DefaultSendLibrarySetEvent.OutputObject>;
        DefaultSendLibrarySet: TypedContractEvent<DefaultSendLibrarySetEvent.InputTuple, DefaultSendLibrarySetEvent.OutputTuple, DefaultSendLibrarySetEvent.OutputObject>;
        "LibraryRegistered(address)": TypedContractEvent<LibraryRegisteredEvent.InputTuple, LibraryRegisteredEvent.OutputTuple, LibraryRegisteredEvent.OutputObject>;
        LibraryRegistered: TypedContractEvent<LibraryRegisteredEvent.InputTuple, LibraryRegisteredEvent.OutputTuple, LibraryRegisteredEvent.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
        "ReceiveLibrarySet(address,uint32,address,address)": TypedContractEvent<ReceiveLibrarySetEvent.InputTuple, ReceiveLibrarySetEvent.OutputTuple, ReceiveLibrarySetEvent.OutputObject>;
        ReceiveLibrarySet: TypedContractEvent<ReceiveLibrarySetEvent.InputTuple, ReceiveLibrarySetEvent.OutputTuple, ReceiveLibrarySetEvent.OutputObject>;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)": TypedContractEvent<ReceiveLibraryTimoutSetEvent.InputTuple, ReceiveLibraryTimoutSetEvent.OutputTuple, ReceiveLibraryTimoutSetEvent.OutputObject>;
        ReceiveLibraryTimoutSet: TypedContractEvent<ReceiveLibraryTimoutSetEvent.InputTuple, ReceiveLibraryTimoutSetEvent.OutputTuple, ReceiveLibraryTimoutSetEvent.OutputObject>;
        "SendLibrarySet(address,uint32,address)": TypedContractEvent<SendLibrarySetEvent.InputTuple, SendLibrarySetEvent.OutputTuple, SendLibrarySetEvent.OutputObject>;
        SendLibrarySet: TypedContractEvent<SendLibrarySetEvent.InputTuple, SendLibrarySetEvent.OutputTuple, SendLibrarySetEvent.OutputObject>;
    };
}

interface MessagingChannelInterface extends Interface {
    getFunction(nameOrSignature: "eid" | "hasPayloadHash" | "inboundNonce" | "inboundPayloadHash" | "lazyInboundNonce" | "nextGuid" | "outboundNonce" | "skip"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "InboundNonceSkipped"): EventFragment;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "hasPayloadHash", values: [AddressLike, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [AddressLike, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "lazyInboundNonce", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "skip", values: [BigNumberish, BytesLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lazyInboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
}
declare namespace InboundNonceSkippedEvent {
    type InputTuple = [
        srcEid: BigNumberish,
        sender: BytesLike,
        receiver: AddressLike,
        nonce: BigNumberish
    ];
    type OutputTuple = [
        srcEid: bigint,
        sender: string,
        receiver: string,
        nonce: bigint
    ];
    interface OutputObject {
        srcEid: bigint;
        sender: string;
        receiver: string;
        nonce: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface MessagingChannel extends BaseContract {
    connect(runner?: ContractRunner | null): MessagingChannel;
    waitForDeployment(): Promise<this>;
    interface: MessagingChannelInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    eid: TypedContractMethod<[], [bigint], "view">;
    hasPayloadHash: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        boolean
    ], "view">;
    inboundNonce: TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    inboundPayloadHash: TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish,
        sender: BytesLike,
        inboundNonce: BigNumberish
    ], [
        string
    ], "view">;
    lazyInboundNonce: TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish,
        sender: BytesLike
    ], [
        bigint
    ], "view">;
    nextGuid: TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        string
    ], "view">;
    outboundNonce: TypedContractMethod<[
        sender: AddressLike,
        dstEid: BigNumberish,
        receiver: BytesLike
    ], [
        bigint
    ], "view">;
    skip: TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "eid"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "hasPayloadHash"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "inboundNonce"): TypedContractMethod<[
        _receiver: AddressLike,
        _srcEid: BigNumberish,
        _sender: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "inboundPayloadHash"): TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish,
        sender: BytesLike,
        inboundNonce: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "lazyInboundNonce"): TypedContractMethod<[
        receiver: AddressLike,
        srcEid: BigNumberish,
        sender: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "nextGuid"): TypedContractMethod<[
        _sender: AddressLike,
        _dstEid: BigNumberish,
        _receiver: BytesLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "outboundNonce"): TypedContractMethod<[
        sender: AddressLike,
        dstEid: BigNumberish,
        receiver: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "skip"): TypedContractMethod<[
        _srcEid: BigNumberish,
        _sender: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "InboundNonceSkipped"): TypedContractEvent<InboundNonceSkippedEvent.InputTuple, InboundNonceSkippedEvent.OutputTuple, InboundNonceSkippedEvent.OutputObject>;
    filters: {
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": TypedContractEvent<InboundNonceSkippedEvent.InputTuple, InboundNonceSkippedEvent.OutputTuple, InboundNonceSkippedEvent.OutputObject>;
        InboundNonceSkipped: TypedContractEvent<InboundNonceSkippedEvent.InputTuple, InboundNonceSkippedEvent.OutputTuple, InboundNonceSkippedEvent.OutputObject>;
    };
}

interface MessagingComposerInterface extends Interface {
    getFunction(nameOrSignature: "composeQueue" | "lzCompose" | "lzComposeAlert" | "sendCompose"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "ComposeDelivered" | "ComposeSent" | "LzComposeAlert"): EventFragment;
    encodeFunctionData(functionFragment: "composeQueue", values: [AddressLike, AddressLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        AddressLike,
        AddressLike,
        BytesLike,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "lzComposeAlert", values: [
        AddressLike,
        AddressLike,
        BytesLike,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "sendCompose", values: [AddressLike, BytesLike, BigNumberish, BytesLike]): string;
    decodeFunctionResult(functionFragment: "composeQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzComposeAlert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendCompose", data: BytesLike): Result;
}
declare namespace ComposeDeliveredEvent {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ];
    type OutputTuple = [
        from: string,
        to: string,
        guid: string,
        index: bigint
    ];
    interface OutputObject {
        from: string;
        to: string;
        guid: string;
        index: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace ComposeSentEvent {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish,
        message: BytesLike
    ];
    type OutputTuple = [
        from: string,
        to: string,
        guid: string,
        index: bigint,
        message: string
    ];
    interface OutputObject {
        from: string;
        to: string;
        guid: string;
        index: bigint;
        message: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
declare namespace LzComposeAlertEvent {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        executor: AddressLike,
        guid: BytesLike,
        index: BigNumberish,
        gas: BigNumberish,
        value: BigNumberish,
        message: BytesLike,
        extraData: BytesLike,
        reason: BytesLike
    ];
    type OutputTuple = [
        from: string,
        to: string,
        executor: string,
        guid: string,
        index: bigint,
        gas: bigint,
        value: bigint,
        message: string,
        extraData: string,
        reason: string
    ];
    interface OutputObject {
        from: string;
        to: string;
        executor: string;
        guid: string;
        index: bigint;
        gas: bigint;
        value: bigint;
        message: string;
        extraData: string;
        reason: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
interface MessagingComposer extends BaseContract {
    connect(runner?: ContractRunner | null): MessagingComposer;
    waitForDeployment(): Promise<this>;
    interface: MessagingComposerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    composeQueue: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ], [
        string
    ], "view">;
    lzCompose: TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    lzComposeAlert: TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _gas: BigNumberish,
        _value: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike,
        _reason: BytesLike
    ], [
        void
    ], "nonpayable">;
    sendCompose: TypedContractMethod<[
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "composeQueue"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        guid: BytesLike,
        index: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "lzCompose"): TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "lzComposeAlert"): TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _gas: BigNumberish,
        _value: BigNumberish,
        _message: BytesLike,
        _extraData: BytesLike,
        _reason: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "sendCompose"): TypedContractMethod<[
        _to: AddressLike,
        _guid: BytesLike,
        _index: BigNumberish,
        _message: BytesLike
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "ComposeDelivered"): TypedContractEvent<ComposeDeliveredEvent.InputTuple, ComposeDeliveredEvent.OutputTuple, ComposeDeliveredEvent.OutputObject>;
    getEvent(key: "ComposeSent"): TypedContractEvent<ComposeSentEvent.InputTuple, ComposeSentEvent.OutputTuple, ComposeSentEvent.OutputObject>;
    getEvent(key: "LzComposeAlert"): TypedContractEvent<LzComposeAlertEvent.InputTuple, LzComposeAlertEvent.OutputTuple, LzComposeAlertEvent.OutputObject>;
    filters: {
        "ComposeDelivered(address,address,bytes32,uint16)": TypedContractEvent<ComposeDeliveredEvent.InputTuple, ComposeDeliveredEvent.OutputTuple, ComposeDeliveredEvent.OutputObject>;
        ComposeDelivered: TypedContractEvent<ComposeDeliveredEvent.InputTuple, ComposeDeliveredEvent.OutputTuple, ComposeDeliveredEvent.OutputObject>;
        "ComposeSent(address,address,bytes32,uint16,bytes)": TypedContractEvent<ComposeSentEvent.InputTuple, ComposeSentEvent.OutputTuple, ComposeSentEvent.OutputObject>;
        ComposeSent: TypedContractEvent<ComposeSentEvent.InputTuple, ComposeSentEvent.OutputTuple, ComposeSentEvent.OutputObject>;
        "LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)": TypedContractEvent<LzComposeAlertEvent.InputTuple, LzComposeAlertEvent.OutputTuple, LzComposeAlertEvent.OutputObject>;
        LzComposeAlert: TypedContractEvent<LzComposeAlertEvent.InputTuple, LzComposeAlertEvent.OutputTuple, LzComposeAlertEvent.OutputObject>;
    };
}

interface MessagingContextInterface extends Interface {
    getFunction(nameOrSignature: "getSendContext" | "isSendingMessage"): FunctionFragment;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
}
interface MessagingContext extends BaseContract {
    connect(runner?: ContractRunner | null): MessagingContext;
    waitForDeployment(): Promise<this>;
    interface: MessagingContextInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getSendContext: TypedContractMethod<[], [[bigint, string]], "view">;
    isSendingMessage: TypedContractMethod<[], [boolean], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getSendContext"): TypedContractMethod<[], [[bigint, string]], "view">;
    getFunction(nameOrSignature: "isSendingMessage"): TypedContractMethod<[], [boolean], "view">;
    filters: {};
}

type index$S_EndpointV2 = EndpointV2;
type index$S_MessageLibManager = MessageLibManager;
type index$S_MessagingChannel = MessagingChannel;
type index$S_MessagingComposer = MessagingComposer;
type index$S_MessagingContext = MessagingContext;
declare namespace index$S {
  export {
    index$S_EndpointV2 as EndpointV2,
    index$S_MessageLibManager as MessageLibManager,
    index$S_MessagingChannel as MessagingChannel,
    index$S_MessagingComposer as MessagingComposer,
    index$S_MessagingContext as MessagingContext,
    index$W as interfaces,
    index$V as libs,
    index$T as messagelib,
  };
}

declare namespace index$R {
  export {
    index$S as contracts,
  };
}

declare namespace index$Q {
  export {
    index$16 as messagelib,
    index$X as oapp,
    index$R as protocol,
  };
}

declare namespace index$P {
  export {
    index$Q as contracts,
    index$1g as openzeppelin,
  };
}

declare class AccessControl__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): AccessControlInterface;
    static connect(address: string, runner?: ContractRunner | null): AccessControl;
}

declare class IAccessControl__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IAccessControlInterface;
    static connect(address: string, runner?: ContractRunner | null): IAccessControl;
}

declare class Ownable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OwnableInterface;
    static connect(address: string, runner?: ContractRunner | null): Ownable;
}

type index$O_AccessControl__factory = AccessControl__factory;
declare const index$O_AccessControl__factory: typeof AccessControl__factory;
type index$O_IAccessControl__factory = IAccessControl__factory;
declare const index$O_IAccessControl__factory: typeof IAccessControl__factory;
type index$O_Ownable__factory = Ownable__factory;
declare const index$O_Ownable__factory: typeof Ownable__factory;
declare namespace index$O {
  export {
    index$O_AccessControl__factory as AccessControl__factory,
    index$O_IAccessControl__factory as IAccessControl__factory,
    index$O_Ownable__factory as Ownable__factory,
  };
}

declare class IERC1822Proxiable__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IERC1822ProxiableInterface;
    static connect(address: string, runner?: ContractRunner | null): IERC1822Proxiable;
}

type index$N_IERC1822Proxiable__factory = IERC1822Proxiable__factory;
declare const index$N_IERC1822Proxiable__factory: typeof IERC1822Proxiable__factory;
declare namespace index$N {
  export {
    index$N_IERC1822Proxiable__factory as IERC1822Proxiable__factory,
  };
}

declare class IERC1967__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }];
    static createInterface(): IERC1967Interface;
    static connect(address: string, runner?: ContractRunner | null): IERC1967;
}

type index$M_IERC1967__factory = IERC1967__factory;
declare const index$M_IERC1967__factory: typeof IERC1967__factory;
declare namespace index$M {
  export {
    index$M_IERC1967__factory as IERC1967__factory,
    index$N as draftIerc1822Sol,
  };
}

type ERC1967ProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ERC1967Proxy__factory extends ContractFactory {
    constructor(...args: ERC1967ProxyConstructorParams);
    getDeployTransaction(_logic: AddressLike, _data: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_logic: AddressLike, _data: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ERC1967Proxy & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): ERC1967Proxy__factory;
    static readonly bytecode = "0x60406080815261042c908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160e790816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe60806040523615605f5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f35b3d90fd5b73ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15605b573d90f3fea26469706673582212209df431885e9a90d2cd3c2ca0220883adcbccc41235b12f55b5c75f2b27396c7964736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_logic";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): ERC1967ProxyInterface;
    static connect(address: string, runner?: ContractRunner | null): ERC1967Proxy;
}

declare class ERC1967Upgrade__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }];
    static createInterface(): ERC1967UpgradeInterface;
    static connect(address: string, runner?: ContractRunner | null): ERC1967Upgrade;
}

type index$L_ERC1967Proxy__factory = ERC1967Proxy__factory;
declare const index$L_ERC1967Proxy__factory: typeof ERC1967Proxy__factory;
type index$L_ERC1967Upgrade__factory = ERC1967Upgrade__factory;
declare const index$L_ERC1967Upgrade__factory: typeof ERC1967Upgrade__factory;
declare namespace index$L {
  export {
    index$L_ERC1967Proxy__factory as ERC1967Proxy__factory,
    index$L_ERC1967Upgrade__factory as ERC1967Upgrade__factory,
  };
}

declare class IBeacon__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IBeaconInterface;
    static connect(address: string, runner?: ContractRunner | null): IBeacon;
}

type index$K_IBeacon__factory = IBeacon__factory;
declare const index$K_IBeacon__factory: typeof IBeacon__factory;
declare namespace index$K {
  export {
    index$K_IBeacon__factory as IBeacon__factory,
  };
}

declare class Proxy__factory {
    static readonly abi: readonly [{
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): ProxyInterface;
    static connect(address: string, runner?: ContractRunner | null): Proxy;
}

type index$J_Proxy__factory = Proxy__factory;
declare const index$J_Proxy__factory: typeof Proxy__factory;
declare namespace index$J {
  export {
    index$J_Proxy__factory as Proxy__factory,
    index$K as beacon,
    index$L as erc1967,
  };
}

declare class Pausable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PausableInterface;
    static connect(address: string, runner?: ContractRunner | null): Pausable;
}

type index$I_Pausable__factory = Pausable__factory;
declare const index$I_Pausable__factory: typeof Pausable__factory;
declare namespace index$I {
  export {
    index$I_Pausable__factory as Pausable__factory,
  };
}

declare class IERC20Metadata__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IERC20MetadataInterface;
    static connect(address: string, runner?: ContractRunner | null): IERC20Metadata;
}

declare class IERC20Permit__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "DOMAIN_SEPARATOR";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "nonces";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "permit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IERC20PermitInterface;
    static connect(address: string, runner?: ContractRunner | null): IERC20Permit;
}

type index$H_IERC20Metadata__factory = IERC20Metadata__factory;
declare const index$H_IERC20Metadata__factory: typeof IERC20Metadata__factory;
type index$H_IERC20Permit__factory = IERC20Permit__factory;
declare const index$H_IERC20Permit__factory: typeof IERC20Permit__factory;
declare namespace index$H {
  export {
    index$H_IERC20Metadata__factory as IERC20Metadata__factory,
    index$H_IERC20Permit__factory as IERC20Permit__factory,
  };
}

type ERC20ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ERC20__factory extends ContractFactory {
    constructor(...args: ERC20ConstructorParams);
    getDeployTransaction(name_: string, symbol_: string, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(name_: string, symbol_: string, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): ERC20__factory;
    static readonly bytecode = "0x6080604052346200031d5762000e0e803803806200001d8162000322565b9283398101906040818303126200031d5780516001600160401b03908181116200031d57836200004f91840162000348565b91602093848201518381116200031d576200006b920162000348565b82518281116200021d576003918254916001958684811c9416801562000312575b88851014620002fc578190601f94858111620002a6575b5088908583116001146200023f5760009262000233575b505060001982861b1c191690861b1783555b80519384116200021d5760049586548681811c9116801562000212575b82821014620001fd57838111620001b2575b508092851160011462000144575093839491849260009562000138575b50501b92600019911b1c19161790555b604051610a539081620003bb8239f35b01519350388062000118565b92919084601f1981168860005285600020956000905b898383106200019757505050106200017c575b50505050811b01905562000128565b01519060f884600019921b161c19169055388080806200016d565b8587015189559097019694850194889350908101906200015a565b87600052816000208480880160051c820192848910620001f3575b0160051c019087905b828110620001e6575050620000fb565b60008155018790620001d6565b92508192620001cd565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000e9565b634e487b7160e01b600052604160045260246000fd5b015190503880620000ba565b90889350601f19831691876000528a6000209260005b8c8282106200028f575050841162000276575b505050811b018355620000cc565b015160001983881b60f8161c1916905538808062000268565b8385015186558c9790950194938401930162000255565b90915085600052886000208580850160051c8201928b8610620002f2575b918a91869594930160051c01915b828110620002e2575050620000a3565b600081558594508a9101620002d2565b92508192620002c4565b634e487b7160e01b600052602260045260246000fd5b93607f16936200008c565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200021d57604052565b919080601f840112156200031d5782516001600160401b0381116200021d576020906200037e601f8201601f1916830162000322565b928184528282870101116200031d5760005b818110620003a657508260009394955001015290565b85810183015184820184015282016200039056fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461059e57508163095ea7b31461057457816318160ddd1461055557816323b872dd1461045f578163313ce5671461044357816339509351146103b757816370a082311461037457816395d89b41146101f4578163a457c2d71461012657508063a9059cbb146100f65763dd62ed3e1461009e57600080fd5b346100f257806003193601126100f257806020926100ba6106d0565b6100c26106f8565b73ffffffffffffffffffffffffffffffffffffffff91821683526001865283832091168252845220549051908152f35b5080fd5b50346100f257806003193601126100f25760209061011f6101156106d0565b602435903361085c565b5160018152f35b905082346101f157826003193601126101f1576101416106d0565b918360243592338152600160205281812073ffffffffffffffffffffffffffffffffffffffff861682526020522054908282106101885760208561011f858503873361071b565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b80fd5b8383346100f257816003193601126100f25780519082845460018160011c906001831692831561036a575b602093848410811461033e57838852879594939291811561030157506001146102a3575b50505003601f01601f191682019267ffffffffffffffff8411838510176102775750829182610273925282610688565b0390f35b806041867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b8888529193925086917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106102eb5750505090601f1992601f92820101918193610243565b80548885018701528794509285019281016102ce565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f601f19610243565b60248960228c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b91607f169161021f565b5050346100f25760206003193601126100f2578060209273ffffffffffffffffffffffffffffffffffffffff6103a86106d0565b16815280845220549051908152f35b8284346101f157816003193601126101f1576103d16106d0565b338252600160205282822073ffffffffffffffffffffffffffffffffffffffff82168352602052828220549160243583018093116104175760208461011f85853361071b565b806011867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b5050346100f257816003193601126100f2576020905160128152f35b839150346100f25760606003193601126100f25761047b6106d0565b6104836106f8565b91846044359473ffffffffffffffffffffffffffffffffffffffff8416815260016020528181203382526020522054907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036104e9575b60208661011f87878761085c565b84821061051257509183916105076020969561011f9503338361071b565b9193948193506104db565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100f257816003193601126100f2576020906002549051908152f35b5050346100f257806003193601126100f25760209061011f6105946106d0565b602435903361071b565b849084346106845782600319360112610684578260035460018160011c906001831692831561067a575b602093848410811461033e578388528795949392918115610301575060011461061b5750505003601f01601f191682019267ffffffffffffffff8411838510176102775750829182610273925282610688565b600388529193925086917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106106645750505090601f1992601f92820101918193610243565b8054888501870152879450928501928101610647565b91607f16916105c8565b8280fd5b60208082528251818301819052939260005b8581106106bc57505050601f19601f8460006040809697860101520116010190565b81810183015184820160400152820161069a565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036106f357565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff821682036106f357565b73ffffffffffffffffffffffffffffffffffffffff8091169182156107f357169182156107895760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b608460405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff8091169182156109b35716918215610949576000828152806020526040812054918083106108df57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b608460405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fdfea264697066735822122066c063431d3325115505747766e7a598f7c4b20b0d64c700ccc494524a91b9da64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "symbol_";
            readonly type: "string";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "subtractedValue";
            readonly type: "uint256";
        }];
        readonly name: "decreaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "addedValue";
            readonly type: "uint256";
        }];
        readonly name: "increaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ERC20Interface;
    static connect(address: string, runner?: ContractRunner | null): ERC20;
}

declare class IERC20__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IERC20Interface;
    static connect(address: string, runner?: ContractRunner | null): IERC20;
}

type index$G_ERC20__factory = ERC20__factory;
declare const index$G_ERC20__factory: typeof ERC20__factory;
type index$G_IERC20__factory = IERC20__factory;
declare const index$G_IERC20__factory: typeof IERC20__factory;
declare namespace index$G {
  export {
    index$G_ERC20__factory as ERC20__factory,
    index$G_IERC20__factory as IERC20__factory,
    index$H as extensions,
  };
}

declare namespace index$F {
  export {
    index$G as erc20,
  };
}

declare class ERC165__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ERC165Interface;
    static connect(address: string, runner?: ContractRunner | null): ERC165;
}

declare class IERC165__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IERC165Interface;
    static connect(address: string, runner?: ContractRunner | null): IERC165;
}

type index$E_ERC165__factory = ERC165__factory;
declare const index$E_ERC165__factory: typeof ERC165__factory;
type index$E_IERC165__factory = IERC165__factory;
declare const index$E_IERC165__factory: typeof IERC165__factory;
declare namespace index$E {
  export {
    index$E_ERC165__factory as ERC165__factory,
    index$E_IERC165__factory as IERC165__factory,
  };
}

declare namespace index$D {
  export {
    index$E as introspection,
  };
}

declare namespace index$C {
  export {
    index$O as access,
    index$M as interfaces,
    index$J as proxy,
    index$I as security,
    index$F as token,
    index$D as utils,
  };
}

declare class AccessControlUpgradeable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): AccessControlUpgradeableInterface;
    static connect(address: string, runner?: ContractRunner | null): AccessControlUpgradeable;
}

declare class IAccessControlUpgradeable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IAccessControlUpgradeableInterface;
    static connect(address: string, runner?: ContractRunner | null): IAccessControlUpgradeable;
}

declare class OwnableUpgradeable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OwnableUpgradeableInterface;
    static connect(address: string, runner?: ContractRunner | null): OwnableUpgradeable;
}

type index$B_AccessControlUpgradeable__factory = AccessControlUpgradeable__factory;
declare const index$B_AccessControlUpgradeable__factory: typeof AccessControlUpgradeable__factory;
type index$B_IAccessControlUpgradeable__factory = IAccessControlUpgradeable__factory;
declare const index$B_IAccessControlUpgradeable__factory: typeof IAccessControlUpgradeable__factory;
type index$B_OwnableUpgradeable__factory = OwnableUpgradeable__factory;
declare const index$B_OwnableUpgradeable__factory: typeof OwnableUpgradeable__factory;
declare namespace index$B {
  export {
    index$B_AccessControlUpgradeable__factory as AccessControlUpgradeable__factory,
    index$B_IAccessControlUpgradeable__factory as IAccessControlUpgradeable__factory,
    index$B_OwnableUpgradeable__factory as OwnableUpgradeable__factory,
  };
}

declare class Initializable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }];
    static createInterface(): InitializableInterface;
    static connect(address: string, runner?: ContractRunner | null): Initializable;
}

type index$A_Initializable__factory = Initializable__factory;
declare const index$A_Initializable__factory: typeof Initializable__factory;
declare namespace index$A {
  export {
    index$A_Initializable__factory as Initializable__factory,
  };
}

declare namespace index$z {
  export {
    index$A as utils,
  };
}

declare class PausableUpgradeable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PausableUpgradeableInterface;
    static connect(address: string, runner?: ContractRunner | null): PausableUpgradeable;
}

declare class ReentrancyGuardUpgradeable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }];
    static createInterface(): ReentrancyGuardUpgradeableInterface;
    static connect(address: string, runner?: ContractRunner | null): ReentrancyGuardUpgradeable;
}

type index$y_PausableUpgradeable__factory = PausableUpgradeable__factory;
declare const index$y_PausableUpgradeable__factory: typeof PausableUpgradeable__factory;
type index$y_ReentrancyGuardUpgradeable__factory = ReentrancyGuardUpgradeable__factory;
declare const index$y_ReentrancyGuardUpgradeable__factory: typeof ReentrancyGuardUpgradeable__factory;
declare namespace index$y {
  export {
    index$y_PausableUpgradeable__factory as PausableUpgradeable__factory,
    index$y_ReentrancyGuardUpgradeable__factory as ReentrancyGuardUpgradeable__factory,
  };
}

declare class ERC165Upgradeable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ERC165UpgradeableInterface;
    static connect(address: string, runner?: ContractRunner | null): ERC165Upgradeable;
}

declare class IERC165Upgradeable__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IERC165UpgradeableInterface;
    static connect(address: string, runner?: ContractRunner | null): IERC165Upgradeable;
}

type index$x_ERC165Upgradeable__factory = ERC165Upgradeable__factory;
declare const index$x_ERC165Upgradeable__factory: typeof ERC165Upgradeable__factory;
type index$x_IERC165Upgradeable__factory = IERC165Upgradeable__factory;
declare const index$x_IERC165Upgradeable__factory: typeof IERC165Upgradeable__factory;
declare namespace index$x {
  export {
    index$x_ERC165Upgradeable__factory as ERC165Upgradeable__factory,
    index$x_IERC165Upgradeable__factory as IERC165Upgradeable__factory,
  };
}

declare class ContextUpgradeable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }];
    static createInterface(): ContextUpgradeableInterface;
    static connect(address: string, runner?: ContractRunner | null): ContextUpgradeable;
}

type index$w_ContextUpgradeable__factory = ContextUpgradeable__factory;
declare const index$w_ContextUpgradeable__factory: typeof ContextUpgradeable__factory;
declare namespace index$w {
  export {
    index$w_ContextUpgradeable__factory as ContextUpgradeable__factory,
    index$x as introspection,
  };
}

declare namespace index$v {
  export {
    index$B as access,
    index$z as proxy,
    index$y as security,
    index$w as utils,
  };
}

declare namespace index$u {
  export {
    index$C as contracts,
    index$v as contractsUpgradeable,
  };
}

declare class IExecutor__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeDropCap";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IExecutor.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeDropFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeDropSucceeded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IExecutorInterface;
    static connect(address: string, runner?: ContractRunner | null): IExecutor$3;
}

declare class IExecutorFeeLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "InvalidExecutorOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "cap";
            readonly type: "uint256";
        }];
        readonly name: "NativeDropAmountExceedsCap";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NoOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "optionType";
            readonly type: "uint8";
        }];
        readonly name: "UnsupportedOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeDropCap";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeDropCap";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): IExecutorFeeLibInterface;
    static connect(address: string, runner?: ContractRunner | null): IExecutorFeeLib$1;
}

declare class ILayerZeroExecutor__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroExecutorInterface;
    static connect(address: string, runner?: ContractRunner | null): ILayerZeroExecutor;
}

declare class ILayerZeroPriceFeed__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "provided";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "required";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyPriceUpdater";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "l2Eid";
            readonly type: "uint32";
        }];
        readonly name: "UnknownL2Eid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeByEid";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatio";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatioDenominator";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "nativePriceUSD";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatio";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatioDenominator";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "nativePriceUSD";
            readonly type: "uint128";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getPrice";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint128";
                readonly name: "priceRatio";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "gasPriceInUnit";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.Price";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPriceRatioDenominator";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeTokenPriceUSD";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroPriceFeedInterface;
    static connect(address: string, runner?: ContractRunner | null): ILayerZeroPriceFeed$1;
}

declare class ILayerZeroTreasury__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_totalNativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_totalNativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "payFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroTreasuryInterface;
    static connect(address: string, runner?: ContractRunner | null): ILayerZeroTreasury;
}

declare class ILayerZeroUltraLightNodeV2__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "chainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly name: "AddInboundProofLibraryForChain";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "userApplication";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "configType";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "newConfig";
            readonly type: "bytes";
        }];
        readonly name: "AppConfigUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "chainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "proofType";
            readonly type: "uint16";
        }];
        readonly name: "EnableSupportedOutboundProof";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "srcChainId";
            readonly type: "uint16";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oracle";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "lookupHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "blockData";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "confirmations";
            readonly type: "uint256";
        }];
        readonly name: "HashReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "srcChainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "srcAddress";
            readonly type: "bytes";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dstAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidDst";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }];
        readonly name: "Packet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "srcChainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "srcAddress";
            readonly type: "bytes";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dstAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "adapterParams";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "outboundProofType";
            readonly type: "uint16";
        }];
        readonly name: "RelayerParams";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "chainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly name: "SetChainAddressSize";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "chainId";
            readonly type: "uint16";
        }, {
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "proofType";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "adapterParams";
            readonly type: "bytes";
        }];
        readonly name: "SetDefaultAdapterParamsForChainId";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "chainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "inboundProofLib";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "inboundBlockConfirm";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "relayer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "outboundProofType";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "outboundBlockConfirm";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oracle";
            readonly type: "address";
        }];
        readonly name: "SetDefaultConfigForChainId";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "tokenAddress";
            readonly type: "address";
        }];
        readonly name: "SetLayerZeroToken";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "chainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "uln";
            readonly type: "bytes32";
        }];
        readonly name: "SetRemoteUln";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "treasuryAddress";
            readonly type: "address";
        }];
        readonly name: "SetTreasury";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "msgSender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "WithdrawNative";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "msgSender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "WithdrawZRO";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_address";
            readonly type: "address";
        }];
        readonly name: "accruedNativeFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_remoteChainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplicationAddress";
            readonly type: "address";
        }];
        readonly name: "getAppConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint16";
                readonly name: "inboundProofLibraryVersion";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint64";
                readonly name: "inboundBlockConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "relayer";
                readonly type: "address";
            }, {
                readonly internalType: "uint16";
                readonly name: "outboundProofType";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint64";
                readonly name: "outboundBlockConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "oracle";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroUltraLightNodeV2.ApplicationConfiguration";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_srcChainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_lookupHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_confirmations";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_blockData";
            readonly type: "bytes32";
        }];
        readonly name: "updateHash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_srcChainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_dstAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_lookupHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_blockData";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_transactionProof";
            readonly type: "bytes";
        }];
        readonly name: "validateTransactionProof";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawNative";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawZRO";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroUltraLightNodeV2Interface;
    static connect(address: string, runner?: ContractRunner | null): ILayerZeroUltraLightNodeV2;
}

declare class IWorker__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IWorkerInterface;
    static connect(address: string, runner?: ContractRunner | null): IWorker;
}

type index$t_IExecutorFeeLib__factory = IExecutorFeeLib__factory;
declare const index$t_IExecutorFeeLib__factory: typeof IExecutorFeeLib__factory;
type index$t_IExecutor__factory = IExecutor__factory;
declare const index$t_IExecutor__factory: typeof IExecutor__factory;
type index$t_ILayerZeroExecutor__factory = ILayerZeroExecutor__factory;
declare const index$t_ILayerZeroExecutor__factory: typeof ILayerZeroExecutor__factory;
type index$t_ILayerZeroPriceFeed__factory = ILayerZeroPriceFeed__factory;
declare const index$t_ILayerZeroPriceFeed__factory: typeof ILayerZeroPriceFeed__factory;
type index$t_ILayerZeroTreasury__factory = ILayerZeroTreasury__factory;
declare const index$t_ILayerZeroTreasury__factory: typeof ILayerZeroTreasury__factory;
type index$t_ILayerZeroUltraLightNodeV2__factory = ILayerZeroUltraLightNodeV2__factory;
declare const index$t_ILayerZeroUltraLightNodeV2__factory: typeof ILayerZeroUltraLightNodeV2__factory;
type index$t_IWorker__factory = IWorker__factory;
declare const index$t_IWorker__factory: typeof IWorker__factory;
declare namespace index$t {
  export {
    index$t_IExecutorFeeLib__factory as IExecutorFeeLib__factory,
    index$t_IExecutor__factory as IExecutor__factory,
    index$t_ILayerZeroExecutor__factory as ILayerZeroExecutor__factory,
    index$t_ILayerZeroPriceFeed__factory as ILayerZeroPriceFeed__factory,
    index$t_ILayerZeroTreasury__factory as ILayerZeroTreasury__factory,
    index$t_ILayerZeroUltraLightNodeV2__factory as ILayerZeroUltraLightNodeV2__factory,
    index$t_IWorker__factory as IWorker__factory,
  };
}

type DVNConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DVN__factory extends ContractFactory {
    constructor(...args: DVNConstructorParams);
    getDeployTransaction(_vid: BigNumberish, _messageLibs: AddressLike[], _priceFeed: AddressLike, _signers: AddressLike[], _quorum: BigNumberish, _admins: AddressLike[], overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_vid: BigNumberish, _messageLibs: AddressLike[], _priceFeed: AddressLike, _signers: AddressLike[], _quorum: BigNumberish, _admins: AddressLike[], overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<DVN & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): DVN__factory;
    static readonly bytecode = "0x604060a08152346200036e57620040d4803803806200001e8162000373565b92833981019060c0818303126200036e5780519163ffffffff831683036200036e576020828101516001600160401b039291908381116200036e578262000067918601620003c4565b9062000075878601620003af565b9060608601518581116200036e578462000091918801620003c4565b93608087015196868816918289036200036e5760a08201518881116200036e57620000bd9201620003c4565b6001805460ff61ffff60e81b01191661017760ed1b178155600280546001600160a01b0319166001600160a01b039687161790559485906000825b620002c0575b505090816000905b62000212575b50505080156200020157845190808210620001e25750508291600080935b62000186575b505050505051166005549168010000000000000000600160801b0390851b169160018060801b031916171760055560805251613c519081620004638239608051818181610274015281816108ef0152610e930152f35b8551841015620001dc5781806200019e868962000437565b51169116811115620001cb576000818152600484528a9020805460ff19168617905592840192846200012a565b8951630721857b60e01b8152600490fd5b62000130565b8951638626e1a960e01b81529187166004830152602482015260449150fd5b8851638923b8ef60e01b8152600490fd5b8151811015620002ba57808c876200022c86948662000437565b51167fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759182600052600089528060002082600052895260ff816000205416156200027c575b505050018262000106565b8260005260008952806000208260005289526000208460ff198254161790553391600080516020620040b4833981519152600080a438808e62000271565b6200010c565b81518110156200036857808d88620002da86948662000437565b51167f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de918260005260008a5280600020826000528a5260ff816000205416156200032a575b5050500182620000f8565b8260005260008a5280600020826000528a526000208460ff198254161790553391600080516020620040b4833981519152600080a438808f6200031f565b620000fe565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200039957604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200036e57565b81601f820112156200036e578051916020916001600160401b03841162000399578360051b908380620003f981850162000373565b8097815201928201019283116200036e578301905b8282106200041d575050505090565b8380916200042b84620003af565b8152019101906200040e565b80518210156200044c5760209160051b010190565b634e487b7160e01b600052603260045260246000fdfe6080806040526004908136101561001557600080fd5b600091823560e01c918262bf2e8014612e205750816301e3366714612bbd57816301ffc9a714612b1c5781631095b6d7146129b057816316c38b3c1461267e5781631703a01814612653578163248a9ca31461262757816326e67a37146120425781632de11376146120195781632f2ff15d14611df357816330bb3aac14611cc557816331cb610514611ab757816336568abe14611a7357816352d3b871146118255781635553fb8e146117055781635c975abb146116e2578163724e78da14611660578163736c0d5b14611623578163741bef1a146115fc5781638585c945146114af57816391d148541461146457816395d376d7146112b25781639e9449651461124a578163a217fddf1461122e578163aef18bf7146111ff578163b143044b14610e0e578163c358de0a14610d67578163c416aa5114610d3d578163c5e193cd14610bb1578163c7a823e014610b45578163c7b2370b14610aa8578163cd88b90314610913578163cf34c768146108d2578163d2ae2104146108a7578163d547741f1461063a578163dafe0ccc14610529578163f010cb23146104cd578163f3b4ebd0146101fa575063fd62e750146101d057600080fd5b346101f757806003193601126101f757602067ffffffffffffffff60055416604051908152f35b80fd5b9050346104c9576020906003199082823601126104c55780359067ffffffffffffffff82116103cb5760a08282019383360301126103cb576064820135914283111561049c57602481019161024e836132b7565b936001600160a01b039485309116036104615761026a866131ca565b63ffffffff9081807f00000000000000000000000000000000000000000000000000000000000000001691160361042657506102d960846102d16102e0936102ba6102b48b6131ca565b986132b7565b60448801986102c98a8d6132cb565b929091613591565b9401876132cb565b908461339c565b50156103fe578187526007865260ff6040882054166103cf5750849161031d91875260078352604087209460ff19956001878254161790556132cb565b90809291810103126103cb5761033290612e6f565b16907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775928360005260008152604060002083600052815260ff604060002054161561037b578480f35b83600052600081526040600020908360005252600160406000209182541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4388080808480f35b8480fd5b602491604051917f90ada7a7000000000000000000000000000000000000000000000000000000008352820152fd5b6040517f274cf401000000000000000000000000000000000000000000000000000000008152fd5b60249083610433896131ca565b6040517fa100763c000000000000000000000000000000000000000000000000000000008152921690820152fd5b6024858361046e876132b7565b6040517fd08525e9000000000000000000000000000000000000000000000000000000008152921690820152fd5b506040517f4a88c125000000000000000000000000000000000000000000000000000000008152fd5b8380fd5b5080fd5b82346101f75760806003193601126101f7576104e7612eb8565b916104f0612e59565b916044359067ffffffffffffffff82116101f7576020610521868661051736878901612edc565b9160643593613591565b604051908152f35b82346101f75760606003193601126101f757610543612e43565b9161054c612e59565b61055461361d565b7f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de83528260205260408320936001600160a01b03809116948560005260205260ff6040600020541615610611578484953b156103cb5784928360449260405196879586947f07b18bde0000000000000000000000000000000000000000000000000000000086521690840152833560248401525af18015610606576105f65750f35b6105ff90612f90565b6101f75780f35b6040513d84823e3d90fd5b826040517f42cbfad1000000000000000000000000000000000000000000000000000000008152fd5b9050346104c95760406003193601126104c957803590610658612e59565b907f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca831480801561087e575b8015610855575b156107f1573330036107c8575b8061079e575b61071d575b50818352826020526001600160a01b03604084209116908160005260205260ff604060002054166106d2578280f35b818352826020526040832081600052602052604060002060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8480a438808280f35b6001549067ffffffffffffffff8260a81c1690811561078b57507cffffffffffffffff0000000000000000000000000000000000000000006000197fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff920160a81b16911617600155386106a3565b856011602492634e487b7160e01b835252fd5b5082845283602052604084206001600160a01b03831660005260205260ff6040600020541661069e565b506040517f14d4a4e8000000000000000000000000000000000000000000000000000000008152fd5b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177584036108255761082061361d565b610698565b60248285604051917f125a2bb7000000000000000000000000000000000000000000000000000000008352820152fd5b507f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de841461068b565b507f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e48414610684565b82346101f757806003193601126101f757602067ffffffffffffffff60015460a81c16604051908152f35b82346101f757806003193601126101f757602060405163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9050346104c95760406003193601126104c95761092e612eb8565b9060243567ffffffffffffffff928382116103cb5761095563ffffffff9236908501612f5f565b92909161096061361d565b1685526020926003845260408620948311610a9557680100000000000000008311610a9557508354828555808310610a40575b50928452818420908060051c92855b848110610a0d5750601f19821680830392036109bc578580f35b93908594865b8281106109d85750505050015538808080808580f35b9091929582610a02600192846109ed8b613583565b919060ff809160031b9316831b921b19161790565b9701939291016109c2565b86875b838110610a245750848201556001016109a2565b969083610a376001928a6109ed86613583565b92019701610a10565b848652838620601f80850160051c8201920160051c0190601f841680610a7b575b505b818110610a705750610993565b868155600101610a63565b6000199081830191825491880360031b1c16905538610a61565b856041602492634e487b7160e01b835252fd5b82346101f75760206003193601126101f7577f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e06020610ae5612e43565b610aed61361d565b6001547fffffffffffffffffffffff0000000000000000000000000000000000000000ff74ffffffffffffffffffffffffffffffffffffffff008360081b169116176001556001600160a01b0360405191168152a180f35b82346101f75760406003193601126101f75760243567ffffffffffffffff81116104c957610b79610b819136908501612edc565b90843561339c565b9091604051921515835283821015610b9e57604083836020820152f35b80602185634e487b7160e01b6024945252fd5b82346101f757610bc036612f0a565b9492909150610bcd61381f565b610bd685613031565b15610d14576001600160a01b0390816002541667ffffffffffffffff968760055460401c1692600154938561ffff809360405196610c1388612fba565b8752169360209b8c99868b89015216604087015216606085015260808401528360e81c1660a083015286526006845285604081209360405196610c5588612fd6565b828852610c8f604051988997889687947fdf2b057e000000000000000000000000000000000000000000000000000000008652850161323f565b039360081c165af1918215610d085791610cd6575b507f87e46b0a6199bc734632187269a103c05714ee0adae5b28f30723955724f37ef82604051838152a1604051908152f35b90508181813d8311610d01575b610ced818361300e565b81010312610cfc575182610ca4565b600080fd5b503d610ce3565b604051903d90823e3d90fd5b826040517f3d693ada000000000000000000000000000000000000000000000000000000008152fd5b82346101f757806003193601126101f75760206001600160a01b0360015460081c16604051908152f35b9050346104c95760206003193601126104c9573561ffff811690818103610cfc577f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d91602091610db561361d565b7fff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7effff00000000000000000000000000000000000000000000000000000000006001549260e81b16911617600155604051908152a180f35b9050346104c95760206003193601126104c957803567ffffffffffffffff81116111fb57610e3f9036908301612f5f565b90610e4861361d565b835b828110610e55578480f35b8060051b820135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61833603018212156111f75760019163ffffffff7f00000000000000000000000000000000000000000000000000000000000000001663ffffffff610ec38387016131ca565b16036111f15760608185010135428111156111ea5787610f0782610ee88589016131ca565b610ef66020878b01016132b7565b906102c98a880160408101906132cb565b92610f22610f1b88830160808101906132cb565b908661339c565b50156111b75786610f3982820160408101906132cb565b7fffffffff000000000000000000000000000000000000000000000000000000009182919035828116918e8082106111a2575b505050905016937f0223536e000000000000000000000000000000000000000000000000000000008514159485611177575b508461105e575b509082610fc7610fba602084849601016132b7565b928a0160408101906132cb565b9190826040519384928337810182815203925af1610fe361336c565b9015610ff4575b5050505b01610e4a565b7fdc8cdd96296241bbefda4a8e18ad2e0985a8da6495b34d409cfc4c886ee3b0cf9261103a92611045575b5060405191829185835260406020840152604083019061321a565b0390a1388080610fea565b895260076020526040892060ff1981541690553861101f565b9092948092949552600760205260408b20948b86549660ff881660001461115d575050507f9bb9bddbdf537a2104255307230b323d7982f4512ee8e5bd15df62ddca50ab97945061110f61111f8561114f936001600160a01b036110e460206040519a8b9a60408c5263ffffffff6110d7838301612ecb565b1660408d01520101612e6f565b1660608801526110fa828d01604081019061331c565b949060a0958660808b015260e08a01916130e0565b938701528a01608081019061331c565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08684030160c08701526130e0565b9060208301520390a1610fee565b9195925093508760ff198594971617905590508638610fa5565b7f704316e5000000000000000000000000000000000000000000000000000000001415945038610f9e565b849293500360031b1b1616819038808e610f6c565b505050507fd6d90193101048cc1b6edcdc2348f5acf7a4a4a97d3e7b668b74cb7602ab3ebc6020604051838152a1610fee565b5050610fee565b50610fee565b8580fd5b8280fd5b9050346104c95760206003193601126104c957604060209260ff92358152600784522054166040519015158152f35b82346101f757806003193601126101f757602090604051908152f35b82346101f75760206003193601126101f757604060609163ffffffff61126e612eb8565b168152600660205220546fffffffffffffffffffffffffffffffff6040519167ffffffffffffffff8116835261ffff8160401c16602084015260501c166040820152f35b600319836040368301126101f75782359167ffffffffffffffff908184116111fb5760a09084360301126104c9576024358181116111fb576112f79036908601612edc565b91909361130261381f565b6084810191611318611313846132b7565b613031565b1561143b57936020948196976001600160a01b03916113a58360025416956113418185016131ca565b9285611358611352606485016131b5565b9a6132b7565b8260055460401c16926001549b6040519b6113728d612fba565b8c5263ffffffff8098168f8d01521660408b0152166060890152608088015261ffff8860e81c1660a088015283016131ca565b168352600687526113e860408420966040519a8b98899788957fdf2b057e0000000000000000000000000000000000000000000000000000000087528601613101565b039360081c165af1908115610d085790611408575b602090604051908152f35b506020813d602011611433575b816114226020938361300e565b81010312610cfc57602090516113fd565b3d9150611415565b866040517f3d693ada000000000000000000000000000000000000000000000000000000008152fd5b82346101f75760406003193601126101f75760406001600160a01b0391611489612e59565b9335815280602052209116600052602052602060ff604060002054166040519015158152f35b9050346104c95760206003193601126104c95767ffffffffffffffff813581811692838203610cfc573330036115d45783156115ac576005549283169084821061156057857fb600f3cf7f38a4b49bb0c75f722ef69f7e3e39ef3bb4aa8207fd86e724a23249602087877fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff6fffffffffffffffff00000000000000008960401b16911617600555604051908152a180f35b604080517f8626e1a900000000000000000000000000000000000000000000000000000000815267ffffffffffffffff93841692810192835292841660208301528291010390fd5b0390fd5b6040517f8923b8ef000000000000000000000000000000000000000000000000000000008152fd5b6040517f14d4a4e8000000000000000000000000000000000000000000000000000000008152fd5b82346101f757806003193601126101f75760206001600160a01b0360025416604051908152f35b9050346104c95760206003193601126104c957604060209260ff926001600160a01b0361164e612e43565b16825284522054166040519015158152f35b82346101f75760206003193601126101f7577ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d60206001600160a01b036116a5612e43565b6116ad61361d565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006002541617600255604051908152a180f35b82346101f757806003193601126101f757602060ff600154166040519015158152f35b82346101f75761171436612f0a565b949290915061172285613031565b15610d14576001600160a01b0390816002541667ffffffffffffffff968760055460401c1692600154938561ffff80936040519661175f88612fba565b8752169360209b8c99868b89015216604087015216606085015260808401528360e81c1660a08301528652600684526040862092604051956117a087612fd6565b8787526117da604051978896879586947f7bfa20a9000000000000000000000000000000000000000000000000000000008652850161323f565b039260081c165afa918215610d0857916117f8575b50604051908152f35b90508181813d831161181e575b61180f818361300e565b81010312610cfc5751826117ef565b503d611805565b9050346104c957602090816003193601126111fb5780359067ffffffffffffffff928383116103cb57366023840112156103cb5782820135918483116111f7576024906007903660248660071b88010111611a6f576118869694939661361d565b875b848110611958575050505060405193818186018287525260246040860194019286915b8383106118dc57877f7dd21e42791b013d1929e86f0c59085e4fca24251f0f1aa81917b3b1611766e088880389a180f35b909192939463ffffffff6118ef87612ecb565b16815281860135838116809103610cfc5782820152604086013561ffff8116809103610cfc576040820152606090818701356fffffffffffffffffffffffffffffffff81168091036119545760019282015260808091019601930191909392936118ab565b8980fd5b8083989596981b870161196d604482016131b5565b9060648101359061ffff8216809203611a6b576084810135906fffffffffffffffffffffffffffffffff8216809203611a675760405193606085018d811186821017611a53578e63ffffffff8f938c60019a999897968f876119e2946040988952168b528a01988952858a01978852016131ca565b16815260068c52209351167fffffffffffff000000000000000000000000000000000000000000000000000079ffffffffffffffffffffffffffffffff0000000000000000000069ffff00000000000000008654955160401b16935160501b16931617171790550196949396611888565b89604189634e487b7160e01b600052526000fd5b8c80fd5b8b80fd5b8780fd5b82346101f75760406003193601126101f75750611a8e612e59565b506040517fcebd140e000000000000000000000000000000000000000000000000000000008152fd5b82346101f75760406003193601126101f757611ad1612e43565b60243590811515808303610cfc57333003611c9c576001600160a01b038216808552856020528160ff604087205416151514611c5457845284602052604084209060ff60ff19835416911617905581600014611c355767ffffffffffffffff6001816005541601908111611c2257935b6005549467ffffffffffffffff91828760401c1692821692808410611bd9575050507fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000007f863d338cad74814b108a06288ad5e0e80d56495e0332238b1d2cdcfa0ca8e5ce94951617600555611bd3604051928392839092916020906001600160a01b0360408401951683521515910152565b0390a180f35b604080517f8626e1a900000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9485169381019384529390911660208301528291010390fd5b602484601187634e487b7160e01b835252fd5b67ffffffffffffffff600019816005541601908111611c225793611b41565b604080517fd61afe6e0000000000000000000000000000000000000000000000000000000081526001600160a01b038516818901908152861515602082015290918291010390fd5b846040517f14d4a4e8000000000000000000000000000000000000000000000000000000008152fd5b82346101f75760806003193601126101f757611cdf612eb8565b6024359067ffffffffffffffff91828116809103610cfc57604435926001600160a01b0380851692838603610cfc57606435838111611a6f5790611d2c611d349594939236908b01612edc565b959097613031565b15611dca579763ffffffff9882600254169360055460401c166001549560405195611d5e87612fba565b865260209b8c991692838a88015260408701526060860152608085015261ffff8560e81c1660a08501528852600686526117da6040892095604051988997889687957f7bfa20a90000000000000000000000000000000000000000000000000000000087528601613101565b886040517f3d693ada000000000000000000000000000000000000000000000000000000008152fd5b9050346104c95760406003193601126104c957803590611e11612e59565b907f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca8314808015611ff0575b8015611fc7575b15611f93573330036107c8575b80611f65575b611ee1575b508160005260006020526001600160a01b0360406000209116908160005260205260ff6040600020541615611e8f578280f35b8160005260006020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a438808280f35b6001549067ffffffffffffffff90818360a81c16918214611f5057507cffffffffffffffff00000000000000000000000000000000000000000060017fffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffff920160a81b1691161760015538611e5c565b601190634e487b7160e01b6000525260246000fd5b5082600052600060205260406000206001600160a01b03831660005260205260ff6040600020541615611e57565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775840361082557611fc261361d565b611e51565b507f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de8414611e44565b507f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e48414611e3d565b82346101f75760206003193601126101f7576020612038611313612e43565b6040519015158152f35b82346101f7576020806003193601126104c95763ffffffff612062612eb8565b168252600381526040822090604051908182828086549384815201809688528188209388905b80601f83011061249c576121a795549184828210612489575b828210612473575b82821061245d575b828210612447575b828210612432575b82821061241c575b828210612406575b8282106123f0575b8282106123da575b8282106123c4575b8282106123ae575b828210612398575b828210612382575b82821061236c575b828210612356575b828210612340575b82821061232a575b828210612314575b8282106122fe575b8282106122e8575b8282106122d2575b8282106122bc575b8282106122a6575b828210612290575b82821061227a575b828210612264575b82821061224e575b828210612238575b828210612222575b82821061220c575b8282106121f6575b50106121e8575b5090509592949395038561300e565b60405193838594850191818652518092526040850193925b8281106121ce57505050500390f35b835160ff16855286955093810193928101926001016121bf565b60f81c815201839088612198565b6001919460ff8560f01c16815201930184612191565b6001919460ff8560e81c16815201930184612189565b6001919460ff8560e01c16815201930184612181565b6001919460ff8560d81c16815201930184612179565b6001919460ff8560d01c16815201930184612171565b6001919460ff8560c81c16815201930184612169565b6001919460ff8560c01c16815201930184612161565b6001919460ff8560b81c16815201930184612159565b6001919460ff8560b01c16815201930184612151565b6001919460ff8560a81c16815201930184612149565b6001919460ff8560a01c16815201930184612141565b6001919460ff8560981c16815201930184612139565b6001919460ff8560901c16815201930184612131565b6001919460ff8560881c16815201930184612129565b6001919460ff8560801c16815201930184612121565b6001919460ff8560781c16815201930184612119565b6001919460ff8560701c16815201930184612111565b6001919460ff8560681c16815201930184612109565b6001919460ff8560601c16815201930184612101565b6001919460ff8560581c168152019301846120f9565b6001919460ff8560501c168152019301846120f1565b6001919460ff8560481c168152019301846120e9565b6001919460ff8560401c168152019301846120e1565b6001919460ff8560381c168152019301846120d9565b6001919460ff8560301c168152019301846120d1565b6001919460ff8560281c168152019301846120c9565b6001919460ff85831c168152019301846120c1565b6001919460ff8560181c168152019301846120b9565b6001919460ff8560101c168152019301846120b1565b6001919460ff8560081c168152019301846120a9565b6001919460ff85168152019301846120a1565b9291600191945061040090865460ff8082168352808260081c1686840152808260101c16604084015280828482826060828260181c168185015282828d82826080921c1681880152828260a095828260281c16878b015260c099838360301c168b820152838360381c1660e0820152838360401c16610100820152838360481c16610120820152838360501c16610140820152610160848460581c169101521c166101808d0152828260681c166101a08d0152828260701c166101c08d0152828260781c166101e08d01521c166102008a0152828260881c166102208a0152828260901c166102408a0152828260981c166102608a01521c16610280870152828260a81c166102a0870152828260b01c166102c0870152828260b81c166102e08701521c16610300840152808260c81c16610320840152808260d01c16610340840152808260d81c16610360840152808260e01c16610380840152808260e81c166103a08401528160f01c166103c083015260f81c6103e08201520194019201928592938592612088565b9050346104c95760206003193601126104c9576040602092600192358152808452200154604051908152f35b82346101f757806003193601126101f757602067ffffffffffffffff60055460401c16604051908152f35b82346101f7576020806003193601126104c95782358015158103610cfc576000805260008252604060002033600052825260ff60406000205416156127cc5715612748576001549260ff84166127065750600160ff197f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25893941617600155604051338152a180f35b6064916040519162461bcd60e51b8352820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b6001549260ff84161561278a575060ff197f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa929316600155604051338152a180f35b6064916040519162461bcd60e51b8352820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b50826127d733613a66565b60006040516127e581612ff2565b6042815284810191606036843781511561299d576030835381516001906001101561298a57607860218401536041905b8082116129105750506128ce5760486115a8936128a3936128b2936040519586937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008b86015261286e815180928d6037890191016131f7565b8401917f206973206d697373696e6720726f6c65200000000000000000000000000000006037840152518093868401906131f7565b0103602881018452018261300e565b60405193849362461bcd60e51b8552840152602483019061321a565b60648486806040519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015612975577f3031323334353637383961626364656600000000000000000000000000000000901a61294c8486613a3f565b53861c918015612960576000190190612815565b601187634e487b7160e01b6000525260246000fd5b603288634e487b7160e01b6000525260246000fd5b602482603288634e487b7160e01b835252fd5b80603286634e487b7160e01b6024945252fd5b9050346104c9576129c036612e83565b91906129ca61361d565b7f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de85528460205260408520936001600160a01b038093169485875260205260ff60408720541615612af45785853b156101f757604080517ffd9be5220000000000000000000000000000000000000000000000000000000081526001600160a01b03851693810193845260208401879052928391829101038183895af18015612ae957612aad575b5060408051948552911660208401528201527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb90606090a180f35b916060939195612ade7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9694612f90565b959193509193612a72565b6040513d88823e3d90fd5b6040517f42cbfad1000000000000000000000000000000000000000000000000000000008152fd5b9050346104c95760206003193601126104c957357fffffffff0000000000000000000000000000000000000000000000000000000081168091036104c957807f7965db0b0000000000000000000000000000000000000000000000000000000060209214908115612b93575b506040519015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501482612b88565b9050346104c957612bcd36612e83565b909291612bd861361d565b6001600160a01b0390811680612c7c5750831615612c53578380808084875af1612c0061336c565b5015612c0c5750505080f35b604080517f2c024f920000000000000000000000000000000000000000000000000000000081526001600160a01b0390941692840192835260208301919091528291010390fd5b506040517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b90849293941615612df7576040517fa9059cbb0000000000000000000000000000000000000000000000000000000060208083019182526001600160a01b039490941660248301526044808301959095529381529192612cdd60648461300e565b604051926040840184811067ffffffffffffffff821117612de4576040528484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648585015251612d409392918791829182855af1612d3a61336c565b91613b83565b8051828115918215612dc4575b5050905015612d5b57505080f35b608492506040519162461bcd60e51b8352820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b83809293500103126104c55781015180151581036104c557808238612d4d565b602488604189634e487b7160e01b835252fd5b836040517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b8390346104c957816003193601126104c95760209061ffff60015460e81c168152f35b600435906001600160a01b0382168203610cfc57565b602435906001600160a01b0382168203610cfc57565b35906001600160a01b0382168203610cfc57565b6003196060910112610cfc576001600160a01b03906004358281168103610cfc57916024359081168103610cfc579060443590565b6004359063ffffffff82168203610cfc57565b359063ffffffff82168203610cfc57565b9181601f84011215610cfc5782359167ffffffffffffffff8311610cfc5760208381860195010111610cfc57565b6003196080910112610cfc5761ffff906004358281168103610cfc57916024359081168103610cfc579060443567ffffffffffffffff81168103610cfc57906064356001600160a01b0381168103610cfc5790565b9181601f84011215610cfc5782359167ffffffffffffffff8311610cfc576020808501948460051b010111610cfc57565b67ffffffffffffffff8111612fa457604052565b634e487b7160e01b600052604160045260246000fd5b60c0810190811067ffffffffffffffff821117612fa457604052565b6020810190811067ffffffffffffffff821117612fa457604052565b6080810190811067ffffffffffffffff821117612fa457604052565b90601f601f19910116810190811067ffffffffffffffff821117612fa457604052565b6001600160a01b031660008181527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e86630553602052604081205490919060ff1615613077575090565b67ffffffffffffffff60015460a81c161590811561309f575b501561309c5750600190565b90565b90507f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca8252816020526040822090825260205260ff60408220541638613090565b601f8260209493601f19938186528686013760008582860101520116010190565b6131a761309c959361316b836101409561ffff60a080926001600160a01b0380825116865263ffffffff602083015116602087015260408201519067ffffffffffffffff809216604088015260608301511660608701526080820151166080860152015116910152565b5467ffffffffffffffff811660c0840152604081901c61ffff1660e084015260501c6fffffffffffffffffffffffffffffffff16610100830152565b8161012082015201916130e0565b3567ffffffffffffffff81168103610cfc5790565b3563ffffffff81168103610cfc5790565b67ffffffffffffffff8111612fa457601f01601f191660200190565b60005b83811061320a5750506000910152565b81810151838201526020016131fa565b90601f19601f602093613238815180928187528780880191016131f7565b0116010190565b6132a961309c949361316b836101409561ffff60a080926001600160a01b0380825116865263ffffffff602083015116602087015260408201519067ffffffffffffffff809216604088015260608301511660608701526080820151166080860152015116910152565b81610120820152019061321a565b356001600160a01b0381168103610cfc5790565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610cfc570180359067ffffffffffffffff8211610cfc57602001918136038313610cfc57565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe182360301811215610cfc57016020813591019167ffffffffffffffff8211610cfc578136038313610cfc57565b3d15613397573d9061337d826131db565b9161338b604051938461300e565b82523d6000602084013e565b606090565b9167ffffffffffffffff90600592600554918360409360401c16956041908188028881048314891517156135485783036135735760405160209660208201927f19457468657265756d205369676e6564204d6573736167653a0a3332000000008452603c830152603c825260608201908282109082111761355e57604052519020600093845b89861061343b5750505050505050505050600190600090565b838602908682048514871517156135485760019182880190818911613548578682029180830488149015171561354857818111610cfc57878211610cfc578085019103613487816131db565b906134948b51928361300e565b8082523681840111610cfc578b816000926134b795838601378301015285613978565b8b8194929410156135325761351f57506001600160a01b03808316911681111561350c576000526004885260ff876000205416156134fa57600190950194613422565b50505050505050505050600090600390565b5050505050505050505050600090600290565b9b9a505050505050505050505060009190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b83634e487b7160e01b60005260045260246000fd5b5050505050505050600090600190565b3560ff81168103610cfc5790565b9390837fffffffffffffffffffffffffffffffffffffffff00000000000000000000000094613617946058946040519788957fffffffff00000000000000000000000000000000000000000000000000000000602088019b60e01b168b5260601b166024860152603885015284840137810160008382015203603881018452018261300e565b51902090565b3360009081527f7d7ffb7a348e1c6a02869081a26547b49160dd3df72d1d75a570eb9b698292ec602090815260408083205490927fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759160ff16156136815750505050565b61368a33613a66565b9184519061369782612ff2565b6042825284820192606036853782511561380b57603084538251906001916001101561380b5790607860218501536041915b8183116137905750505061374e5760486115a89386936137329361372398519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a86015261286e815180928c6037890191016131f7565b0103602881018752018561300e565b5192839262461bcd60e51b84526004840152602483019061321a565b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f811660108110156137f7577f3031323334353637383961626364656600000000000000000000000000000000901a6137cd8587613a3f565b5360041c9280156137e3576000190191906136c9565b602482634e487b7160e01b81526011600452fd5b602483634e487b7160e01b81526032600452fd5b80634e487b7160e01b602492526032600452fd5b3360009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602090815260408083205490927f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de9160ff16156138835750505050565b61388c33613a66565b9184519061389982612ff2565b6042825284820192606036853782511561380b57603084538251906001916001101561380b5790607860218501536041915b8183116139255750505061374e5760486115a89386936137329361372398519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a86015261286e815180928c6037890191016131f7565b909192600f811660108110156137f7577f3031323334353637383961626364656600000000000000000000000000000000901a6139628587613a3f565b5360041c9280156137e3576000190191906138cb565b9060418151146000146139a6576139a2916020820151906060604084015193015160001a906139b0565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311613a335791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15613a265781516001600160a01b03811615613a20579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b908151811015613a50570160200190565b634e487b7160e01b600052603260045260246000fd5b604051906060820182811067ffffffffffffffff821117612fa457604052602a8252602082016040368237825115613a505760309053815160019060011015613a5057607860218401536029905b808211613b08575050613ac45790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613b6e577f3031323334353637383961626364656600000000000000000000000000000000901a613b448486613a3f565b5360041c918015613b59576000190190613ab4565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b91929015613be45750815115613b97575090565b3b15613ba05790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015613bf75750805190602001fd5b6115a89060405191829162461bcd60e51b835260206004840152602483019061321a56fea2646970667358221220ca9eec351ceaf9fc208cf34c13c8b8cf41cda6f4e6b962972a950c8e3b89397e64736f6c634300081600332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_vid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address[]";
            readonly name: "_messageLibs";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "_signers";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }, {
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "executableHash";
            readonly type: "bytes32";
        }];
        readonly name: "DuplicatedHash";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InstructionExpired";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidRole";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidSignatures";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "target";
            readonly type: "address";
        }];
        readonly name: "InvalidTarget";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "vid";
            readonly type: "uint32";
        }];
        readonly name: "InvalidVid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySelf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySigner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "QuorumIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "signersSize";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "quorum";
            readonly type: "uint64";
        }];
        readonly name: "SignersSizeIsLessThanQuorum";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly name: "StateAlreadySet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UnorderedSigners";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_index";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "ExecuteFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "vid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "signatures";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecuteParam";
            readonly name: "param";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "_hash";
            readonly type: "bytes32";
        }];
        readonly name: "HashAlreadyUsed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IDVN.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "SetDstConfig";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }];
        readonly name: "UpdateQuorum";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_signer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "UpdateSigner";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "VerifierFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "idx";
            readonly type: "uint256";
        }];
        readonly name: "VerifySignaturesFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "gas";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "floorMarginUSD";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "vid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "signatures";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ExecuteParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "execute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_vid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiration";
            readonly type: "uint256";
        }];
        readonly name: "hashCallData";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "quorum";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "vid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "signatures";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ExecuteParam";
            readonly name: "_param";
            readonly type: "tuple";
        }];
        readonly name: "quorumChangeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IDVN.DstConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDstConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }];
        readonly name: "setQuorum";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_signer";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setSigner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "signerSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "signers";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "executableHash";
            readonly type: "bytes32";
        }];
        readonly name: "usedHashes";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "used";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_signatures";
            readonly type: "bytes";
        }];
        readonly name: "verifySignatures";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }, {
            readonly internalType: "enum MultiSig.Errors";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "vid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFeeFromUlnV2";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): DVNInterface;
    static connect(address: string, runner?: ContractRunner | null): DVN;
}

type DVNFeeLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DVNFeeLib__factory extends ContractFactory {
    constructor(...args: DVNFeeLibConstructorParams);
    getDeployTransaction(_nativeDecimalsRate: BigNumberish, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_nativeDecimalsRate: BigNumberish, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<DVNFeeLib & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): DVNFeeLib__factory;
    static readonly bytecode = "0x60a0346100a057601f610e1338819003918201601f19168301916001600160401b038311848410176100a5578084926020946040528339810103126100a0575160008054336001600160a01b0319821681178355604051939290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3608052610d5790816100bc823960805181610b4e0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c806301e3366714610483578063715018a6146104025780637bfa20a9146103175780638da5cb5b146102e0578063df2b057e1461018a5763f2fde38b1461006f5750610011565b3461018657602060031936011261018657610088610754565b90610091610919565b73ffffffffffffffffffffffffffffffffffffffff8092169283156101035750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b506101a06101973661077c565b90939193610998565b5060806101c067ffffffffffffffff6101ba838501610800565b16610aab565b73ffffffffffffffffffffffffffffffffffffffff6101de84610815565b166101eb60208501610836565b886101f587610800565b9761024f8a51998a96879586947fc1723a1d000000000000000000000000000000000000000000000000000000008652850191604091949367ffffffffffffffff9163ffffffff6060860197168552602085015216910152565b03925af19283156102d6579185916102959493602097939461029c575b5061028f8661028860a06102818b87016108ed565b94016108ed565b93016108fc565b92610b03565b9051908152f35b9093506102c291925060803d6080116102cf575b6102ba8183610847565b8101906108b6565b939291505091923861026c565b503d6102b0565b84513d87823e3d90fd5b50503461031357816003193601126103135773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b5080fd5b5034610186576103296101973661077c565b50608061034367ffffffffffffffff6101ba838501610800565b73ffffffffffffffffffffffffffffffffffffffff61036184610815565b1661036e60208501610836565b61037786610800565b966103d18951988995869485947f88a4124c000000000000000000000000000000000000000000000000000000008652850191604091949367ffffffffffffffff9163ffffffff6060860197168552602085015216910152565b03915afa9283156102d6579185916102959493602097939461029c575061028f8661028860a06102818b87016108ed565b833461048057806003193601126104805761041b610919565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50346101865760606003193601126101865761049d610754565b6024359273ffffffffffffffffffffffffffffffffffffffff8085169081860361075057604435936104cd610919565b168061056e575015610546578480808085885af16104e9610bdd565b50156104f6575050505080f35b517f2c024f9200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909316918301918252602082015281906040010390fd5b9050517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b909491929394156107285782517fa9059cbb00000000000000000000000000000000000000000000000000000000602080830191825273ffffffffffffffffffffffffffffffffffffffff94909416602483015260448083019690965294815291936105db606484610847565b83519284840184811067ffffffffffffffff8211176106fc5785528584527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564868501525161063b9392918891829182855af1610635610bdd565b91610c1d565b80518381159182156106d8575b50509050156106575750505080f35b6084935051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b83809293500103126106f85782015180151581036106f857808338610648565b8480fd5b60248960418a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8483517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b8680fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361077757565b600080fd5b90600319820161014081126107775760c0136107775760049160607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3c8201126107775760c4916101243567ffffffffffffffff9283821161077757806023830112156107775781600401359384116107775760248483010111610777576024019190565b3567ffffffffffffffff811681036107775790565b3573ffffffffffffffffffffffffffffffffffffffff811681036107775790565b3563ffffffff811681036107775790565b90601f601f19910116810190811067ffffffffffffffff82111761086a57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b51906fffffffffffffffffffffffffffffffff8216820361077757565b9190826080910312610777578151916108d160208201610899565b916108ea60606108e360408501610899565b9301610899565b90565b3561ffff811681036107775790565b356fffffffffffffffffffffffffffffffff811681036107775790565b73ffffffffffffffffffffffffffffffffffffffff60005416330361093a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b816109d857506109a757600090565b60246040517f9af41d3300000000000000000000000000000000000000000000000000000000815260006004820152fd5b9080600311610777578060041015610a3a57600182013560f01c600301806005116107775711610777576024906004604051917f3d6c5c70000000000000000000000000000000000000000000000000000000008352013560f81c6004820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810292918115918404141715610a7c57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b604181029080820460411490151715610a7c5780601f811680610ae7575b505061012490808201809211610a7c5761016401809111610a7c5790565b810391508111610a7c5760208101809111610a7c573880610ac9565b93929161271091610b229161ffff91828116610bd657505b1685610a69565b04916fffffffffffffffffffffffffffffffff80911691821591828015610bcc575b610bc357610b74917f00000000000000000000000000000000000000000000000000000000000000009116610a69565b90610b9457048201809211610a7c5780821115610b8f575090565b905090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50505050905090565b5080821615610b44565b9050610b1b565b3d15610c18573d9067ffffffffffffffff821161086a5760405191610c0c6020601f19601f8401160184610847565b82523d6000602084013e565b606090565b91929015610c985750815115610c31575090565b3b15610c3a5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610cab5750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110610d0a57505050601f19601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201610ce756fea26469706673582212209bb0ec228614c8986002ecba26bef576f239799dfda525a946d9751377bd408f64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_nativeDecimalsRate";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "InvalidDVNOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "optionType";
            readonly type: "uint8";
        }];
        readonly name: "UnsupportedOptionType";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IDVNFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IDVN.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IDVNFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IDVN.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): DVNFeeLibInterface;
    static connect(address: string, runner?: ContractRunner | null): DVNFeeLib;
}

declare class MultiSig__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "OnlySigner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "QuorumIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "signersSize";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "quorum";
            readonly type: "uint64";
        }];
        readonly name: "SignersSizeIsLessThanQuorum";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly name: "StateAlreadySet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UnorderedSigners";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }];
        readonly name: "UpdateQuorum";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_signer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "UpdateSigner";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "quorum";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "signerSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "signers";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_signatures";
            readonly type: "bytes";
        }];
        readonly name: "verifySignatures";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }, {
            readonly internalType: "enum MultiSig.Errors";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MultiSigInterface;
    static connect(address: string, runner?: ContractRunner | null): MultiSig;
}

type index$s_DVNFeeLib__factory = DVNFeeLib__factory;
declare const index$s_DVNFeeLib__factory: typeof DVNFeeLib__factory;
type index$s_DVN__factory = DVN__factory;
declare const index$s_DVN__factory: typeof DVN__factory;
type index$s_MultiSig__factory = MultiSig__factory;
declare const index$s_MultiSig__factory: typeof MultiSig__factory;
declare namespace index$s {
  export {
    index$s_DVNFeeLib__factory as DVNFeeLib__factory,
    index$s_DVN__factory as DVN__factory,
    index$s_MultiSig__factory as MultiSig__factory,
  };
}

declare class IDVN__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IDVN.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "SetDstConfig";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IDVNInterface;
    static connect(address: string, runner?: ContractRunner | null): IDVN$1;
}

declare class IDVNFeeLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "optionType";
            readonly type: "uint8";
        }];
        readonly name: "UnsupportedOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IDVNFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IDVN.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IDVNFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IDVN.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): IDVNFeeLibInterface;
    static connect(address: string, runner?: ContractRunner | null): IDVNFeeLib;
}

declare class ILayerZeroDVN__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "packetHeader";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "payloadHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }];
            readonly internalType: "struct ILayerZeroDVN.AssignJobParam";
            readonly name: "_param";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroDVNInterface;
    static connect(address: string, runner?: ContractRunner | null): ILayerZeroDVN;
}

declare class IUltraLightNode__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "commitVerification";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IUltraLightNodeInterface;
    static connect(address: string, runner?: ContractRunner | null): IUltraLightNode;
}

type index$r_IDVNFeeLib__factory = IDVNFeeLib__factory;
declare const index$r_IDVNFeeLib__factory: typeof IDVNFeeLib__factory;
type index$r_IDVN__factory = IDVN__factory;
declare const index$r_IDVN__factory: typeof IDVN__factory;
type index$r_ILayerZeroDVN__factory = ILayerZeroDVN__factory;
declare const index$r_ILayerZeroDVN__factory: typeof ILayerZeroDVN__factory;
type index$r_IUltraLightNode__factory = IUltraLightNode__factory;
declare const index$r_IUltraLightNode__factory: typeof IUltraLightNode__factory;
declare namespace index$r {
  export {
    index$r_IDVNFeeLib__factory as IDVNFeeLib__factory,
    index$r_IDVN__factory as IDVN__factory,
    index$r_ILayerZeroDVN__factory as ILayerZeroDVN__factory,
    index$r_IUltraLightNode__factory as IUltraLightNode__factory,
  };
}

type DVNOptionsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class DVNOptions__factory extends ContractFactory {
    constructor(...args: DVNOptionsConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<DVNOptions & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): DVNOptions__factory;
    static readonly bytecode = "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220cc61fae21c6aeb1a820ebdedb1fbc2d00586ac449cd46bfef5b64734d674628c64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidDVNIdx";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "InvalidDVNOptions";
        readonly type: "error";
    }];
    static createInterface(): DVNOptionsInterface;
    static connect(address: string, runner?: ContractRunner | null): DVNOptions;
}

type UlnOptionsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class UlnOptions__factory extends ContractFactory {
    constructor(...args: UlnOptionsConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<UlnOptions & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): UlnOptions__factory;
    static readonly bytecode = "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122034b3b2aafc5b642206aea4140da606158b30dc5e8da84aa8f47deefc2f0bf97b64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidLegacyType1Option";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLegacyType2Option";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "workerId";
            readonly type: "uint8";
        }];
        readonly name: "InvalidWorkerId";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "InvalidWorkerOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "optionType";
            readonly type: "uint16";
        }];
        readonly name: "UnsupportedOptionType";
        readonly type: "error";
    }];
    static createInterface(): UlnOptionsInterface;
    static connect(address: string, runner?: ContractRunner | null): UlnOptions;
}

type index$q_DVNOptions__factory = DVNOptions__factory;
declare const index$q_DVNOptions__factory: typeof DVNOptions__factory;
type index$q_UlnOptions__factory = UlnOptions__factory;
declare const index$q_UlnOptions__factory: typeof UlnOptions__factory;
declare namespace index$q {
  export {
    index$q_DVNOptions__factory as DVNOptions__factory,
    index$q_UlnOptions__factory as UlnOptions__factory,
  };
}

type ReceiveUln302ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ReceiveUln302__factory extends ContractFactory {
    constructor(...args: ReceiveUln302ConstructorParams);
    getDeployTransaction(_endpoint: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_endpoint: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ReceiveUln302 & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): ReceiveUln302__factory;
    static readonly bytecode = "0x60c080604052346200013f5760208162002380803803809162000023828562000144565b8339810103126200013f57516001600160a01b03908181168082036200013f5760206004916040519283809263416ecebf60e01b82525afa9081156200013357600091620000e6575b50906000543360018060a01b0319821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360805260a05261220190816200017f82396080518181816108d201528181610bdc01526119ae015260a051818181610b3001526112060152f35b6020813d6020116200012a575b81620001026020938362000144565b810103126200012657519063ffffffff82168203620001235750386200006c565b80fd5b5080fd5b3d9150620000f3565b6040513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200016857604052565b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b60009260e0843560e01c91826301ffc9a714610dac575081630223536e14610cae578482630894edf114610b17575081631881d94d14610afa57816320efd7221461088557816327d12cd91461084157816329460b0b146104d95750806339e3f938146104175780633c782a52146103bd57806343ea4fa91461037757806354fd4d501461034e5780636750cd4c1461031f578063715018a6146102aa5780638da5cb5b146102845780639c33abf7146101e95763f2fde38b146100d857600080fd5b346101e55760206003193601126101e5576100f1610ef5565b906100fa611c8e565b6001600160a01b03809216928315610162575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50503461028057606060031936011261028057610204610f63565b6024356001600160a01b038116810361027b576044359063ffffffff8216820361027b5761023192611594565b9181519283916020808452825192836020860152825b84811061026557505050828201840152601f01601f19168101030190f35b8181018301518882018801528795508201610247565b600080fd5b5080fd5b5050346102805781600319360112610280576001600160a01b0360209254169051908152f35b833461031c578060031936011261031c576102c3611c8e565b60006001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50503461028057602060031936011261028057602090610345610340610f63565b6120fd565b90519015158152f35b505034610280578160031936011261028057906002826060935192600384526020840152820152f35b5050346102805780600319360112610280576103b9906103a6610398610ef5565b6103a0610f50565b90611403565b9051918291602083526020830190610fb3565b0390f35b50346101e55760606003193601126101e557604435906001600160a01b03821680920361027b57602093839135815260028552818120602435825285522090600052825267ffffffffffffffff8160002054169051908152f35b5050346102805780600319360112610280576103b99163ffffffff8261043b610ef5565b926001600160a01b0361044c610f50565b94610455611373565b50168152600160205220911660005260205280600020906104c2600282519361047d8561104d565b60ff815467ffffffffffffffff811687528181871c166020880152818160481c168688015260501c1660608601526104b7600182016113a7565b6080860152016113a7565b60a083015251918291602083526020830190610fb3565b9190503461083d57602091826003193601126108395767ffffffffffffffff92823584811161083557869491610513879236908701610f1f565b91909561051e611c8e565b875b8381106106d1575050825195828288018389525283870193808460051b8901019682968a935b868510610577578b7faaf3aaa0c11056e86ac56eb653e25b005ca1a7d4dcd21ba24647f7ab63f3b5608c8c038da180f35b9091929394959697987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0808c8303018a528a357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1843603018112156106cd57830190813563ffffffff811680910361027b57835288820135927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018412156106c95787878b94936106b8936106a987966001990185888401528b61063d82610ead565b16868401526106a061068f6106538a84016110e4565b9761067e61066d60609260ff809c16848a015286016110e4565b918a608093168389015285016110e4565b9860a09916898701528301836112da565b60c08087015261010086019161132d565b958101906112da565b9390928286030191015261132d565b9b0199019796950193929190610546565b8e80fd5b8d80fd5b806005989697939495981b8601357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18736030181121561083157860184810160ff8080610728896107228688611299565b016112cc565b1614610809578061073d8c6107228587611299565b16146107e15761074d8183611299565b358981168091036107dd5789146107b557600192916107a8916107a28c8e6107866107813661077c8789611299565b611161565b611d00565b808052878b52209261077c61079a826110d3565b933692611299565b91611d51565b0196939291959496610520565b838a517f8f6ae8f8000000000000000000000000000000000000000000000000000000008152fd5b8b80fd5b838a517f05f7ab62000000000000000000000000000000000000000000000000000000008152fd5b848b517f1b668041000000000000000000000000000000000000000000000000000000008152fd5b8980fd5b8680fd5b8480fd5b8380fd5b5050913461031c575061085c61085636610ec2565b916111ff565b905190600381101561087057602092508152f35b602183634e487b7160e01b6000525260246000fd5b505090346101e557806003193601126101e5576108a0610ef5565b9160249067ffffffffffffffff8235818111610835576108c39036908401610f1f565b94906001600160a01b039033827f00000000000000000000000000000000000000000000000000000000000000001603610ad257885b878110610904578980f35b8060051b8201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811215610ace57820190610943826110d3565b61094c816120fd565b15610a99575060209163ffffffff818401600282610969836110d3565b1603610a5f5750610979826110d3565b9187810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1813603018212156106c95701918d8335938a8511610280578681019480360386136101e55781019487828703126101e55735918b831161031c578f97610a398560019a610a348f968f90610a218591887f82118522aa536ac0e96cc5c689407ae42b89d592aa133890a01f1509842f50819f9c81610a569e01920101611161565b9889928516988981526001895220611d51565b611403565b508b5195869560609387521690850152808b850152830190610fb3565b0390a1016108f9565b898b92610a6c8a936110d3565b9251927f3018cc2b0000000000000000000000000000000000000000000000000000000084521690820152fd5b88908863ffffffff8851927f2146a07a0000000000000000000000000000000000000000000000000000000084521690820152fd5b8a80fd5b8483517f7eb966c8000000000000000000000000000000000000000000000000000000008152fd5b505050346102805781600319360112610280576020905160018152f35b80858534610caa57610b2836610ec2565b610b569591957f00000000000000000000000000000000000000000000000000000000000000008785611609565b6001600160a01b039586610b6a8286612154565b1696610bb0610b7983876116c2565b92610ba085610b88868d611403565b610b9336858c61108c565b6020815191012090611742565b610baa818861191f565b9661192e565b9463ffffffff885193610bc28561101b565b168352602083015267ffffffffffffffff809516878301527f00000000000000000000000000000000000000000000000000000000000000001690813b1561083d578360a492610c639489519a8b9687957fa825d7470000000000000000000000000000000000000000000000000000000087528b87019067ffffffffffffffff6040809263ffffffff815116855260208101516020860152015116910152565b606485015260848401525af18015610ca057610c7d578480f35b8311610c8d575052818080808480f35b836041602492634e487b7160e01b835252fd5b83513d87823e3d90fd5b5050fd5b505090346101e55760606003193601126101e557813567ffffffffffffffff9283821161083957610ce191369101610e7f565b9190602435604435948516809503610da857601f84601f19927f2cb0eed7538baeae4c6fde038c0fd0384d27de0dd55a228c65847bda6aa1ab569760a096610d2a36858961108c565b602081519101208b526002602052808b20838c52602052808b20338c52602052808b20827fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008254161790558051988997338952608060208a01528160808a0152898901378a888589010152860152606085015201168101030190a180f35b8580fd5b93505050346101e55760206003193601126101e557357fffffffff0000000000000000000000000000000000000000000000000000000081168091036101e557602092507f0ab7be9f000000000000000000000000000000000000000000000000000000008114908115610e22575b5015158152f35b7f97f0258400000000000000000000000000000000000000000000000000000000811491508115610e55575b5038610e1b565b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501438610e4e565b9181601f8401121561027b5782359167ffffffffffffffff831161027b576020838186019501011161027b57565b359067ffffffffffffffff8216820361027b57565b604060031982011261027b576004359067ffffffffffffffff821161027b57610eed91600401610e7f565b909160243590565b600435906001600160a01b038216820361027b57565b35906001600160a01b038216820361027b57565b9181601f8401121561027b5782359167ffffffffffffffff831161027b576020808501948460051b01011161027b57565b6024359063ffffffff8216820361027b57565b6004359063ffffffff8216820361027b57565b90815180825260208080930193019160005b828110610f96575050505090565b83516001600160a01b031685529381019392810192600101610f88565b6110189167ffffffffffffffff825116815260ff602083015116602082015260ff604083015116604082015260ff606083015116606082015260a0611007608084015160c0608085015260c0840190610f76565b9201519060a0818403910152610f76565b90565b6060810190811067ffffffffffffffff82111761103757604052565b634e487b7160e01b600052604160045260246000fd5b60c0810190811067ffffffffffffffff82111761103757604052565b90601f601f19910116810190811067ffffffffffffffff82111761103757604052565b92919267ffffffffffffffff821161103757604051916110b66020601f19601f8401160184611069565b82948184528183011161027b578281602093846000960137010152565b3563ffffffff8116810361027b5790565b359060ff8216820361027b57565b81601f8201121561027b5780359160209167ffffffffffffffff8411611037578360051b906040519461112785840187611069565b8552838086019282010192831161027b578301905b82821061114a575050505090565b83809161115684610f0b565b81520191019061113c565b919060c08382031261027b576040519061117a8261104d565b819361118581610ead565b8352611193602082016110e4565b60208401526111a4604082016110e4565b60408401526111b5606082016110e4565b606084015267ffffffffffffffff91608082013583811161027b57816111dc9184016110f2565b608085015260a082013592831161027b5760a0926111fa92016110f2565b910152565b919061122c7f00000000000000000000000000000000000000000000000000000000000000008285611609565b6001600160a01b0361123e8285612154565b169261124a82826116c2565b9061125783828785611958565b1561128f5761126c6112749261128196611403565b92369161108c565b6020815191012090611b24565b61128a57600090565b600190565b5050505050600290565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff418136030182121561027b570190565b3560ff8116810361027b5790565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561027b57016020813591019167ffffffffffffffff821161027b578160051b3603831361027b57565b91908082526020809201929160005b82811061134a575050505090565b9091929382806001926001600160a01b0361136489610f0b565b1681520195019392910161133c565b604051906113808261104d565b606060a0836000815260006020820152600060408201526000838201528260808201520152565b90604051918281549182825260209260208301916000526020600020936000905b8282106113e0575050506113de92500383611069565b565b85546001600160a01b0316845260019586019588955093810193909101906113c8565b919061140d611373565b63ffffffff90911660008181527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602090815260408083206001600160a01b03909716835260018252808320938352928152908290208054939591939067ffffffffffffffff8083168061157e575083541687525b60ff9482851c8616806115535750858454861c169081611538575b50505b848260481c169081156000146114f957505050805491838360481c1691826114d2575b50505050505b6113de82611d00565b60026114de91016113a7565b60a087015285015260501c16606083015238808080806114c3565b909250848394929403611511575b50505050506114c9565b600261151d91016113a7565b60a087015285015260501c1660608301523880808080611507565b611544600186016113a7565b60808a0152880152388061149d565b90868203611563575b50506114a0565b61156f600184016113a7565b60808a0152880152388061155c565b90810361158c575b50611482565b875238611586565b9163ffffffff16600281036115d857506115b46115ca9261101892611403565b6040519283916020808401526040830190610fb3565b03601f198101835282611069565b602490604051907f3018cc2b0000000000000000000000000000000000000000000000000000000082526004820152fd5b919060518103611698578060011161027b576001833560f81c0361166e5760311161027b5763ffffffff602d911691013560e01c0361164457565b60046040517f9a61cd26000000000000000000000000000000000000000000000000000000008152fd5b60046040517f28fac066000000000000000000000000000000000000000000000000000000008152fd5b60046040517f0666bafd000000000000000000000000000000000000000000000000000000008152fd5b90600d1161027b576009013560e01c90565b80518210156116e85760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60ff16801561172c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b634e487b7160e01b600052601160045260246000fd5b919290602083019360ff9485815116611857575b50846060850151169060005b86604087015116908781169182101561182d576117fb6001600160a01b0361178f8a9460a08b01516116d4565b51895160008981526002602090815260408083208a84528252808320959094166001600160a01b0316825293909352912080547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000811690915567ffffffffffffffff9081169116111590565b611809575b60010116611762565b9261181491506116fe565b9186831615611824578690611800565b50505050915050565b60046040517f692c93cb000000000000000000000000000000000000000000000000000000008152fd5b92939160005b8685511687821690811015611900576001600160a01b036118856118f19260808801516116d4565b51865160008681526002602090815260408083208a84528252808320959094166001600160a01b0316825293909352912080547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000811690915567ffffffffffffffff9081169116111590565b1561182d57600101861661185d565b50509193925084604085015116156119185738611756565b5050915050565b90602d1161027b57600d013590565b9060091161027b576001013560c01c90565b9081602091031261027b5751801515810361027b5790565b919261196e90611968818661191f565b9461192e565b91604093845161197d8161101b565b63ffffffff80931681526020938482019283528682019567ffffffffffffffff80911687526001600160a01b0390817f000000000000000000000000000000000000000000000000000000000000000016918951937fc9a54a99000000000000000000000000000000000000000000000000000000008552611a26600486018767ffffffffffffffff6040809263ffffffff815116855260208101516020860152015116910152565b16928360648201528781608481865afa908115611b1957600091611afc575b5015611aee57869560849451169451975116885197889586947fe361b59c00000000000000000000000000000000000000000000000000000000865260048601526024850152604484015260648301525afa928315611ae45750600092611ab7575b5050611ab257600190565b600090565b611ad69250803d10611add575b611ace8183611069565b810190611940565b3880611aa7565b503d611ac4565b513d6000823e3d90fd5b505050505050505050600090565b611b139150883d8a11611add57611ace8183611069565b38611a45565b8a513d6000823e3d90fd5b91909260208084019360ff9485815116611bea575b50846060820151169160005b604087818501511688831690811015611bdb57908892918a60005260028552816000208960005285526001600160a01b03611b88836000209260a08901516116d4565b5116600052845267ffffffffffffffff80916000205416908551161115611bb3575b60010116611b45565b93611bbe91506116fe565b9286841615611bce578690611baa565b5050505092505050600190565b50505050505092505050600090565b94959092939160005b8787511688821690811015611c68578360005260028352604090816000208660005284526001600160a01b03611c31836000209260808a01516116d4565b5116600052835267ffffffffffffffff809160002054169086511611611c5b576001018716611bf3565b5050505050915050600090565b5050919392909594508460408201511615611c835738611b39565b505092505050600190565b6001600160a01b03600054163303611ca257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60ff602082015116159081611d41575b50611d1757565b60046040517f7e36c284000000000000000000000000000000000000000000000000000000008152fd5b60ff915060600151161538611d10565b916020918282019260ff938481511685811480156120f5575b156120c35750608084015151612099575b60409586850195808751168181148015612091575b15611fe8575060a086015151611fbf57606086015116611f96575b63ffffffff60009416845282528583209567ffffffffffffffff9569ff00000000000000000068ff000000000000000088885116938a549551901b16915160481b16917fffffffffffffffffffffffffffffffffffffffffff00000000000000000000006aff00000000000000000000606089015160501b1694161717171785556001946001810190608085015191825190878211611f82576801000000000000000093848311611f6e5785908254848455808510611f44575b500190865284862089875b848110611f29575050505050600260a09101940151908151958611611f15578511611f015781908454868655808710611ed7575b5001928252808220915b848110611ebd57505050505050565b83516001600160a01b031683820155928101928501611eae565b858552878784872092830192015b828110611ef3575050611ea4565b868155859450899101611ee5565b602483634e487b7160e01b81526041600452fd5b602484634e487b7160e01b81526041600452fd5b876001600160a01b0385511694019381840155018a90611e70565b8389528b85848b2092830192015b828110611f60575050611e65565b8a81558994508d9101611f52565b602487634e487b7160e01b81526041600452fd5b602486634e487b7160e01b81526041600452fd5b600487517f81da67ee000000000000000000000000000000000000000000000000000000008152fd5b600488517f05f7ab62000000000000000000000000000000000000000000000000000000008152fd5b9060a0870191808351511490811591612086575b5061205d57806060880151168015918215612050575b5050612027576120229051612163565b611dab565b600488517f81da67ee000000000000000000000000000000000000000000000000000000008152fd5b8951161090503880612012565b600489517f05f7ab62000000000000000000000000000000000000000000000000000000008152fd5b607f91501138611ffc565b508015611d90565b60046040517f1b668041000000000000000000000000000000000000000000000000000000008152fd5b60808501908082515114908115916120ea575b50612099576120e59051612163565b611d7b565b607f915011386120d6565b508015611d6a565b63ffffffff1660009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090819020549081901c60ff161580159190612147575090565b60ff915060501c16151590565b9060511161027b576031013590565b60009190825b81518410156121c5576001600160a01b038061218586856116d4565b5116911681111561219b57600190930192612169565b60046040517fa228a30b000000000000000000000000000000000000000000000000000000008152fd5b5050905056fea2646970667358221220c6995a71f7066fe88be0d5a2420fb01ac04a25eb6bebc9aa72004d30b4fdcf7f64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "configType";
            readonly type: "uint32";
        }];
        readonly name: "InvalidConfigType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPacketHeader";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPacketVersion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Verifying";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dvn";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "header";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "confirmations";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "proofHash";
            readonly type: "bytes32";
        }];
        readonly name: "PayloadVerified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "commitVerification";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "dvn";
            readonly type: "address";
        }];
        readonly name: "hashLookup";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "confirmations";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "enum VerificationState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): ReceiveUln302Interface;
    static connect(address: string, runner?: ContractRunner | null): ReceiveUln302;
}

type SendUln302ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class SendUln302__factory extends ContractFactory {
    constructor(...args: SendUln302ConstructorParams);
    getDeployTransaction(_endpoint: AddressLike, _treasuryGasLimit: BigNumberish, _treasuryGasForFeeCap: BigNumberish, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_endpoint: AddressLike, _treasuryGasLimit: BigNumberish, _treasuryGasForFeeCap: BigNumberish, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<SendUln302 & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): SendUln302__factory;
    static readonly bytecode = "0x61010080604052346200016757606081620046e180380380916200002482856200016c565b833981010312620001675780516001600160a01b039182821691828103620001675760046020604081850151940151946040519283809263416ecebf60e01b82525afa9081156200015b576000916200010e575b509060805260a0526000543360018060a01b0319821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360c05260e05261453a9081620001a782396080518181816103970152818161053b01528181610b060152611649015260a05181505060c051818181612a800152612f94015260e05181612ea10152f35b6020813d60201162000152575b816200012a602093836200016c565b810103126200014e57519063ffffffff821682036200014b57503862000078565b80fd5b5080fd5b3d91506200011b565b6040513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200019057604052565b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461017b578063188183f4146101765780631881d94d14610171578063200175f71461016c57806320efd7221461016757806329460b0b1461016257806339e3f9381461015d5780634389e58f1461015857806343ea4fa9146101535780634d9632001461014e57806354fd4d501461014957806361d027b3146101445780636750cd4c1461013f578063715018a61461013a5780638da5cb5b146101355780639c33abf714610130578063c14c43491461012b578063d80e9bd914610126578063f0f4426014610121578063f2fde38b1461011c578063faaebd21146101175763fd9be5220361000e576115cc565b61158e565b61149a565b611416565b6110ad565b610f33565b610ede565b610eb7565b610e42565b610e11565b610dea565b610dc0565b610d65565b610d22565b610ae0565b610920565b610696565b6104ee565b61030d565b6102f1565b6102b1565b3461024d57602060031936011261024d576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361024d57807f97f025840000000000000000000000000000000000000000000000000000000060209214908115610223575b81156101f9575b506040519015158152f35b7f01ffc9a700000000000000000000000000000000000000000000000000000000915014386101ee565b7fb6e9ace300000000000000000000000000000000000000000000000000000000811491506101e7565b600080fd5b6001600160a01b0381160361024d57565b359061026e82610252565b565b63ffffffff81160361024d57565b359061026e82610270565b600319604091011261024d576004356102a181610252565b906024356102ae81610270565b90565b3461024d5760406102ca6102c436610289565b90611868565b6102ef825180926001600160a01b036020809263ffffffff8151168552015116910152565bf35b3461024d57600060031936011261024d57602060405160008152f35b3461024d57606060031936011261024d5760043561032a81610252565b60243561033681610252565b6044359161035b61034f6002546001600160a01b031690565b6001600160a01b031690565b3303610493576040517fe1758bd80000000000000000000000000000000000000000000000000000000081526001600160a01b036020826004817f000000000000000000000000000000000000000000000000000000000000000085165afa91821561048e5760009261045d575b508083169116146104335761042e836104047fe081464b7278501267de69fa85b7b9560b0ae05d5fbfaab9b1986c70356e2efe95858561231f565b604051938493846040919493929460608201956001600160a01b0380921683521660208201520152565b0390a1005b60046040517f08d198d3000000000000000000000000000000000000000000000000000000008152fd5b61048091925060203d602011610487575b61047881836117d2565b810190611921565b90386103c9565b503d61046e565b611936565b60046040517fb90cdbb1000000000000000000000000000000000000000000000000000000008152fd5b9181601f8401121561024d5782359167ffffffffffffffff831161024d576020808501948460051b01011161024d57565b3461024d5760408060031936011261024d576004803561050d81610252565b60243567ffffffffffffffff811161024d5761052d9036906004016104bd565b929092336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000160361066c5760005b81811061056c57005b610577818387611971565b610588610583826119b6565b612444565b6020810160016105a361059a836119b6565b63ffffffff1690565b036105de5750906105d882866105d26105ca6105c06001976119b6565b938c8101906119c0565b810190611b83565b91612508565b01610563565b600263ffffffff6105ee836119b6565b160361061f57509061061a828661061461060c6105c06001976119b6565b810190611b5d565b9161248c565b6105d8565b8461066861062d8a936119b6565b92517f3018cc2b00000000000000000000000000000000000000000000000000000000815263ffffffff909316918301918252829160200190565b0390fd5b60046040517f7eb966c8000000000000000000000000000000000000000000000000000000008152fd5b3461024d5760208060031936011261024d57600467ffffffffffffffff813581811161024d576106ca9036906004016104bd565b9290916106d5612618565b60005b848110610710576040517faaf3aaa0c11056e86ac56eb653e25b005ca1a7d4dcd21ba24647f7ab63f3b560908061042e888883611cea565b61071b818686611bbd565b8681019060ff8061073f6107398b6107338787611bfd565b01611c30565b60ff1690565b1461084457604090610758610739836107338787611bfd565b1461081c578461078061077361076e8686611bfd565b611c3a565b67ffffffffffffffff1690565b146107f4575081816107a86107a361079e600197966107ee96611bfd565b611c44565b612670565b6000805260016020526107e861079e7fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49936107e2846119b6565b93611bfd565b91612823565b016106d8565b8590517f8f6ae8f8000000000000000000000000000000000000000000000000000000008152fd5b8590517f05f7ab62000000000000000000000000000000000000000000000000000000008152fd5b856040517f1b668041000000000000000000000000000000000000000000000000000000008152fd5b90815180825260208080930193019160005b82811061088d575050505090565b83516001600160a01b03168552938101939281019260010161087f565b6102ae9167ffffffffffffffff825116815260ff602083015116602082015260ff604083015116604082015260ff606083015116606082015260a06108fe608084015160c0608085015260c084019061086d565b9201519060a081840391015261086d565b9060206102ae9281815201906108aa565b3461024d576109e861096a6001600160a01b0361093c36610289565b9190610946611e8f565b5016600052600160205260406000209063ffffffff16600052602052604060002090565b6109d760026040519261097c8461175d565b6109c060ff825467ffffffffffffffff81168752818160401c1660208801526109b0828260481c16604089019060ff169052565b60501c16606086019060ff169052565b6109cc60018201611ec3565b608085015201611ec3565b60a08201526040519182918261090f565b0390f35b8015150361024d57565b6044359061026e826109ec565b906003199060608284011261024d5760043567ffffffffffffffff9283821161024d5760e090828603011261024d57600401926024359083821161024d578060238301121561024d57816004013593841161024d576024848301011161024d5760240191906102ae6109f6565b60005b838110610a835750506000910152565b8181015183820152602001610a73565b90601f19601f602093610ab181518092818752878088019101610a70565b0116010190565b80610ad36060926102ae959460208091805184520151910152565b8160408201520190610a93565b3461024d57610aee36610a03565b9091610af861184f565b506001600160a01b039233847f0000000000000000000000000000000000000000000000000000000000000000160361066c57610b34916130d4565b906040850191823595610b4687610252565b6060810192833597610b5789610270565b610b618982611868565b90610b6f60c08501856119c0565b9a9050610b8363ffffffff8451168c612c87565b610bd660209a8b809501511694610b9983610270565b610ba284610252565b6040519c8d9485947f717e8a4200000000000000000000000000000000000000000000000000000000865260048601612b49565b03816000855af197881561048e57600098610cad575b5092610c63610c55610c4f610c5d9895610c6f98957f61ed099e74a97a1d7f8bb0952a88ca8b7b8ebd00c126ea04671f92a81213318a8d610c699a8e82610c8d575b50604080516001600160a01b039290921682526020820192909252a1612d3b565b9a611f69565b968793611f1d565b916119b6565b906129d8565b92611f69565b91610c786117f5565b9283528201526109e860405192839283610ab8565b60049082600052526040600020610ca5838254611f69565b90558e610c2e565b610c6994919850610c55610c4f610c5d9895610c6f98957f61ed099e74a97a1d7f8bb0952a88ca8b7b8ebd00c126ea04671f92a81213318a8c610d08610c6397823d8411610d1b575b610d0081836117d2565b810190612b3a565b9e979a5050509598509598505050610bec565b503d610cf6565b3461024d576109e8610d3c610d3636610289565b90611f76565b6040519182916020835260208301906108aa565b9063ffffffff16600052602052604060002090565b3461024d576040610da7610d7836610289565b6001600160a01b039291928093166000526003602052836000209063ffffffff16600052602052604060002090565b549082519163ffffffff8116835260201c166020820152f35b3461024d57600060031936011261024d576060604051600381526000602082015260026040820152f35b3461024d57600060031936011261024d5760206001600160a01b0360025416604051908152f35b3461024d57602060031936011261024d576020610e38600435610e3381610270565b612ae5565b6040519015158152f35b3461024d57600080600319360112610eb457610e5c612618565b806001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b3461024d57600060031936011261024d5760206001600160a01b0360005416604051908152f35b3461024d57606060031936011261024d576109e8610f1f600435610f0181610270565b602435610f0d81610252565b60443591610f1a83610270565b612136565b604051918291602083526020830190610a93565b3461024d5760208060031936011261024d5760049060043567ffffffffffffffff9182821161024d573660238301121561024d57816004013592831161024d576024820191602436916060860201011161024d57610f8f612618565b60005b838110610fca576040517f2b001e1c6683bf79cc52891bd7215b204c787d18134fc7f3d21b4f32a49e47de908061042e8787836122a0565b610fd58185856121f6565b828101906040610fe961034f828401611f1d565b1561108557610ffa61059a846119b6565b1561105d575060008052600360205260019291611057916110529061103e7f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff610c5d565b63ffffffff16600052602052604060002090565b612206565b01610f92565b8790517f8e2f797b000000000000000000000000000000000000000000000000000000008152fd5b8790517f710c9497000000000000000000000000000000000000000000000000000000008152fd5b3461024d576110f86110be36610a03565b93906110c861184f565b506110d66040850135610252565b6110e36060850135610270565b6110f060c08501856119c0565b9390506130d4565b61110d60608594939401356040860135611f76565b9080511560001461140257506111356040516111288161179a565b6000815295939495613ac9565b93909560009461115b61114c602086015160ff1690565b604086015160ff165b90613771565b946000955b60ff811660ff881610156112f157602086015160ff1660ff811660ff8916106000146112cc57506111a861119b60ff89166080890151612c0b565b516001600160a01b031690565b945b6111b2612dd2565b9960005b85518110156112b8578c60ff8b166111db6107396111d4858b612c0b565b5160ff1690565b146111e957506001016111b6565b602092969c50611260949a9b9397989161120291612c0b565b51905b886001600160a01b036112208c5167ffffffffffffffff1690565b604051978895869485937f30bb3aac0000000000000000000000000000000000000000000000000000000085526060604083013592013560048601613c89565b0392165afa90811561048e5761128660ff93926001928594600092611297575b50611f69565b990116969050979197939293611160565b6112b191925060203d602011610d1b57610d0081836117d2565b9038611280565b50939960209061126093999a929697611205565b61119b6112eb916112e561073960a08b0151928c6126c1565b90612c0b565b946111aa565b61137f84868a60208d8761133f61034f61034f8561131760608b013560408c0135611868565b61133161132b61059a835163ffffffff1690565b87612c87565b01516001600160a01b031690565b906040518098819482937f709eb66400000000000000000000000000000000000000000000000000000000845260408b013560608c013560048601612b49565b03915afa91821561048e576113a66113b793610c69936109e8976000926113e15750611f69565b846040606083970135910135612efd565b906113c06117f5565b82815260209081019182526040805193845291519083015290918291820190565b6113fb91925060203d602011610d1b57610d0081836117d2565b9088611280565b602080611135920151015195939495613ac9565b3461024d57602060031936011261024d577f3c864541ef71378c6229510ed90f376565ee42d9c5e0904a984a9e863e6db44f60206001600160a01b0360043561145e81610252565b611466612618565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006002541617600255604051908152a1005b3461024d57602060031936011261024d576004356114b781610252565b6114bf612618565b6001600160a01b038091168015611524576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b3461024d57602060031936011261024d576001600160a01b036004356115b381610252565b1660005260046020526020604060002054604051908152f35b3461024d5760408060031936011261024d57600435906115eb82610252565b6024356000923384526004602052828420548083116116f5578290338652600460205203838520558251927fe1758bd80000000000000000000000000000000000000000000000000000000084526020846004816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561048e576116aa84846116d0947f820b7fd51bf79c54350bab98400651b3314ff6e79b33528821871d94a6669883988a916116d6575b50612b7b565b513381526001600160a01b03909216602083015260408201929092529081906060820190565b0390a180f35b6116ef915060203d6020116104875761047881836117d2565b386116a4565b83517f7c83fcf0000000000000000000000000000000000000000000000000000000008152600481018490526024810191909152604490fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60c0810190811067ffffffffffffffff82111761177957604052565b61172e565b6040810190811067ffffffffffffffff82111761177957604052565b6020810190811067ffffffffffffffff82111761177957604052565b6080810190811067ffffffffffffffff82111761177957604052565b90601f601f19910116810190811067ffffffffffffffff82111761177957604052565b6040519061026e8261177e565b6040519061026e8261175d565b6040519060e0820182811067ffffffffffffffff82111761177957604052565b6040519060a0820182811067ffffffffffffffff82111761177957604052565b6040519061185c8261177e565b60006020838281520152565b6118e19092919261187761184f565b63ffffffff851660009081527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff60205260408120919590929091906001600160a01b039485938480931686526003602052604086209063ffffffff16600052602052604060002090565b5463ffffffff8082168015611917575b16885260201c169250821561190b5750505b166020830152565b5460201c169050611903565b50808454166118f1565b9081602091031261024d57516102ae81610252565b6040513d6000823e3d90fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908110156119b15760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18136030182121561024d570190565b611942565b356102ae81610270565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561024d570180359067ffffffffffffffff821161024d5760200191813603831361024d57565b67ffffffffffffffff81160361024d57565b359061026e82611a11565b60ff81160361024d57565b359061026e82611a2e565b67ffffffffffffffff81116117795760051b60200190565b9080601f8301121561024d576020908235611a7681611a44565b93611a8460405195866117d2565b81855260208086019260051b82010192831161024d57602001905b828210611aad575050505090565b8380918335611abb81610252565b815201910190611a9f565b91909160c08184031261024d57611adb611802565b92611ae582611a23565b8452611af360208301611a39565b6020850152611b0460408301611a39565b6040850152611b1560608301611a39565b606085015267ffffffffffffffff608083013581811161024d5782611b3b918501611a5c565b608086015260a083013590811161024d57611b569201611a5c565b60a0830152565b9060208282031261024d57813567ffffffffffffffff811161024d576102ae9201611ac6565b9081604091031261024d57602060405191611b9d8361177e565b8035611ba881610270565b83520135611bb581610252565b602082015290565b91908110156119b15760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18136030182121561024d570190565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff418136030182121561024d570190565b356102ae81611a2e565b356102ae81611a11565b6102ae903690611ac6565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561024d57016020813591019167ffffffffffffffff821161024d578160051b3603831361024d57565b91908082526020809201929160005b828110611cbf575050505090565b9091929382806001926001600160a01b038835611cdb81610252565b16815201950193929101611cb1565b60208082528181018490526040600585901b8301810194919060009080850190865b858410611d1e57505050505050505090565b90919293949596977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08089830301855289357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18436030181121561024d5783019063ffffffff8235611d8f81610270565b16835287820135927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff418336030184121561024d578560e08a9493611e7d93611e6e879660019901858884015267ffffffffffffffff8135611def81611a11565b1686840152611e65611e54611e3a8a84013598611e0b8a611a2e565b60ff60609a168a88015284013598611e228a611a2e565b611e3360809a8b89019060ff169052565b8401611a39565b97611e4c60a0998a88019060ff169052565b830183611c4f565b60c080870152610100860191611ca2565b95810190611c4f565b93909282860301910152611ca2565b9a019401940192969594939190611d0c565b60405190611e9c8261175d565b606060a0836000815260006020820152600060408201526000838201528260808201520152565b90604051918281549182825260209260208301916000526020600020936000905b828210611efa5750505061026e925003836117d2565b85546001600160a01b031684526001958601958895509381019390910190611ee4565b356102ae81610252565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90601f8201809211611f6457565b611f27565b91908201809211611f6457565b919091611fd3611f84611e8f565b60008052600160205293610d50611fb9827fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4983565b936001600160a01b03166000526001602052604060002090565b80549067ffffffffffffffff808316908161211757505061200d611fff845467ffffffffffffffff1690565b67ffffffffffffffff168652565b60ff91828160401c1680156000146120f35750835460401c60ff168381166120ce575b505b828160481c1691821560001461209d575050508154818160481c169283612062575b505050505b61026e82612670565b6120949361207560026120849301611ec3565b60a088015260ff166040870152565b60501c16606084019060ff169052565b38808080612054565b909193508284036120b2575b50505050612059565b6120c59361207560026120849301611ec3565b388080806120a9565b6120ed906120de60018701611ec3565b608089015260ff166020880152565b38612030565b838103612101575b50612032565b612111906120de60018501611ec3565b386120fb565b8103612124575b5061200d565b67ffffffffffffffff1685523861211e565b9163ffffffff811660018103612196575050612158612188926102ae92611868565b60405192839160208301815163ffffffff1681526020918201516001600160a01b03169181019190915260400190565b03601f1981018352826117d2565b6002036121bd57506121ae612188926102ae92611f76565b6040519283916020830161090f565b6040517f3018cc2b00000000000000000000000000000000000000000000000000000000815263ffffffff919091166004820152602490fd5b91908110156119b1576060020190565b602061026e9261224b813561221a81610270565b849063ffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000825416179055565b01359061225782610252565b907fffffffffffffffff0000000000000000000000000000000000000000ffffffff77ffffffffffffffffffffffffffffffffffffffff0000000083549260201b169116179055565b6020808252808201849052604091820193916000915b8383106122c557505050505090565b909192939460019086356122d881610270565b63ffffffff8091168252838801356122ef81610270565b16838201526001600160a01b038488013561230981610252565b16818501526060908101960194930191906122b6565b91906001600160a01b03918282161561241a57600080612393936123a16123ec9661026e98169460405196879160208301947fa9059cbb00000000000000000000000000000000000000000000000000000000865260248401602090939291936001600160a01b0360408201951681520152565b03601f1981018752866117d2565b604051946123ae8661177e565b602086527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020870152519082855af16123e6612fb9565b916143e5565b8051908115918215612400575b5050612ffe565b6124139250602080918301019101612fe9565b38806123f9565b60046040517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b61244d81612ae5565b156124555750565b60249063ffffffff604051917f2146a07a000000000000000000000000000000000000000000000000000000008352166004820152fd5b906125037f82118522aa536ac0e96cc5c689407ae42b89d592aa133890a01f1509842f5081936124de846001600160a01b038516948560005260016020526124d984836040600020612823565b611f76565b5063ffffffff60405194859485521660208401526060604084015260608301906108aa565b0390a1565b6126157f779cb2dd9d2bb1be1737d05435d744facbfb84a2a4912e21379d39beddcdc805936080936001600160a01b03809116938460005260036020526125e66125668260406000209063ffffffff16600052602052604060002090565b845181547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff918216178255936020860151167fffffffffffffffff0000000000000000000000000000000000000000ffffffff77ffffffffffffffffffffffffffffffffffffffff0000000083549260201b169116179055565b60405194855216602084015260408301906001600160a01b036020809263ffffffff8151168552015116910152565ba1565b6001600160a01b0360005416330361262c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60ff6020820151161590816126b1575b5061268757565b60046040517f7e36c284000000000000000000000000000000000000000000000000000000008152fd5b60ff915060600151161538612680565b9060ff8091169116039060ff8211611f6457565b81519167ffffffffffffffff83116117795768010000000000000000831161177957815483835580841061274d575b50612719602080920192600052602060002090565b9060005b84811061272b575050505050565b6001908261274086516001600160a01b031690565b950194818501550161271d565b60008360005284602060002092830192015b82811061276d575050612704565b81815560010161275f565b815181546020840151604080860151606087015160489190911b69ff000000000000000000169290911b68ff00000000000000001667ffffffffffffffff9094167fffffffffffffffffffffffffffffffffffffffffff000000000000000000000090931692909217929092179190911760509190911b6aff000000000000000000001617815561026e9160029060a09061281a6080820151600186016126d5565b015191016126d5565b91909160ff80612837602085015160ff1690565b1681811480156129d0575b1561299e5750608083015151612974575b6040830181612863825160ff1690565b1690828214801561296c575b1561290357505060a0830151516128d957606083015160ff16166128af5761026e926128aa919063ffffffff16600052602052604060002090565b612778565b60046040517f81da67ee000000000000000000000000000000000000000000000000000000008152fd5b60046040517f05f7ab62000000000000000000000000000000000000000000000000000000008152fd5b9092949160a0850193808551511490811591612961575b506128d957606085015160ff16168015918215612949575b50506128af5761026e93610d506128aa9351612c1f565b519091506129599060ff16610739565b103880612932565b607f9150113861291a565b50811561286f565b60046040517f1b668041000000000000000000000000000000000000000000000000000000008152fd5b60808401908082515114908115916129c5575b50612974576129c09051612c1f565b612853565b607f915011386129b1565b508015612842565b90929391936000946000946001600160a01b039384600254169081612a00575b505050505050565b6040517fd51c54860000000000000000000000000000000000000000000000000000000060208201526001600160a01b03909116602482015263ffffffff9092166044830152606482018390528315156084830152939650939450612aad9391929091612aa591612a7e8260a481015b03601f1981018452836117d2565b7f000000000000000000000000000000000000000000000000000000000000000090612e16565b929091612e68565b9190809381612ac0575b808080806129f8565b60025416600052600460205260406000208054918201809211611f6457553880612ab7565b63ffffffff1660009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090205460ff8160401c161590811591612b2d575090565b60ff915060501c16151590565b9081602091031261024d575190565b90926001600160a01b0360809363ffffffff6102ae979616845216602083015260408201528160608201520190610a93565b6001600160a01b0390808216612bf2575081161561241a57600080808085855af1612ba4612fb9565b5015612bae575050565b6040517f2c024f920000000000000000000000000000000000000000000000000000000081526001600160a01b039190911660048201526024810191909152604490fd5b61026e9392915061231f565b8051156119b15760200190565b80518210156119b15760209160051b010190565b60009190825b8151841015612c81576001600160a01b0380612c418685612c0b565b51169116811115612c5757600190930192612c25565b60046040517fa228a30b000000000000000000000000000000000000000000000000000000008152fd5b50509050565b818111612c92575050565b6040517ff001cc6500000000000000000000000000000000000000000000000000000000815260048101919091526024810191909152604490fd5b67ffffffffffffffff811161177957601f01601f191660200190565b929192612cf582612ccd565b91612d0360405193846117d2565b82948184528183011161024d578281602093846000960137010152565b9080601f8301121561024d578160206102ae93359101612ce9565b9060e08236031261024d57612d4e61180f565b612d5783611a23565b8152612d656020840161027e565b6020820152612d7660408401610263565b6040820152612d876060840161027e565b60608201526080830135608082015260a083013560a082015260c083013567ffffffffffffffff811161024d57612dce93612dc491369101612d20565b60c08201526133e0565b9091565b60405190612ddf8261179a565b60008252565b604051612df18161179a565b60008152906000368137565b60405190612e0a8261177e565b60208083523683820137565b929190833b15612e5757600091829182612e2e612dfd565b9660208451940192f13d60208111612e4f575b8084526000602085013e9190565b506020612e41565b50509050612e63612de5565b600091565b600094939192859290158015612ef2575b612ee45780602080612e9093518301019101612b3a565b9215612e9b57505090565b929350917f000000000000000000000000000000000000000000000000000000000000000080821115612edc5750905b81811115612ed7575091565b905091565b905090612ecb565b505050509050600090600090565b506020815110612e79565b929093916000946000946001600160a01b03600254169081612f20575050505050565b6040517fd42442210000000000000000000000000000000000000000000000000000000060208201526001600160a01b03909116602482015263ffffffff9092166044830152606482018390528315156084830152939550612dce945091929091612aa591612f928260a48101612a70565b7f00000000000000000000000000000000000000000000000000000000000000009061351e565b3d15612fe4573d90612fca82612ccd565b91612fd860405193846117d2565b82523d6000602084013e565b606090565b9081602091031261024d57516102ae816109ec565b1561300557565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b60405161307b8161179a565b6000815290565b604090604051916130928361177e565b60018352829160009160005b6020808210156130cb578251602092916130b78261177e565b86825260608183015282890101520161309e565b50505091925050565b60609291839160028083106132f9576130ff6130f96130f38585613555565b906135d8565b60f01c90565b9260029260039461ffff906003828216146000146132e3575092946002936000965b8487106131de575050508184036131ac5760028211613185575b50505050505b82511561317b57613150613082565b926131596117f5565b6002815290602082015261316c84612bfe565b5261317683612bfe565b509190565b91506102ae61306f565b916131a0969795949391613198936135c0565b939092613fac565b9190388080808061313b565b6040517f0df85b3100000000000000000000000000000000000000000000000000000000815260048101859052602490fd5b909195600190818101986132066132006131fa8c858b8b6135c0565b9061361c565b60f81c90565b9060ff8083169081156132b1578216908161327f57505050985b6132346130f96130f38b8501848b8b6135c0565b908582161561324c5750830184160101959190613121565b6040517f0df85b310000000000000000000000000000000000000000000000000000000081526004810191909152602490fd5b9b92919b0361328f575b50613220565b9799613198836132a5959f949d939c8a8a6135c0565b9a909880969838613289565b6040517fe3faa65500000000000000000000000000000000000000000000000000000000815260006004820152602490fd5b935050925092506132f49350613d00565b613141565b6040517f0df85b3100000000000000000000000000000000000000000000000000000000815260006004820152602490fd5b9061333e60209282815194859201610a70565b0190565b90815180825260208080930193019160005b828110613362575050505090565b83516001600160a01b031685529381019392810192600101613354565b906133956133a591606084526060840190613342565b6020938382036020850152613342565b9060408183039101526020808451928381520193019160005b8281106133cc575050505090565b8351855293810193928101926001016133be565b90917f07ea52d82345d6e838192107d8fd7123d9c2ec8e916cd0aad13fd2b60db246446121886134e66134ec61341586613660565b6134d361342188613722565b98895160208b0120986134cd6134526040613443606085015163ffffffff1690565b9301516001600160a01b031690565b6134bd61345f8483611f76565b9c858e9651156000146135075750613488613478612dd2565b965b5167ffffffffffffffff1690565b906134a061349461182f565b63ffffffff9097168752565b60208601899052604086015267ffffffffffffffff166060850152565b6001600160a01b03166080830152565b89613822565b949098604051948593602085019061332b565b9061332b565b9361250360a06080830151920151926040519384938461337f565b602061351561348892612bfe565b5101519661347a565b929190833b15612e57576000918291613535612dfd565b9560208351930191fa3d60208111612e4f578084526000602085013e9190565b9060021161024d5790600290565b9060221161024d5760020190602090565b9060421161024d5760220190602090565b909291928360421161024d57831161024d57604201917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe0190565b9093929384831161024d57841161024d578101920390565b7fffff000000000000000000000000000000000000000000000000000000000000903581811693926002811061360d57505050565b60020360031b82901b16169150565b7fff00000000000000000000000000000000000000000000000000000000000000903581811693926001811061365157505050565b60010360031b82901b16169150565b80519060208101516001600160a01b036040830151169160806060820151910151927fffffffffffffffff000000000000000000000000000000000000000000000000604051957f0100000000000000000000000000000000000000000000000000000000000000602088015260c01b1660218601527fffffffff00000000000000000000000000000000000000000000000000000000809360e01b166029860152602d85015260e01b16604d8301526051820152605181526102ae816117b6565b6102ae604060c060a0840151930151928151938491602083015261374f8151809260208686019101610a70565b81010360208101845201826117d2565b60ff60019116019060ff8211611f6457565b9060ff8091169116019060ff8211611f6457565b9061378f82611a44565b61379c60405191826117d2565b828152601f196137ac8294611a44565b0190602036910137565b916102ae926040815263ffffffff83511660408201526001600160a01b0360806137ef602086015160a0606086015260e0850190610a93565b9460408101518285015267ffffffffffffffff60608201511660a085015201511660c08201526020818403910152610a93565b929091613830600091613ac9565b919060209460ff61385561384860208a015160ff1690565b60408a015160ff16611155565b169161386083613785565b946000965b8460ff89161015613a255760208a015160ff168a60ff821660ff8b1610600014613a0657505061389f61119b60ff8a1660808d0151612c0b565b945b6138a9612dd2565b9a60005b84518110156139f45760ff8b166138ca6107396111d48489612c0b565b146138d7576001016138ad565b8597929a93949c506138ee8c916139249397612c0b565b515b604051809381927f95d376d70000000000000000000000000000000000000000000000000000000083528a600484016137b6565b038160006001600160a01b0387165af190811561048e576000916139d7575b5061395160ff84168a612c0b565b528761396060ff841682612c0b565b51613979575b5050600160ff9101169693919890613865565b82976001926139b96139b16139966139ce9560ff80991690612c0b565b51926001600160a01b03166000526004602052604060002090565b918254611f69565b90556139c7848a168b612c0b565b5190611f69565b96915087613966565b6139ee91508b3d8d11610d1b57610d0081836117d2565b38613943565b509395909891929a8a613924916138f0565b613a1f916112e561073960a061119b940151928d6126c1565b946138a1565b96505050505093509150565b604051613a3d8161177e565b600181528060005b602080821015613a6057906060602092828501015201613a45565b50505090565b90613a7082611a44565b613a7d60405191826117d2565b828152601f19613a8d8294611a44565b019060005b828110613a9e57505050565b806060602080938501015201613a92565b60405190613abc8261177e565b6001825260203681840137565b90815115613c815760ff9081613ade84614060565b16916001808414613c3f5780613af385613785565b9481613afe82613a66565b9760008087935b613ba0575b9181613b1c92613b24959403916142a5565b90888a614331565b6000915b613b33575b50505050565b8584831682811015613b99578493613b9182613b89613b82613b5a6111d48a978d99612c0b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160ff1690565b918c612c0b565b9060ff169052565b011691613b28565b5050613b2d565b93949091928351851015613c3557613bba828601856141af565b94600391613bca83830187614193565b908d8d8c8316808e03613bf0575050505061ffff90965b16010190949392919085613b05565b8d85949b951603613c08575b50505061ffff90613be1565b8792979161ffff949a613c2a92613c248c868a039788916142a5565b92614331565b019496908d8d613bfc565b9291909493613b0a565b50509050613c4b613a31565b82613c5582612bfe565b52613c5f81612bfe565b50613c7d613c74613c6e613aaf565b9461413f565b613b8985612bfe565b9190565b606091508190565b906102ae949367ffffffffffffffff60809463ffffffff6001600160a01b03941685521660208401521660408201528160608201520190610a93565b359060208110613cd3575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060200360031b1b1690565b61ffff811660018103613dec5750509060228103613dc257613d39613d34613d2e6102ae9361218895613563565b90613cc5565b61447d565b604051928391602083017fffffffffffffffffffffffffffffffff000000000000000000000000000000006014927f01000000000000000000000000000000000000000000000000000000000000008084527e110000000000000000000000000000000000000000000000000000000000006001850152600384015260801b1660048201520190565b60046040517f9bebe0e7000000000000000000000000000000000000000000000000000000008152fd5b600203613f67575060428211801590613f5d575b613f33578161218882613e1e613d34613d2e6042976102ae97613563565b90613e3d613d2e8580613e37613d34613d2e8388613574565b94613585565b6040519687956020030160031b1c91602085019190604893917f01000000000000000000000000000000000000000000000000000000000000008085527e1100000000000000000000000000000000000000000000000000000000000060018601528060038601527fffffffffffffffffffffffffffffffff00000000000000000000000000000000809360801b16600486015260148501527e3100000000000000000000000000000000000000000000000000000000000060158501527f0200000000000000000000000000000000000000000000000000000000000000601785015260801b16601883015260288201520190565b60046040517f2b2e8c38000000000000000000000000000000000000000000000000000000008152fd5b5060628211613e00565b6040517f51458e6f00000000000000000000000000000000000000000000000000000000815261ffff919091166004820152602490fd5b908092918237016000815290565b909493929160ff811660018103613ff25750508051613fd15750613c7d913691612ce9565b612188613c7d92613fec94604051958694602086019061332b565b91613f9e565b91959160020361402a5750805161400f57506102ae913691612ce9565b6121886102ae92613fec94604051958694602086019061332b565b6040517fe3faa65500000000000000000000000000000000000000000000000000000000815260ff919091166004820152602490fd5b60009182805b83518110156141305760019061407e828201866141af565b9060039261ffff848301931692600284106140fd576140a29060ff9182918a614193565b168181146140d35782901b91828a16156140c1575b5050500101614066565b909192989501169317953880806140b7565b60046040517fa8384fc1000000000000000000000000000000000000000000000000000000008152fd5b6040517f9af41d330000000000000000000000000000000000000000000000000000000081526004810191909152602490fd5b91929093505181036140fd5750565b600481511061414f576004015190565b606460405162461bcd60e51b815260206004820152601360248201527f746f55696e74385f6f75744f66426f756e6473000000000000000000000000006044820152fd5b9081516001820190818311611f64571061414f57016001015190565b9081516002820190818311611f6457106141cb57016002015190565b606460405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e64730000000000000000000000006044820152fd5b1561421657565b606460405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152fd5b1561426157565b606460405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152fd5b916142ba816142b381611f56565b101561420f565b6142d083516142c98385611f69565b111561425a565b806142e957505050604051600081526020810160405290565b60405192601f821692831560051b80858701019484860193010101905b80841061431e5750508252601f01601f191660405290565b9092835181526020809101930190614306565b909193929360ff808216146140d3576143499061375f565b9360009260ff8616905b80518510156143dc5761436c6107396111d48784612c0b565b8281036143b5575050506143b29394506143a26134e6916121886143908686612c0b565b5191604051948593602085019061332b565b6143ac8383612c0b565b52612c0b565b50565b94909194156143c8576001019390614353565b93506143b29495613b89856143a293612c0b565b50505050509050565b9192901561444657508151156143f9575090565b3b156144025790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156144595750805190602001fd5b6106689060405191829162461bcd60e51b8352602060048401526024830190610a93565b6fffffffffffffffffffffffffffffffff9081811161449a571690565b608460405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152fdfea2646970667358221220b5b9dd899cef0c2ed63b351324b6bf4477ba80e7542ed6e16e5f5a68b7958cf864736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_treasuryGasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_treasuryGasForFeeCap";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "CannotWithdrawAltToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "available";
            readonly type: "uint256";
        }];
        readonly name: "InvalidAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "configType";
            readonly type: "uint32";
        }];
        readonly name: "InvalidConfigType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidDVNIdx";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "InvalidDVNOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLegacyType1Option";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLegacyType2Option";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }];
        readonly name: "InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "workerId";
            readonly type: "uint8";
        }];
        readonly name: "InvalidWorkerId";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "InvalidWorkerOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotTreasury";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "optionType";
            readonly type: "uint16";
        }];
        readonly name: "UnsupportedOptionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ZeroMessageSize";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "requiredDVNs";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "optionalDVNs";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }];
        readonly name: "DVNFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultExecutorConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecutorConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "ExecutorConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lzToken";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "LzTokenFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "treasury";
            readonly type: "address";
        }];
        readonly name: "TreasurySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "executorConfigs";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getExecutorConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct ExecutorConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultExecutorConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): SendUln302Interface;
    static connect(address: string, runner?: ContractRunner | null): SendUln302;
}

type index$p_ReceiveUln302__factory = ReceiveUln302__factory;
declare const index$p_ReceiveUln302__factory: typeof ReceiveUln302__factory;
type index$p_SendUln302__factory = SendUln302__factory;
declare const index$p_SendUln302__factory: typeof SendUln302__factory;
declare namespace index$p {
  export {
    index$p_ReceiveUln302__factory as ReceiveUln302__factory,
    index$p_SendUln302__factory as SendUln302__factory,
  };
}

declare class ReceiveUlnBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPacketHeader";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPacketVersion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Verifying";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "dvn";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "header";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "confirmations";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "proofHash";
            readonly type: "bytes32";
        }];
        readonly name: "PayloadVerified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "dvn";
            readonly type: "address";
        }];
        readonly name: "hashLookup";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "confirmations";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ReceiveUlnBaseInterface;
    static connect(address: string, runner?: ContractRunner | null): ReceiveUlnBase;
}

declare class SendUlnBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "UnsupportedEid";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "requiredDVNs";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "optionalDVNs";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }];
        readonly name: "DVNFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): SendUlnBaseInterface;
    static connect(address: string, runner?: ContractRunner | null): SendUlnBase;
}

declare class UlnBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AtLeastOneDVN";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidConfirmations";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptionalDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptionalDVNThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidRequiredDVNCount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Unsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "UnsupportedEid";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultUlnConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct UlnConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "UlnConfigSet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getAppUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "requiredDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalDVNThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "requiredDVNs";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalDVNs";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "confirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "requiredDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNCount";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "optionalDVNThreshold";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "requiredDVNs";
                    readonly type: "address[]";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "optionalDVNs";
                    readonly type: "address[]";
                }];
                readonly internalType: "struct UlnConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultUlnConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultUlnConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): UlnBaseInterface;
    static connect(address: string, runner?: ContractRunner | null): UlnBase;
}

type index$o_ReceiveUlnBase__factory = ReceiveUlnBase__factory;
declare const index$o_ReceiveUlnBase__factory: typeof ReceiveUlnBase__factory;
type index$o_SendUlnBase__factory = SendUlnBase__factory;
declare const index$o_SendUlnBase__factory: typeof SendUlnBase__factory;
type index$o_UlnBase__factory = UlnBase__factory;
declare const index$o_UlnBase__factory: typeof UlnBase__factory;
declare namespace index$o {
  export {
    index$o_ReceiveUlnBase__factory as ReceiveUlnBase__factory,
    index$o_SendUlnBase__factory as SendUlnBase__factory,
    index$o_UlnBase__factory as UlnBase__factory,
    index$s as dvn,
    index$r as interfaces,
    index$q as libs,
    index$p as uln302,
  };
}

type ProxyAdminConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ProxyAdmin__factory extends ContractFactory {
    constructor(...args: ProxyAdminConstructorParams);
    getDeployTransaction(initialOwner: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(initialOwner: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ProxyAdmin & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): ProxyAdmin__factory;
    static readonly bytecode = "0x60803461007057601f6108e538819003918201601f19168301916001600160401b038311848410176100755780849260209460405283398101031261007057516001600160a01b0381168103610070576100619061005c3361008b565b61008b565b60405161081290816100d38239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe608060408181526004918236101561001657600080fd5b600090813560e01c908163204e1c7a1461058e57508063715018a6146105105780637eff275e1461046f5780638da5cb5b1461043c5780639623609d1461030057806399a88ec41461024d578063f2fde38b1461012d5763f3b7dead1461007c57600080fd5b3461012a57602060031936011261012a5773ffffffffffffffffffffffffffffffffffffffff908084836100ae610634565b168551907ff851a4400000000000000000000000000000000000000000000000000000000082525afa926100e0610701565b931561010357506100fb836020808096518301019101610731565b169051908152f35b82517f1545a425000000000000000000000000000000000000000000000000000000008152fd5b80fd5b50913461024957602060031936011261024957610148610634565b9061015161075d565b73ffffffffffffffffffffffffffffffffffffffff8092169283156101c6575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50918291346102fc57806003193601126102fc57610269610634565b61027161065c565b9061027a61075d565b73ffffffffffffffffffffffffffffffffffffffff809116803b156102f857859283602492865197889586947f3659cfe600000000000000000000000000000000000000000000000000000000865216908401525af19081156102ef57506102df5750f35b6102e89061067f565b61012a5780f35b513d84823e3d90fd5b8580fd5b5050fd5b5082606060031936011261043857610316610634565b9261031f61065c565b9160443567ffffffffffffffff8111610434573660238201121561043457808201359161034b836106e5565b92610358855194856106c2565b808452602092366024838301011161043057818892602460209301838801378501015261038361075d565b73ffffffffffffffffffffffffffffffffffffffff80971696873b1561042c578451957f4f1ef2860000000000000000000000000000000000000000000000000000000087521690850152826024850152815191826044860152855b8381106104185750505082849581606481601f19601f878b85819a860101520116810103019134905af19081156102ef57506102df5750f35b8181018301518682016064015282016103df565b8680fd5b8780fd5b8480fd5b5080fd5b50903461043857816003193601126104385773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b509190346102495780600319360112610249578261048b610634565b61049361065c565b61049b61075d565b73ffffffffffffffffffffffffffffffffffffffff80921690813b1561050c5783602492865197889586947f8f28397000000000000000000000000000000000000000000000000000000000865216908401525af19081156102ef5750610500575080f35b6105099061067f565b80f35b8380fd5b503461012a578060031936011261012a5761052961075d565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b9190503461012a57602060031936011261012a57808473ffffffffffffffffffffffffffffffffffffffff93846105c3610634565b167f5c60da1b0000000000000000000000000000000000000000000000000000000082525afa926105f2610701565b931561060d57506100fb836020808096518301019101610731565b82517f6bce18d7000000000000000000000000000000000000000000000000000000008152fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361065757565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361065757565b67ffffffffffffffff811161069357604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff82111761069357604052565b67ffffffffffffffff811161069357601f01601f191660200190565b3d1561072c573d90610712826106e5565b9161072060405193846106c2565b82523d6000602084013e565b606090565b90816020910312610657575173ffffffffffffffffffffffffffffffffffffffff811681036106575790565b73ffffffffffffffffffffffffffffffffffffffff60005416330361077e57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea2646970667358221220a047ee1bac9b49365e032a3359d42630c12dc8cf5d5f7e25c7c8c941261a2ab664736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "initialOwner";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AdminCallFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ImplementationCallFailed";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "changeProxyAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }];
        readonly name: "getProxyAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }];
        readonly name: "getProxyImplementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "upgrade";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): ProxyAdminInterface;
    static connect(address: string, runner?: ContractRunner | null): ProxyAdmin;
}

type TransparentUpgradeableProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class TransparentUpgradeableProxy__factory extends ContractFactory {
    constructor(...args: TransparentUpgradeableProxyConstructorParams);
    getDeployTransaction(_logic: AddressLike, admin_: AddressLike, _data: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_logic: AddressLike, admin_: AddressLike, _data: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<TransparentUpgradeableProxy & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): TransparentUpgradeableProxy__factory;
    static readonly bytecode = "0x60406080815262000d618038038062000018816200030b565b9283398101906060818303126200030657620000348162000347565b916020926200004584840162000347565b8584015190936001600160401b0391908282116200030657019280601f850112156200030657835193620000836200007d866200035c565b6200030b565b948086528786019288828401011162000306578288620000a4930162000378565b823b15620002ac577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b03199081166001600160a01b0386811691821790935590959194600093909290917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a2805115801590620002a4575b620001f5575b50505050507fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103937f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f86865493815196818616885216958684820152a18315620001a35750161790555161090a9081620004578239f35b60849086519062461bcd60e51b82526004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b895194606086019081118682101762000290578a52602785527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c89860152660819985a5b195960ca1b8a860152516200027a9493929183918291845af4903d1562000286573d6200026a6200007d826200035c565b90815280938a3d92013e6200039d565b5038808080806200012d565b606092506200039d565b634e487b7160e01b85526041600452602485fd5b508362000127565b865162461bcd60e51b815260048101879052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200033157604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200030657565b6001600160401b0381116200033157601f01601f191660200190565b60005b8381106200038c5750506000910152565b81810151838201526020016200037b565b91929015620004025750815115620003b3575090565b3b15620003bd5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015620004165750805190602001fd5b6044604051809262461bcd60e51b82526020600483015262000448815180928160248601526020868601910162000378565b601f01601f19168101030190fdfe60806040526004361015610019575b36610485575b610485565b6000803560e01c9081633659cfe61461006c575080634f1ef286146100675780635c60da1b146100625780638f2839701461005d5763f851a4400361000e5761038c565b610246565b6101c5565b610109565b346100de5760206003193601126100de576100856100e1565b73ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354163314600014610014576100db906100d261041e565b90838252610530565b80f35b80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361010457565b600080fd5b60406003193601126101045761011d6100e1565b60243567ffffffffffffffff9182821161010457366023830112156101045781600401359283116101045736602484840101116101045773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103541633146000146100145760006020848060246101b16101ac6101c399610469565b610443565b96828852018387013784010152610670565b005b346101045760006003193601126101045773ffffffffffffffffffffffffffffffffffffffff807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354163314600014610014577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460405191168152602090f35b346101045760206003193601126101045761025f6100e1565b73ffffffffffffffffffffffffffffffffffffffff907fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610391808354163314600014610014577f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f604084549281519481851686521693846020820152a18115610308577fffffffffffffffffffffffff000000000000000000000000000000000000000016179055005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346101045760006003193601126101045773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61039080825416331460001461001457905460405191168152602090f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051906020820182811067ffffffffffffffff82111761043e57604052565b6103ef565b90601f19601f604051930116820182811067ffffffffffffffff82111761043e57604052565b67ffffffffffffffff811161043e57601f01601f191660200190565b73ffffffffffffffffffffffffffffffffffffffff807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354163314610506577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e15610502573d90f35b3d90fd5b60046040517ff0d4b23e000000000000000000000000000000000000000000000000000000008152fd5b803b156105ec5773ffffffffffffffffffffffffffffffffffffffff81167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc817fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28151158015906105e4575b6105cf575050565b6105e1916105db610716565b91610786565b50565b5060006105c7565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b803b156105ec5773ffffffffffffffffffffffffffffffffffffffff81167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc817fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061070e576105cf575050565b5060016105c7565b604051906060820182811067ffffffffffffffff82111761043e57604052602782527f206661696c6564000000000000000000000000000000000000000000000000006040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b6000806107bb9493602081519101845af43d156107be573d916107ab6101ac84610469565b9283523d6000602085013e61082b565b90565b60609161082b565b156107cd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b9192901561084b575081511561083f575090565b6107bb903b15156107c6565b82519091501561085e5750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b8481106108bd57505050601f19601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161089a56fea26469706673582212204369c7a6b6981d47c0bf707682324593438d6c9aa21b384f6e20a51134b1d1fd64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_logic";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "admin_";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AdminAccessDenied";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "admin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "admin_";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "changeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation_";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): TransparentUpgradeableProxyInterface;
    static connect(address: string, runner?: ContractRunner | null): TransparentUpgradeableProxy;
}

type index$n_ProxyAdmin__factory = ProxyAdmin__factory;
declare const index$n_ProxyAdmin__factory: typeof ProxyAdmin__factory;
type index$n_TransparentUpgradeableProxy__factory = TransparentUpgradeableProxy__factory;
declare const index$n_TransparentUpgradeableProxy__factory: typeof TransparentUpgradeableProxy__factory;
declare namespace index$n {
  export {
    index$n_ProxyAdmin__factory as ProxyAdmin__factory,
    index$n_TransparentUpgradeableProxy__factory as TransparentUpgradeableProxy__factory,
  };
}

declare class WorkerUpgradeable__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): WorkerUpgradeableInterface;
    static connect(address: string, runner?: ContractRunner | null): WorkerUpgradeable;
}

type index$m_WorkerUpgradeable__factory = WorkerUpgradeable__factory;
declare const index$m_WorkerUpgradeable__factory: typeof WorkerUpgradeable__factory;
declare namespace index$m {
  export {
    index$m_WorkerUpgradeable__factory as WorkerUpgradeable__factory,
    index$n as proxy,
  };
}

type ExecutorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Executor__factory extends ContractFactory {
    constructor(...args: ExecutorConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<Executor & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): Executor__factory;
    static readonly bytecode = "0x608080604052346100165761331c908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b60009260e08435811c918262bf2e801461272b5750816301e33667146124d057816301ffc9a71461242f5781631095b6d7146122c557816316c38b3c146120a4578163248a9ca31461207957816326e67a3714611a515781632de1137614611a215781632f2ff15d1461189157816336568abe1461184e5781635c975abb146118295781635e280f11146117ff57816368974a93146116ea578163709eb664146115f1578163717e8a42146112a0578163724e78da1461121c57816372607537146111f2578163741bef1a146111c957816391d14854146111825781639e9449651461110a578163a217fddf146110ee578163acdbcca514610e17578163c2175d281461083a578163c358de0a14610795578163c416aa511461076c578163c7b2370b146106e8578163cd88b90314610543578163d168faec1461032157508063d2ae2104146102f15763d547741f1461016e57600080fd5b346102ed57816003193601126102ed57803591610189612763565b91838552602090606582526101a360018488200154612dc3565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca8514806102c6575b610246575b50838552606581526001600160a01b0382862093169283600052815260ff8260002054166101fd578480f35b8385526065815281852090836000525260002060ff19815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8480a4388080808480f35b60c9549067ffffffffffffffff8260a01c169081156102b357507bffffffffffffffff00000000000000000000000000000000000000006000197fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff920160a01b1691161760c955386101d1565b876011602492634e487b7160e01b835252fd5b50848652606582528286206001600160a01b038516600052825260ff8360002054166101cc565b8280fd5b50503461031d578160031936011261031d5760209067ffffffffffffffff60c95460a01c169051908152f35b5080fd5b84915083600319918236016080811261053b5760601361053f5760643567ffffffffffffffff811161053b578086019061010085823603011261053757610366612bc6565b61036e612ee1565b6024810161013063ffffffff815460a01c169661038a85612b2a565b978a356001600160a01b03998a821682036105325760243592826000808080888098604435f16103b8612f36565b506104f8577f80f845dbaecd024dbeb255af88f2c72c926234fa09f36adcba5d7383b73d3832936103ef918d519485948b86612fdc565b0390a15b3403913483116104e5579961042b898b9c54169261041088612b2a565b9761041e60a4890182612b3e565b93909160c48a0190612b3e565b919093863b156104e1578e9b8d519e8f9c8d9b8c997f0c0c389e000000000000000000000000000000000000000000000000000000008b528a0161046e91612b8f565b16606488015260848b0135608488015260a487015260e486019061049192612a33565b918483030160c48501526104a492612a33565b039360e40135f19081156104d857506104c1575b50600160fd5580f35b6104ca90612844565b6104d55780826104b8565b80fd5b513d84823e3d90fd5b8e80fd5b60248a60118d634e487b7160e01b835252fd5b7f5c63dca53e1b3ae83df72c0d3979318a89fe6c81f96d4675487795d96cfef3ab9361052a918d519485948b86612fdc565b0390a16103f3565b600080fd5b8580fd5b8480fd5b8380fd5b505090346102ed57806003193601126102ed5761055e6127ae565b60243567ffffffffffffffff9182821161053757366023830112156105375781850135928311610537573660248460051b840101116105375763ffffffff906105a5612bc6565b16855260209260cb84528520936801000000000000000083116106d557508354828555808310610680575b50602401928452818420908060051c92855b84811061064d5750601f19821680830392036105fc578580f35b93908594865b8281106106185750505050015538808080808580f35b90919295826106426001928461062d8b612b1c565b919060ff809160031b9316831b921b19161790565b970193929101610602565b86875b8381106106645750848201556001016105e2565b9690836106776001928a61062d86612b1c565b92019701610650565b848652838620601f80850160051c8201920160051c0190601f8416806106bb575b505b8181106106b057506105d0565b8681556001016106a3565b6000199081830191825491880360031b1c169055386106a1565b856041602492634e487b7160e01b835252fd5b5050503461031d57602060031936011261031d5760207f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e0916001600160a01b0361073061274d565b610738612bc6565b1690817fffffffffffffffffffffffff000000000000000000000000000000000000000060c954161760c95551908152a180f35b5050503461031d578160031936011261031d576020906001600160a01b0360c954169051908152f35b929190503461053f57602060031936011261053f57359061ffff821690818303610532577f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d937fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff7dffff00000000000000000000000000000000000000000000000000000000602095610826612bc6565b60c954931b1691161760c95551908152a180f35b8285853461031d5760a060031936011261031d5761085661274d565b9267ffffffffffffffff9060243582811161053b576108789036908301612913565b94604435906001600160a01b0390818316809303610532576064359482861680960361053257608435908111610b48576108b59036908601612913565b97827fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103818154168015600014610e095750555b875460ff91828260081c161597888099610dfd575b8015610de7575b15610d7e57918a9b9189936109758660019e8f9560ff1998878a8316178355610d50575b505460081c1661093781613068565b61094081613068565b8460fd5561094d81613068565b61095681613068565b61095f81613068565b61096881613068565b8660975416609755613068565b7d2ee0000000000000000000000000000000000000000000000000000000007fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff60c954161760c9557fffffffffffffffffffffffff0000000000000000000000000000000000000000988960ca54161760ca5580610ce3575b5090939291908c855b610c1a575b5050838c905b610b5e575b505050505016610130928184549384161784556020865180927f416ecebf00000000000000000000000000000000000000000000000000000000825281855afa908115610b54578891610af9575b5077ffffffff00000000000000000000000000000000000000007fffffffffffffffff0000000000000000000000000000000000000000000000009160a01b16921617179055610aa3578280f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498916020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff855416855551908152a181808280f35b90506020813d602011610b4c575b81610b14602093836128a6565b81010312610b48575163ffffffff81168103610b485777ffffffff0000000000000000000000000000000000000000610a55565b8780fd5b3d9150610b07565b86513d8a823e3d90fd5b8151811015610c15578087610b74879385612af2565b51167fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177590816000528d606590602091808352816000208460005283528982600020541615610bc9575b50505050500184610a02565b8460005282526000209082600052528d600020848782541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a48e80808e81610bbd565b610a07565b81959293949551811015610cd957808c89610c36869486612af2565b51167f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de91826000526065602090808252826000208460005282528b83600020541615610c8d575b50505050500182959493926109f7565b84600052815281600020908360005252600020848982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a48f808e8180610c7d565b94939291946109fc565b6000805260656020528b60002081600052602052858c60002054166109ee576000805260656020528b600020816000526020528b6000208386825416179055339060007f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a48d6109ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010117815538610928565b60848860208c519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156109045750600184841614610904565b506001848416106108fd565b9150503303156108e8578780fd5b505082346104d5576020918260031936011261031d5780359267ffffffffffffffff928385116104d557366023860112156104d5578483013595602495610e5d886128c9565b90610e6a835192836128a6565b8882528482019081602460a0809c02830101913683116110ea57602401905b82821061107657505050610e9b612bc6565b835b8251811015610fc75787610eb18285612af2565b5181888201511661ffff87830151166fffffffffffffffffffffffffffffffff9260609084828201511691608094868684015116978c519687019087821090821117610fb1578c5285528c85019384528a850192835284019586525163ffffffff168a5261012f8b528c898b20935116835492518a1b69ffff000000000000000016915160501b79ffffffffffffffffffffffffffffffff0000000000000000000016927fffffffffffff000000000000000000000000000000000000000000000000000016171717815560010191511681547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016179055600101610e9d565b50508f60418f634e487b7160e01b600052526000fd5b50908690858a948051958287019383885251809452818701959488925b85841061101557897f3fd3f9275410b39824c12e5dfcf63fb332698a5eee3b09895aaaaa9e403bd4818a8a038ba180f35b8651805163ffffffff168952808601518316898701528082015161ffff16898301526060808201516fffffffffffffffffffffffffffffffff908116918b019190915260809182015116908901529682019695840195600190930192610fe4565b8b823603126110ea5785519061108b8261286e565b611094836127c1565b82526110a18984016128e1565b89830152868301359061ffff8216820361053257828a928f948a015260606110ca8187016128f6565b9082015260806110db8187016128f6565b90820152815201910190610e89565b8680fd5b5050503461031d578160031936011261031d5751908152602090f35b5050503461031d57602060031936011261031d5760018160809363ffffffff6111316127ae565b16815261012f60205220918254926fffffffffffffffffffffffffffffffff9283910154169181519367ffffffffffffffff8116855261ffff81841c16602086015260501c16908301526060820152f35b5050346102ed57816003193601126102ed576001600160a01b03826020946111a8612763565b9335815260658652209116600052825260ff81600020541690519015158152f35b5050503461031d578160031936011261031d576020906001600160a01b0360ca54169051908152f35b5050503461031d578160031936011261031d5760209063ffffffff6101305460a01c169051908152f35b5050503461031d57602060031936011261031d5760207ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d916001600160a01b0361126461274d565b61126c612bc6565b1690817fffffffffffffffffffffffff000000000000000000000000000000000000000060ca54161760ca5551908152a180f35b8484846112ac366127d2565b937f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de959195988960005260209960658b5288600020336000528b5260ff8960002054161561140c57506112fe85612983565b156113e45792899594928661ffff8b9463ffffffff976001600160a01b03958d878060ca54169a60c9549c8d9684519d8e6113388161286e565b521680988d015216908a015260608901521c166080860152835261012f8752611391898420968a51998a98899788957ff43bcfc50000000000000000000000000000000000000000000000000000000087528601612a54565b0393165af19283156113d957926113aa575b5051908152f35b9091508281813d83116113d2575b6113c281836128a6565b81010312610532575190836113a3565b503d6113b8565b8251903d90823e3d90fd5b8288517f3d693ada000000000000000000000000000000000000000000000000000000008152fd5b838b8a9261141933613139565b8451906114258261288a565b604282528382019260603685378251156115dc57603084538251600190600110156115c757607860218501536041905b80821161154d57505061150b576115079386936114f3936114e46048946114af9a519a857f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008d9788015282519283916037890191016130d9565b8401917f206973206d697373696e6720726f6c65200000000000000000000000000000006037840152518093868401906130d9565b010360288101875201856128a6565b5192839262461bcd60e51b845283016130fc565b0390fd5b50505080606493519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f811660108110156115b2577f3031323334353637383961626364656600000000000000000000000000000000901a6115898487613128565b53871c91801561159d576000190190611455565b601188634e487b7160e01b6000525260246000fd5b603289634e487b7160e01b6000525260246000fd5b603287634e487b7160e01b6000525260246000fd5b603286634e487b7160e01b6000525260246000fd5b84848492346102ed57611603366127d2565b9491909261161081612983565b156116c25761161d613018565b6001600160a01b039889918260ca54169360c9549586918b51966116408861286e565b875260209d63ffffffff8f9b1694858c8a0152168c88015260608701521c61ffff166080850152895261012f8652878920928851978896879586947f371c3a8e0000000000000000000000000000000000000000000000000000000086528501936116aa94612a54565b0392165afa9283156113d957926113aa575051908152f35b8887517f3d693ada000000000000000000000000000000000000000000000000000000008152fd5b505050600319360161010081126102ed5760601361031d5760643563ffffffff8116810361053257608435906001600160a01b0380831683036105325760607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5c36011261053b57611759612bc6565b611761612ee1565b60a43590811681036105325760c435936000808080888660e435f1611784612f36565b506117c657936117ba917f80f845dbaecd024dbeb255af88f2c72c926234fa09f36adcba5d7383b73d3832955194859485612f76565b0390a15b600160fd5580f35b936117f7917f5c63dca53e1b3ae83df72c0d3979318a89fe6c81f96d4675487795d96cfef3ab955194859485612f76565b0390a16117be565b5050503461031d578160031936011261031d576020906001600160a01b0361013054169051908152f35b5050503461031d578160031936011261031d5760209060ff6097541690519015158152f35b505091346104d557816003193601126104d5575061186a612763565b50517fcebd140e000000000000000000000000000000000000000000000000000000008152fd5b5050346102ed57816003193601126102ed578035916118ae612763565b91838552602090606582526118c860018488200154612dc3565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca8514806119f7575b611974575b5083600052606581526001600160a01b038260002093169283600052815260ff82600020541615611925578480f35b836000526065815281600020908360005252600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4388080808480f35b60c9549067ffffffffffffffff90818360a01c169182146119e257507bffffffffffffffff000000000000000000000000000000000000000060017fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff920160a01b1691161760c955386118f6565b601190634e487b7160e01b6000525260246000fd5b508460005260658252826000206001600160a01b038516600052825260ff836000205416156118f1565b5050503461031d57602060031936011261031d57602090611a48611a4361274d565b612983565b90519015158152f35b8484913461031d576020806003193601126102ed5780919263ffffffff611a766127ae565b16815260cb825284812093855190819485918188549485815201908198865282862094865b81601f820110611ee85784611bbe975493838310611ed3575b838310611ebb575b838310611ea3575b838310611e8b575b838310611e74575b838310611e5c575b838310611e44575b838310611e2c575b8d848410611e14575b50838310611dfc575b838310611de4575b838310611dcc575b838310611db4575b838310611d9c575b838310611d84575b838310611d6c575b838310611d54575b838310611d3c575b838310611d24575b838310611d0c575b838310611cf4575b838310611cdc575b838310611cc4575b838310611cac575b838310611c94575b838310611c7c575b838310611c64575b838310611c4c575b838310611c36575b50828210611c20575b828210611c0a575b5010611bfc575b50905096959492939603826128a6565b83519485948186019282875251809352850193925b828110611be257505050500390f35b835160ff1685528695509381019392810192600101611bd3565b60f81c815201849089611bae565b6001919460ff8560f01c16815201930184611ba7565b6001919460ff8560e81c16815201930184611b9f565b9460ff85600194971c168152019301848d611b96565b91948160019160ff8760d81c16815201950191611b8e565b91948160019160ff8760d01c16815201950191611b86565b91948160019160ff8760c81c16815201950191611b7e565b91948160019160ff8760c01c16815201950191611b76565b91948160019160ff8760b81c16815201950191611b6e565b91948160019160ff8760b01c16815201950191611b66565b91948160019160ff8760a81c16815201950191611b5e565b91948160019160ff8760a01c16815201950191611b56565b91948160019160ff8760981c16815201950191611b4e565b91948160019160ff8760901c16815201950191611b46565b91948160019160ff8760881c16815201950191611b3e565b91948160019160ff8760801c16815201950191611b36565b91948160019160ff8760781c16815201950191611b2e565b91948160019160ff8760701c16815201950191611b26565b91948160019160ff8760681c16815201950191611b1e565b91948160019160ff8760601c16815201950191611b16565b91948160019160ff8760581c16815201950191611b0e565b91948160019160ff8760501c16815201950191611b06565b91948160019160ff8760481c16815201950191611afe565b600191939660ff8785931c168152019501918d611af5565b91948160019160ff8760381c16815201950191611aec565b91948160019160ff8760301c16815201950191611ae4565b91948160019160ff8760281c16815201950191611adc565b91948160019160ff87831c16815201950191611ad4565b91948160019160ff8760181c16815201950191611acc565b91948160019160ff8760101c16815201950191611ac4565b91948160019160ff8760081c16815201950191611abc565b91948160019160ff8716815201950191611ab4565b9260019194929550610400908c88548091818a60ff82819594828096168952828260081c168c8a0152828260101c16818a015282828d82828d606090838360181c168282015283836080961c1685820152838360a099828260281c168b85015260c09d8e848460301c1690860152838360381c16908501521c16610100820152838360481c16610120820152838360501c16610140820152610160848460581c169101521c166101808d0152828260681c166101a08d0152828260701c166101c08d0152828260781c166101e08d01521c166102008a0152828260881c166102208a0152828260901c166102408a0152828260981c166102608a01521c16610280870152828260a81c166102a0870152828260b01c166102c0870152828260b81c166102e08701521c16610300840152808260c81c16610320840152808260d01c16610340840152808260d81c1661036084015280828a1c16610380840152808260e81c166103a08401528160f01c166103c083015260f81c6103e082015201950191019286928894959295611a9b565b5050346102ed5760206003193601126102ed5781602093600192358152606585522001549051908152f35b8285853461031d57602090816003193601126102ed578335801515810361053f5760008052606583528160002033600052835260ff826000205416156121ab571561212a577f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258929350612115613018565b600160ff19609754161760975551338152a180f35b6097549360ff85161561216a575060ff197f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa93941660975551338152a180f35b82606492519162461bcd60e51b8352820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b5083826121b733613139565b83516000916121c58261288a565b604282528382019260603685378251156122b2576030845382516001906001101561229f57607860218501536041905b80821161224f57505061150b576115079386936114f3936114e46048946114af9a519a857f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008d9788015282519283916037890191016130d9565b9091600f811660108110156115b2577f3031323334353637383961626364656600000000000000000000000000000000901a61228b8487613128565b53871c91801561159d5760001901906121f5565b602482603289634e487b7160e01b835252fd5b80603287634e487b7160e01b6024945252fd5b505090346102ed576122d636612779565b9291906122e1612bc6565b7f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de86526065602052828620946001600160a01b038093169586885260205260ff8488205416156124085786863b156104d55784517ffd9be5220000000000000000000000000000000000000000000000000000000081526001600160a01b0384169281019283526020830187905291829081906040010381838a5af180156123fe576123c0575b5082519485521660208401528201527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb90606090a180f35b917f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb959391966123f260609694612844565b96919395509193612388565b84513d89823e3d90fd5b83517f42cbfad1000000000000000000000000000000000000000000000000000000008152fd5b5050346102ed5760206003193601126102ed5735907fffffffff0000000000000000000000000000000000000000000000000000000082168092036102ed57602092507f7965db0b0000000000000000000000000000000000000000000000000000000082149182156124a6575b50519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000001491503861249d565b5050346102ed576124e036612779565b916124ec949194612bc6565b6001600160a01b039081168061258c5750841615612564578480808085885af1612514612f36565b5015612521575050505080f35b517f2c024f920000000000000000000000000000000000000000000000000000000081526001600160a01b03909316918301918252602082015281906040010390fd5b9050517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b90859293949516156127035782517fa9059cbb0000000000000000000000000000000000000000000000000000000060208083019182526001600160a01b0394909416602483015260448083019690965294815291936125ed6064846128a6565b83519284840184811067ffffffffffffffff8211176126f05785528584527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564868501525161264d9392918891829182855af1612647612f36565b91613256565b80518381159182156126d0575b50509050156126695750505080f35b60849350519162461bcd60e51b8352820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b838092935001031261053b57820151801515810361053b5780833861265a565b60248960418a634e487b7160e01b835252fd5b8483517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b85346104d557806003193601126104d5575061ffff60209260c954901c168152f35b600435906001600160a01b038216820361053257565b602435906001600160a01b038216820361053257565b6003196060910112610532576001600160a01b0390600435828116810361053257916024359081168103610532579060443590565b6004359063ffffffff8216820361053257565b359063ffffffff8216820361053257565b60806003198201126105325760043563ffffffff8116810361053257916024356001600160a01b038116810361053257916044359160643567ffffffffffffffff9283821161053257806023830112156105325781600401359384116105325760248483010111610532576024019190565b67ffffffffffffffff811161285857604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761285857604052565b6080810190811067ffffffffffffffff82111761285857604052565b90601f601f19910116810190811067ffffffffffffffff82111761285857604052565b67ffffffffffffffff81116128585760051b60200190565b359067ffffffffffffffff8216820361053257565b35906fffffffffffffffffffffffffffffffff8216820361053257565b9080601f8301121561053257602090823561292d816128c9565b9361293b60405195866128a6565b81855260208086019260051b82010192831161053257602001905b828210612964575050505090565b81356001600160a01b0381168103610532578152908301908301612956565b6001600160a01b031660008181527f0f6a9529577ef7bf1cbc8fccda1cc3c881f755c7e92e34c7c4deac1fa3c1c791602052604081205490919060ff16156129c9575090565b67ffffffffffffffff60c95460a01c16159081156129f1575b50156129ee5750600190565b90565b90507f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca825260656020526040822090825260205260ff604082205416386129e2565b601f8260209493601f19938186528686013760008582860101520116010190565b6129ee949260016080610140946001600160a01b0380825116865263ffffffff602083015116602087015260408201511660408601526060810151606086015201519161ffff809316608085015280549267ffffffffffffffff841660a08601528360401c1660c08501526fffffffffffffffffffffffffffffffff809360501c1660e0850152015416610100820152816101208201520191612a33565b8051821015612b065760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b3560ff811681036105325790565b356001600160a01b03811681036105325790565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610532570180359067ffffffffffffffff82116105325760200191813603831361053257565b67ffffffffffffffff612bc06040809363ffffffff612bad826127c1565b16865260208101356020870152016128e1565b16910152565b3360009081527f2c01dc0041dfb6d4238a91e5a638996136aed16f837d5beb45610732cf9bf4b060209081526040808320549092907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759060ff1615612c2b5750505050565b612c3433613139565b845191612c408361288a565b60428352848301936060368637835115612daf576030855383519060019160011015612daf5790607860218601536041915b818311612d3457505050612cf2576114af938593612cdc93612ccd604894611507995198857f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008b9788015282519283916037890191016130d9565b010360288101855201836128a6565b5191829162461bcd60e51b8352600483016130fc565b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612d9b577f3031323334353637383961626364656600000000000000000000000000000000901a612d718588613128565b5360041c928015612d8757600019019190612c72565b602482634e487b7160e01b81526011600452fd5b602483634e487b7160e01b81526032600452fd5b80634e487b7160e01b602492526032600452fd5b600081815260209060658252604092838220338352835260ff848320541615612dec5750505050565b612df533613139565b845191612e018361288a565b60428352848301936060368637835115612daf576030855383519060019160011015612daf5790607860218601536041915b818311612e8e57505050612cf2576114af938593612cdc93612ccd604894611507995198857f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008b9788015282519283916037890191016130d9565b909192600f81166010811015612d9b577f3031323334353637383961626364656600000000000000000000000000000000901a612ecb8588613128565b5360041c928015612d8757600019019190612e33565b600260fd5414612ef257600260fd55565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b3d15612f71573d9067ffffffffffffffff82116128585760405191612f656020601f19601f84011601846128a6565b82523d6000602084013e565b606090565b90919493929460e082019560043563ffffffff9081811680910361053257845260243560208501526044359467ffffffffffffffff86168096036105325760c09560408601521660608401526001600160a01b0380921660808401521660a08201520152565b919363ffffffff60c09492979695612ff88560e081019a612b8f565b1660608401526001600160a01b0380921660808401521660a08201520152565b60ff6097541661302457565b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b1561306f57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60005b8381106130ec5750506000910152565b81810151838201526020016130dc565b601f19601f6040936020845261312181518092816020880152602088880191016130d9565b0116010190565b908151811015612b06570160200190565b604051906060820182811067ffffffffffffffff82111761285857604052602a8252602082016040368237825115612b065760309053815160019060011015612b0657607860218401536029905b8082116131db5750506131975790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613241577f3031323334353637383961626364656600000000000000000000000000000000901a6132178486613128565b5360041c91801561322c576000190190613187565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b919290156132b7575081511561326a575090565b3b156132735790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156132ca5750805190602001fd5b6115079060405191829162461bcd60e51b8352600483016130fc56fea26469706673582212205325d3aab047a60be3e7b034829590f991ccf721ef8f48dcb3c06f71f40fb66a64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeDropCap";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IExecutor.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeDropFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeDropSucceeded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "baseGas";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "floorMarginUSD";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "nativeDropCap";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "_messageLibs";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_roleAdmin";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "localEid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.NativeDropParams";
            readonly name: "_nativeDropParams";
            readonly type: "tuple";
        }];
        readonly name: "nativeDrop";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.NativeDropParams";
            readonly name: "_nativeDropParams";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.ExecutionParams";
            readonly name: "_executionParams";
            readonly type: "tuple";
        }];
        readonly name: "nativeDropAndExecute302";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeDropCap";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IExecutor.DstConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDstConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ExecutorInterface;
    static connect(address: string, runner?: ContractRunner | null): Executor;
}

type ExecutorFeeLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ExecutorFeeLib__factory extends ContractFactory {
    constructor(...args: ExecutorFeeLibConstructorParams);
    getDeployTransaction(_nativeDecimalsRate: BigNumberish, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_nativeDecimalsRate: BigNumberish, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ExecutorFeeLib & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): ExecutorFeeLib__factory;
    static readonly bytecode = "0x60a0346100a057601f61123f38819003918201601f19168301916001600160401b038311848410176100a5578084926020946040528339810103126100a0575160008054336001600160a01b0319821681178355604051939290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360805261118390816100bc823960805181610f2a0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c806301e33667146104c1578063371c3a8e146103af578063715018a61461032e5780638da5cb5b146102f7578063f2fde38b146101db5763f43bcfc51461006f5750610011565b610078366107da565b92909391608060208301936100c163ffffffff9661753088885116109867ffffffffffffffff865116996fffffffffffffffffffffffffffffffff9a8b60608901511691610a65565b95909673ffffffffffffffffffffffffffffffffffffffff8651169151168a6060870151936101338c51998a96879586947fc1723a1d000000000000000000000000000000000000000000000000000000008652850160409194939263ffffffff606083019616825260208201520152565b03925af19081156101d1579261018c95949288926101869560209a9085948693610193575b509061017d929161ffff946080868f8401511691019a8d878d51169301511692610eda565b95511692610f84565b90610990565b9051908152f35b9150935061017d94506101be915060803d6080116101ca575b6101b681836107a1565b810190610959565b90959194909291610158565b503d6101ac565b86513d89823e3d90fd5b50346102f35760206003193601126102f3576101f5610779565b906101fe6109b3565b73ffffffffffffffffffffffffffffffffffffffff8092169283156102705750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50503461032a578160031936011261032a5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b5080fd5b83346103ac57806003193601126103ac576103476109b3565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50346102f3576103be366107da565b929093916080602083019361040763ffffffff9661753088885116109867ffffffffffffffff865116996fffffffffffffffffffffffffffffffff9a8b60608901511691610a65565b95909673ffffffffffffffffffffffffffffffffffffffff8651169151166060860151926104788b51988995869485947f88a4124c000000000000000000000000000000000000000000000000000000008652850160409194939263ffffffff606083019616825260208201520152565b03915afa9081156101d1579261018c95949288926101869560209a908594869361019357509061017d929161ffff946080868f8401511691019a8d878d51169301511692610eda565b50346102f35760606003193601126102f3576104db610779565b6024359273ffffffffffffffffffffffffffffffffffffffff80851690818603610775576044359361050b6109b3565b16806105ac575015610584578480808085885af1610527610fe2565b5015610534575050505080f35b517f2c024f9200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909316918301918252602082015281906040010390fd5b9050517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b9094919293941561074d5782517fa9059cbb00000000000000000000000000000000000000000000000000000000602080830191825273ffffffffffffffffffffffffffffffffffffffff94909416602483015260448083019690965294815291936106196064846107a1565b83519284840184811067ffffffffffffffff82111761073a5785528584527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656486850152516106799392918891829182855af1610673610fe2565b91611049565b8051838115918215610716575b50509050156106955750505080f35b6084935051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b838092935001031261073657820151801515810361073657808338610686565b8480fd5b60248960418a634e487b7160e01b835252fd5b8483517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b8680fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361079c57565b600080fd5b90601f601f19910116810190811067ffffffffffffffff8211176107c457604052565b634e487b7160e01b600052604160045260246000fd5b6003198101610140811261079c5760a01361079c5760408051909267ffffffffffffffff9160a08101838111828210176107c457855273ffffffffffffffffffffffffffffffffffffffff600435818116810361079c57825260243563ffffffff8116810361079c576020830152604435908116810361079c5781860152606435606082015261ffff90608435828116810361079c5760808201529460807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5c86011261079c5780519160808301838110868211176107c457825260a435858116810361079c57835260c435908116810361079c57602083015260e4356fffffffffffffffffffffffffffffffff91828216820361079c5783015261010435908116810361079c57606082015292610124359083821161079c578060238301121561079c57816004013593841161079c576024848301011161079c576024019190565b51906fffffffffffffffffffffffffffffffff8216820361079c57565b919082608091031261079c578151916109746020820161093c565b9161098d60606109866040850161093c565b930161093c565b90565b9190820180921161099d57565b634e487b7160e01b600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff6000541633036109d457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b8181029291811591840414171561099d57565b8115610a4f570490565b634e487b7160e01b600052601260045260246000fd5b909493916000916000938015610eb05784959291959167ffffffffffffffff8699169686945b838510610b22575050508103610af15750906fffffffffffffffffffffffffffffffff610ab9921690610990565b93610ac2575090565b606682029180830460661490151715610add57506064900490565b80634e487b7160e01b602492526011600452fd5b602490604051907fb61964ac0000000000000000000000000000000000000000000000000000000082526004820152fd5b9091976001969460039586820186610b3e828c86018389611022565b919035927fffff00000000000000000000000000000000000000000000000000000000000080851694600294858110610e9d575b5050501015610e895785840189013560f81c9360049260f01c81018a019190610ba090839085018b8a611022565b9c90929a818714600014610cb157505050601090818c141580610ca6575b610c7d57610bcc8c8261103a565b9b6020808203610c725711610c6e57013560801c925b8680610c53575b610c2357505090610c12610c1a93926fffffffffffffffffffffffffffffffff80931690610990565b981690610990565b975b9190610a8b565b60249250604051917f3d6c5c70000000000000000000000000000000000000000000000000000000008352820152fd5b506fffffffffffffffffffffffffffffffff84161515610be9565b8c80fd5b505050508a92610be2565b826040517fd03c9969000000000000000000000000000000000000000000000000000000008152fd5b5060208c1415610bbe565b969e96828793949d969e959714600014610d8d5750505050603098898203610d645781610cdd9161103a565b9811610d60576fffffffffffffffffffffffffffffffff80809916911601878111610d4d5780978084169116818111610d1857505050610c1c565b60449350604051927f6eb7f2d20000000000000000000000000000000000000000000000000000000084528301526024820152fd5b60248a601184634e487b7160e01b835252fd5b8980fd5b836040517fde48d299000000000000000000000000000000000000000000000000000000008152fd5b969e96829d949693959c9d14600014610e6d575087610c2357506012908185141580610e62575b610e3a5750838311610e1257838111610e12576080936022808203610e165711610e1257610e0c949392916fffffffffffffffffffffffffffffffff610e01928d0135851c5b1690610990565b990135901c90610990565b97610c1c565b8b80fd5b50505090610e01610e0c9493926fffffffffffffffffffffffffffffffff8d610dfa565b6040517f071673fe000000000000000000000000000000000000000000000000000000008152fd5b506022851415610db4565b959d9f50925092509850818114600014610c2357505099610c1c565b60248c634e487b7160e01b81526032600452fd5b85038d1b82901b16169350388080610b72565b60046040517f148c679d000000000000000000000000000000000000000000000000000000008152fd5b9293929161271091610efa9161ffff91828116610f7d57505b1683610a32565b04926fffffffffffffffffffffffffffffffff80931680158015610f73575b610f6c57610f50610f5592610f5a957f00000000000000000000000000000000000000000000000000000000000000009116610a32565b610a45565b610990565b9080821115610f67575090565b905090565b5050505090565b5083821615610f19565b9050610ef3565b9392919060009480610f97575b50505050565b612710949550610fd7939261ffff92610fc7610fcf936fffffffffffffffffffffffffffffffff80931690610a32565b911690610a45565b911690610a32565b049038808080610f91565b3d1561101d573d9067ffffffffffffffff82116107c457604051916110116020601f19601f84011601846107a1565b82523d6000602084013e565b606090565b9093929384831161079c57841161079c578101920390565b9060101161079c573560801c90565b919290156110c4575081511561105d575090565b3b156110665790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156110d75750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b84811061113657505050601f19601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161111356fea26469706673582212203a202ca4c6c41a0e161b5f87d07669e0d6e19f8be0b66c7f61878a2a8041058764736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_nativeDecimalsRate";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "cursor";
            readonly type: "uint256";
        }];
        readonly name: "InvalidExecutorOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLzComposeOption";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLzReceiveOption";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidNativeDropOption";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "cap";
            readonly type: "uint256";
        }];
        readonly name: "NativeDropAmountExceedsCap";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NoOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "optionType";
            readonly type: "uint8";
        }];
        readonly name: "UnsupportedOptionType";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeDropCap";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "nativeDropCap";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): ExecutorFeeLibInterface;
    static connect(address: string, runner?: ContractRunner | null): ExecutorFeeLib;
}

declare class MessageLibBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }];
    static createInterface(): MessageLibBaseInterface;
    static connect(address: string, runner?: ContractRunner | null): MessageLibBase;
}

type PriceFeedConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PriceFeed__factory extends ContractFactory {
    constructor(...args: PriceFeedConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<PriceFeed & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): PriceFeed__factory;
    static readonly bytecode = "0x60808060405234610016576116bb908161001c8239f35b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816311f2c34314610ef0575080632f7cb0b414610e8b5780633161b7f614610d1c57806336a5beba14610cc257806352a7251014610c425780635d6d7ccb14610b8d5780635e280f1114610b58578063715018a614610ad85780637bc3c9ab14610a8c5780637dc438a41461092a57806388a4124c146109135780638ca2fb08146108ca5780638da5cb5b1461089557806392807f5814610864578063c1723a1d14610817578063c1840327146107e6578063c4d66de814610560578063cd68b79b1461053e578063d350ad25146104de578063da26663a14610495578063dbbb41551461042e578063e0ad121a1461036a578063f2fde38b1461029a5763fd9be5221461012c57600080fd5b34610296578060031936011261029657610144610f55565b60243591610150611094565b73ffffffffffffffffffffffffffffffffffffffff821691821561026e578580808681945af13d156102695767ffffffffffffffff3d81811161023d57835191601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011683019081118382101761021157845281528660203d92013e5b156101de578480f35b6044945051927f2c024f920000000000000000000000000000000000000000000000000000000084528301526024820152fd5b60248960418a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6024886041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6101d5565b8482517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b509034610296576020600319360112610296576102b5610f55565b916102be611094565b73ffffffffffffffffffffffffffffffffffffffff8316156102e757836102e4846111e1565b80f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b83823461042a57602060031936011261042a57806104269261ffff61038d610f78565b610395611077565b501681526067602052209063ffffffff6103ad610fd8565b92546fffffffffffffffffffffffffffffffff8116845267ffffffffffffffff8160801c16602085015260c01c16818301525191829182919091604063ffffffff8160608401956fffffffffffffffffffffffffffffffff815116855267ffffffffffffffff6020820151166020860152015116910152565b0390f35b5080fd5b83346104925760206003193601126104925773ffffffffffffffffffffffffffffffffffffffff61045d610f55565b610465611094565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000606a541617606a5580f35b80fd5b50903461029657602060031936011261029657359063ffffffff918281168091036104da576104269382916104c8611077565b508152606760205220916103ad610fd8565b8380fd5b8334610492576020600319360112610492576fffffffffffffffffffffffffffffffff610509610f36565b610511611094565b167fffffffffffffffffffffffffffffffff00000000000000000000000000000000606554161760655580f35b83823461042a578160031936011261042a5760209060695460801c9051908152f35b5090346102965760206003193601126102965761057b610f55565b73ffffffffffffffffffffffffffffffffffffffff807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61038181541680156000146107d85750555b84549160ff8360081c1615938480956107cb575b80156107b4575b1561073157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0092846001858316178855610703575b5061062d60ff875460081c166106288161158e565b61158e565b610636336111e1565b168452606660205260018385209182541617905568056bc75e2d631000007fffffffffffffffffffffffffffffffff000000000000000000000000000000006065541617606555702f000000000000000000000000000000006fffffffffffffffffffffffffffffffff60695416176069556106b0575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff84541684555160018152a180f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010117865538610613565b60849060208751917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156105dd5750600160ff8516146105dd565b50600160ff8516106105d6565b9150503303156105c2578480fd5b83823461042a578160031936011261042a576020906fffffffffffffffffffffffffffffffff606554169051908152f35b6104268261082d61082736610f0a565b916114da565b93519283526fffffffffffffffffffffffffffffffff91821660208401528116604083015290911660608201529081906080820190565b83823461042a578160031936011261042a576020906fffffffffffffffffffffffffffffffff606954169051908152f35b83823461042a578160031936011261042a5760209073ffffffffffffffffffffffffffffffffffffffff603354169051908152f35b83823461042a57602060031936011261042a5760ff8160209373ffffffffffffffffffffffffffffffffffffffff610900610f55565b1681526066855220541690519015158152f35b83823461042a576104269061082d61082736610f0a565b5090346102965760c06003193601126102965773ffffffffffffffffffffffffffffffffffffffff603354163303610a52575b3563ffffffff80821682036104da5760607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc3601126104da5761099e610fd8565b916024356fffffffffffffffffffffffffffffffff81168103610a4e57835267ffffffffffffffff926044358481168103610a4a576020820152606435918383168303610a4a576109f29286830152611113565b6084359182168092036104da5760a43590811681036104da576bffffffff00000000000000007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000091606854941b169216171760685580f35b8680fd5b8580fd5b338352606660205260ff828420541661095d5790517fa5138d71000000000000000000000000000000000000000000000000000000008152fd5b50823461049257606060031936011261049257506fffffffffffffffffffffffffffffffff610ac9610abc610f78565b6044359060243590610ff8565b83519182529091166020820152f35b8334610492578060031936011261049257610af1611094565b8073ffffffffffffffffffffffffffffffffffffffff6033547fffffffffffffffffffffffff00000000000000000000000000000000000000008116603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b83823461042a578160031936011261042a5760209073ffffffffffffffffffffffffffffffffffffffff606a54169051908152f35b50903461029657602060031936011261029657610ba8610f36565b9173ffffffffffffffffffffffffffffffffffffffff603354163303610c09575b836fffffffffffffffffffffffffffffffff84167fffffffffffffffffffffffffffffffff00000000000000000000000000000000606954161760695580f35b338452606660205260ff8185205416610bc957517fa5138d71000000000000000000000000000000000000000000000000000000008152fd5b83823461042a578060031936011261042a57610c5c610f55565b90602435918215158093036104da5773ffffffffffffffffffffffffffffffffffffffff90610c89611094565b168352606660205282209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00835416911617905580f35b5082346104925780600319360112610492576020610cde610f89565b8281520152610ceb610f89565b602060685467ffffffffffffffff81169283815263ffffffff9283910191851c168152835192835251166020820152f35b50346102965760209160206003193601126104da5780359167ffffffffffffffff90818411610a4e5736602385011215610a4e578383013593828511610a4a576024936007903660248860071b85010111610e875773ffffffffffffffffffffffffffffffffffffffff603354163303610e4d575b50875b868110610d9f578880f35b80821b830190868201359163ffffffff908184168403610e455760607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc8236030112610e4557610ded610fd8565b9060448101356fffffffffffffffffffffffffffffffff81168103610e495782526064810135908982168203610e49576084918d84015201359182168203610e4557600193610e3f9288830152611113565b01610d94565b8b80fd5b8d80fd5b338952606660205260ff848a205416610d915783517fa5138d71000000000000000000000000000000000000000000000000000000008152fd5b8880fd5b833461049257602060031936011261049257610ea5610f36565b610ead611094565b6fffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffff000000000000000000000000000000006069549260801b1691161760695580f35b84903461042a57602091610f0336610f0a565b5050508152f35b6003196060910112610f315760043563ffffffff81168103610f3157906024359060443590565b600080fd5b600435906fffffffffffffffffffffffffffffffff82168203610f3157565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610f3157565b6004359061ffff82168203610f3157565b604051906040820182811067ffffffffffffffff821117610fa957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051906060820182811067ffffffffffffffff821117610fa957604052565b61ffff169190606e8314801561106c575b8015611061575b156110225761101e9261145c565b9091565b606f83148015611056575b801561104b575b156110425761101e9261134f565b61101e926112d6565b50614ea48314611034565b50612794831461102d565b50614eaf8314611010565b5061279f8314611009565b61107f610fd8565b90600082526000602083015260006040830152565b73ffffffffffffffffffffffffffffffffffffffff6033541633036110b557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906fffffffffffffffffffffffffffffffff918282511692604067ffffffffffffffff6020850151169363ffffffff91829101511692611151610fd8565b958652602086019485526040860193845216600052606760205260406000209351167fffffffff000000000000000000000000000000000000000000000000000000007bffffffff00000000000000000000000000000000000000000000000077ffffffffffffffff000000000000000000000000000000008654955160801b16935160c01b1693161717179055565b6033549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b8181029291811591840414171561126157565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9190820180921161126157565b81156112a7570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b929161130d6113219161130861134b9463ffffffff8098166000526067602052604060002054978860c01c169061124e565b611290565b67ffffffffffffffff8560801c169061124e565b926113406fffffffffffffffffffffffffffffffff809216809561124e565b90606554169061129d565b9190565b92919063ffffffff918261136286611619565b169060009182526067602052604082205492611383858560c01c168261124e565b92610c74840180941161142f578567ffffffffffffffff94858760801c166113aa9161124e565b9816815260676020526040902054948560c01c166113c79161124e565b906113d191611290565b908360801c166113e09161124e565b936fffffffffffffffffffffffffffffffff8092166113fe9161124e565b908060655416918261140f9161129d565b9216938461141c9161124e565b906114269161129d565b61134b91611290565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fd5b929161134b916114ce6113219263ffffffff809716600052606760205261130860406000206113086114bb606461149860695460801c8961124e565b04966114ad606854988d8a60401c169061124e565b93549b8c60c01c169061124e565b9367ffffffffffffffff80971690611290565b908560801c169061124e565b919061753063ffffffff80941606928316606e81148015611583575b8015611578575b1561152e575061150c9261145c565b90915b6fffffffffffffffffffffffffffffffff908160655416916069541690565b606f811490811561156c575b8115611560575b5015611557576115509261134f565b909161150f565b611550926112d6565b614ea491501438611541565b6127948114915061153a565b50614eaf81146114fd565b5061279f81146114f6565b1561159557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b61753063ffffffff9182160616606f81036116345750606590565b6127948103611644575061278990565b614ea4811461167e57602490604051907f8d2da5800000000000000000000000000000000000000000000000000000000082526004820152fd5b50614e999056fea2646970667358221220149918f88452a236038b305de77e1d057c5232e6b2b775e9a851ea27b53f58d264736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "provided";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "required";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyPriceUpdater";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "l2Eid";
            readonly type: "uint32";
        }];
        readonly name: "UnknownL2Eid";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "ARBITRUM_COMPRESSION_PERCENT";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "arbitrumPriceExt";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gasPerL2Tx";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerL1CallDataByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.ArbitrumPriceExt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeByChain";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatio";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeByEid";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getPrice";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint128";
                readonly name: "priceRatio";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "gasPriceInUnit";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.Price";
            readonly name: "price";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }];
        readonly name: "getPrice";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint128";
                readonly name: "priceRatio";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "gasPriceInUnit";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.Price";
            readonly name: "price";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPriceRatioDenominator";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceUpdater";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeTokenPriceUSD";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "updater";
            readonly type: "address";
        }];
        readonly name: "priceUpdater";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "_compressionPercent";
            readonly type: "uint128";
        }];
        readonly name: "setArbitrumCompressionPercent";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly name: "setEndpoint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "_nativeTokenPriceUSD";
            readonly type: "uint128";
        }];
        readonly name: "setNativeTokenPriceUSD";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint128";
                    readonly name: "priceRatio";
                    readonly type: "uint128";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "gasPriceInUnit";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "gasPerByte";
                    readonly type: "uint32";
                }];
                readonly internalType: "struct ILayerZeroPriceFeed.Price";
                readonly name: "price";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.UpdatePrice[]";
            readonly name: "_price";
            readonly type: "tuple[]";
        }];
        readonly name: "setPrice";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint128";
                    readonly name: "priceRatio";
                    readonly type: "uint128";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "gasPriceInUnit";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "gasPerByte";
                    readonly type: "uint32";
                }];
                readonly internalType: "struct ILayerZeroPriceFeed.Price";
                readonly name: "price";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "gasPerL2Tx";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "gasPerL1CallDataByte";
                    readonly type: "uint32";
                }];
                readonly internalType: "struct ILayerZeroPriceFeed.ArbitrumPriceExt";
                readonly name: "extend";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.UpdatePriceExt";
            readonly name: "_update";
            readonly type: "tuple";
        }];
        readonly name: "setPriceForArbitrum";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "_denominator";
            readonly type: "uint128";
        }];
        readonly name: "setPriceRatioDenominator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_addr";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setPriceUpdater";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): PriceFeedInterface;
    static connect(address: string, runner?: ContractRunner | null): PriceFeed;
}

declare class ReceiveLibBaseE2__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_config";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ReceiveLibBaseE2Interface;
    static connect(address: string, runner?: ContractRunner | null): ReceiveLibBaseE2;
}

declare class SendLibBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "available";
            readonly type: "uint256";
        }];
        readonly name: "InvalidAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }];
        readonly name: "InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ZeroMessageSize";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultExecutorConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecutorConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "ExecutorConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "treasury";
            readonly type: "address";
        }];
        readonly name: "TreasurySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "executorConfigs";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getExecutorConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct ExecutorConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultExecutorConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): SendLibBaseInterface;
    static connect(address: string, runner?: ContractRunner | null): SendLibBase;
}

declare class SendLibBaseE2__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "CannotWithdrawAltToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requested";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "available";
            readonly type: "uint256";
        }];
        readonly name: "InvalidAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidExecutor";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }];
        readonly name: "InvalidMessageSize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotTreasury";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ZeroMessageSize";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly indexed: false;
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DefaultExecutorConfigsSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecutorConfig";
            readonly name: "config";
            readonly type: "tuple";
        }];
        readonly name: "ExecutorConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lzToken";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "LzTokenFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "treasury";
            readonly type: "address";
        }];
        readonly name: "TreasurySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "executorConfigs";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getExecutorConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct ExecutorConfig";
            readonly name: "rtnConfig";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_config";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct ExecutorConfig";
                readonly name: "config";
                readonly type: "tuple";
            }];
            readonly internalType: "struct SetDefaultExecutorConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultExecutorConfigs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): SendLibBaseE2Interface;
    static connect(address: string, runner?: ContractRunner | null): SendLibBaseE2;
}

type TreasuryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Treasury__factory extends ContractFactory {
    constructor(...args: TreasuryConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<Treasury & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): Treasury__factory;
    static readonly bytecode = "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3610b8d90816100618239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816301d9c2cb146107e45750806301e336671461051c57806301f1f6e8146104c65780633972d46c146104a4578063715018a6146104265780637e8a06991461036d5780638da5cb5b1461033a5780638ee643a61461031857806390953238146102f957806396a141a0146102da57838163bf6e75361461021657508063d4244221146101fc578063d51c5486146101dd5763f2fde38b146100bf57600080fd5b346101d95760206003193601126101d9576100d8610805565b906100e1610907565b73ffffffffffffffffffffffffffffffffffffffff809216928315610156575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b6020836101f56101ec36610850565b92509050610986565b9051908152f35b505034610212576020906101f56101ec36610850565b5080fd5b929050346102d65760606003193601126102d657610232610805565b916024359273ffffffffffffffffffffffffffffffffffffffff908185168095036102d25761025f610907565b1692833b156102ce576044859283855196879485937ffd9be522000000000000000000000000000000000000000000000000000000008552840152833560248401525af19081156102c557506102b25750f35b6102bb906108a1565b6102c25780f35b80fd5b513d84823e3d90fd5b8480fd5b8580fd5b5050fd5b5050346102125781600319360112610212576020906001549051908152f35b5050346102125781600319360112610212576020906002549051908152f35b83823461021257602060031936011261021257610333610907565b3560025580f35b50503461021257816003193601126102125773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b5090346101d95760806003193601126101d95782610389610805565b61039161082d565b6044359073ffffffffffffffffffffffffffffffffffffffff928383168093036102ce5783906103bf610907565b1691823b156102ce576064928591875198899687957f200175f700000000000000000000000000000000000000000000000000000000875216908501526024840152833560448401525af19081156102c5575061041a575080f35b610423906108a1565b80f35b83346102c257806003193601126102c25761043f610907565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b838234610212576020600319360112610212576104bf610907565b3560015580f35b8382346102125760206003193601126102125735801515809103610212576104ec610907565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006003541691161760035580f35b50346101d95760606003193601126101d957610536610805565b61053e61082d565b926044359161054b610907565b73ffffffffffffffffffffffffffffffffffffffff9081168061060557508416156105dd578480808085885af1610580610a13565b501561058d575050505080f35b517f2c024f9200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909316918301918252602082015281906040010390fd5b9050517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b90859293949516156107bc5782517fa9059cbb00000000000000000000000000000000000000000000000000000000602080830191825273ffffffffffffffffffffffffffffffffffffffff94909416602483015260448083019690965294815291936106736064846108e4565b83519284840184811067ffffffffffffffff8211176107905785528584527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656486850152516106d39392918891829182855af16106cd610a13565b91610a53565b8051838115918215610770575b50509050156106ef5750505080f35b6084935051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b83809293500103126102ce5782015180151581036102ce578083386106e0565b60248960418a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8483517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b84903461021257816003193601126102125760209060ff6003541615158152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361082857565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361082857565b60031960809101126108285760043573ffffffffffffffffffffffffffffffffffffffff81168103610828579060243563ffffffff8116810361082857906044359060643580151581036108285790565b67ffffffffffffffff81116108b557604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff8211176108b557604052565b73ffffffffffffffffffffffffffffffffffffffff60005416330361092857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90156109c8575060ff600354161561099e5760025490565b60046040517fd22af88c000000000000000000000000000000000000000000000000000000008152fd5b600154908181029181830414901517156109e457612710900490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b3d15610a4e573d9067ffffffffffffffff82116108b55760405191610a426020601f19601f84011601846108e4565b82523d6000602084013e565b606090565b91929015610ace5750815115610a67575090565b3b15610a705790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610ae15750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110610b4057505050601f19601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201610b1d56fea26469706673582212204afe361918ad3382a564e24caaf3d1fd83a28403b68bc61d971e5a6f11941f7e64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "LzTokenNotEnabled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_totalFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzTokenEnabled";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzTokenFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeBP";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_totalFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "payFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_lzTokenEnabled";
            readonly type: "bool";
        }];
        readonly name: "setLzTokenEnabled";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_lzTokenFee";
            readonly type: "uint256";
        }];
        readonly name: "setLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_nativeBP";
            readonly type: "uint256";
        }];
        readonly name: "setNativeFeeBP";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_messageLib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_messageLib";
            readonly type: "address";
        }, {
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawNativeFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): TreasuryInterface;
    static connect(address: string, runner?: ContractRunner | null): Treasury;
}

declare class Worker__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "NotAllowed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyMessageLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoleRenouncingDisabled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8[]";
            readonly name: "optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "SetSupportedOptionTypes";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSupportedOptionTypes";
        readonly outputs: readonly [{
            readonly internalType: "uint8[]";
            readonly name: "";
            readonly type: "uint8[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "hasAcl";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_optionTypes";
            readonly type: "uint8[]";
        }];
        readonly name: "setSupportedOptionTypes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): WorkerInterface;
    static connect(address: string, runner?: ContractRunner | null): Worker;
}

type index$l_ExecutorFeeLib__factory = ExecutorFeeLib__factory;
declare const index$l_ExecutorFeeLib__factory: typeof ExecutorFeeLib__factory;
type index$l_Executor__factory = Executor__factory;
declare const index$l_Executor__factory: typeof Executor__factory;
type index$l_MessageLibBase__factory = MessageLibBase__factory;
declare const index$l_MessageLibBase__factory: typeof MessageLibBase__factory;
type index$l_PriceFeed__factory = PriceFeed__factory;
declare const index$l_PriceFeed__factory: typeof PriceFeed__factory;
type index$l_ReceiveLibBaseE2__factory = ReceiveLibBaseE2__factory;
declare const index$l_ReceiveLibBaseE2__factory: typeof ReceiveLibBaseE2__factory;
type index$l_SendLibBaseE2__factory = SendLibBaseE2__factory;
declare const index$l_SendLibBaseE2__factory: typeof SendLibBaseE2__factory;
type index$l_SendLibBase__factory = SendLibBase__factory;
declare const index$l_SendLibBase__factory: typeof SendLibBase__factory;
type index$l_Treasury__factory = Treasury__factory;
declare const index$l_Treasury__factory: typeof Treasury__factory;
type index$l_Worker__factory = Worker__factory;
declare const index$l_Worker__factory: typeof Worker__factory;
declare namespace index$l {
  export {
    index$l_ExecutorFeeLib__factory as ExecutorFeeLib__factory,
    index$l_Executor__factory as Executor__factory,
    index$l_MessageLibBase__factory as MessageLibBase__factory,
    index$l_PriceFeed__factory as PriceFeed__factory,
    index$l_ReceiveLibBaseE2__factory as ReceiveLibBaseE2__factory,
    index$l_SendLibBaseE2__factory as SendLibBaseE2__factory,
    index$l_SendLibBase__factory as SendLibBase__factory,
    index$l_Treasury__factory as Treasury__factory,
    index$l_Worker__factory as Worker__factory,
    index$t as interfaces,
    index$o as uln,
    index$m as upgradeable,
  };
}

declare namespace index$k {
  export {
    index$l as contracts,
  };
}

type OmniCounterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OmniCounter__factory extends ContractFactory {
    constructor(...args: OmniCounterConstructorParams);
    getDeployTransaction(_endpoint: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_endpoint: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<OmniCounter & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): OmniCounter__factory;
    static readonly bytecode = "0x60a080604052346200018c576020816200355f803803809162000023828562000191565b8339810103126200018c57516001600160a01b0390818116908190036200018c57600060208154600460018060a01b0319953387841617855560405195869384923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08880a36080819052600680549889163317905563416ecebf60e01b82525afa9182156200017f5781926200012e575b50506001600160c01b03199091163363ffffffff60a01b19161760a09190911b63ffffffff60a01b16176006556040516133939081620001cc823960805181818161041f01528181610d0701528181610e35015281816114f0015281816116ce015281816118b801528181612ba00152612f320152f35b9091506020813d60201162000176575b816200014d6020938362000191565b810103126200017257519063ffffffff821682036200016f57503880620000b7565b80fd5b5080fd5b3d91506200013e565b50604051903d90823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620001b557604052565b634e487b7160e01b600052604160045260246000fdfe60806040526004361015610018575b361561001657005b005b60003560e01c806301ffc9a71461026857806306661abd146102635780630931cf881461025e57806313137d6514610259578063257f4e051461025457806326b27f841461024f5780633400288b1461024a578063416ecebf146102455780635011e5b314610240578063542e7b561461023b57806354fd4d50146102365780635535d4611461023157806356a472891461022c5780635a0dfe4d146102275780635b849af6146102225780635e280f111461021d578063622f17f614610218578063704b6c02146102135780637112f86f1461020e578063715018a61461020957806374c71e0d146102045780637d25a05e146101ff5780638da5cb5b146101fa578063950c8a74146101f5578063b7abbb5d146101f0578063b98bd070146101eb578063bb0b6a53146101e6578063bc70b354146101e1578063c95c55be146101dc578063d0a10260146101d7578063d22446ce146101d2578063d4243885146101cd578063dbcd3b91146101c8578063f1873a16146101c3578063f2fde38b146101be578063f3fef3a3146101b95763f851a4400361000e57611cf0565b611c4b565b611b4a565b6119ee565b6117d7565b611746565b611617565b611466565b6113d4565b61137b565b611340565b6111fe565b611187565b611103565b6110cf565b611092565b610fdb565b610f59565b610de9565b610d66565b610d2b565b610cda565b610c82565b610c3a565b610bff565b610b89565b610915565b61078d565b61067a565b6105f3565b610545565b61051b565b6104ef565b6103ab565b610337565b610319565b34610309576020600319360112610309576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361030957807f411386e800000000000000000000000000000000000000000000000000000000602092149081156102df575b506040519015158152f35b7f01ffc9a700000000000000000000000000000000000000000000000000000000915014386102d4565b600080fd5b600091031261030957565b34610309576000600319360112610309576020600454604051908152f35b34610309576000600319360112610309576020604051308152f35b9181601f840112156103095782359167ffffffffffffffff8311610309576020838186019501011161030957565b73ffffffffffffffffffffffffffffffffffffffff81160361030957565b35906103a982610380565b565b600319360160e08112610309576060136103095767ffffffffffffffff608435818111610309576103e0903690600401610352565b90916103ed60a435610380565b60c43590811161030957610405903690600401610352565b50503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016036104bf576104586004356104538161050d565b611d46565b916024358093036104895761048161001693610472611d24565b9061047b611d3a565b91612895565b606435612e9c565b6040517fc59a4f6400000000000000000000000000000000000000000000000000000000815260048101849052602490fd5b0390fd5b60246040517fab08c09e000000000000000000000000000000000000000000000000000000008152336004820152fd5b34610309576000600319360112610309576020600554604051908152f35b63ffffffff81160361030957565b3461030957602060031936011261030957602061053d6004356104538161050d565b604051908152f35b346103095760408060031936011261030957600435906105648261050d565b63ffffffff60243592610575612989565b1660009281845260026020528083852054146105ca57907fd81b9101f39c530fa8f18e6c9c5a64e4a3d7cb699e959f5d7abb5951c65e318f92918185526002602052808386205582519182526020820152a180f35b600483517f95567661000000000000000000000000000000000000000000000000000000008152fd5b3461030957600060031936011261030957602063ffffffff60065460a01c16604051908152f35b9181601f840112156103095782359167ffffffffffffffff8311610309576020808501948460051b01011161030957565b6020600319820112610309576004359067ffffffffffffffff8211610309576106769160040161061a565b9091565b6106833661064b565b90303b15610309576106c69160009160405193849283927f74c71e0d00000000000000000000000000000000000000000000000000000000845260048401611e08565b038134305af1801561076f57610774575b506040517f8e9e7099000000000000000000000000000000000000000000000000000000008152600081600481335afa801561076f576104bb9160009161074c575b506040519182917f8351eea700000000000000000000000000000000000000000000000000000000835260048301610b75565b61076991503d806000833e6107618183610a48565b810190611f9e565b38610719565b611f69565b80610781610787926109bf565b8061030e565b386106d7565b6060806003193601126103095767ffffffffffffffff600435818111610309576107bb90369060040161061a565b929091602435818111610309576107d690369060040161061a565b929091604435908111610309576107f190369060040161061a565b9290948387148061090c575b61080690611ffd565b61080e612048565b50600093345b88861061081d57005b6108fd8186866108f46108ee8d8f9773ffffffffffffffffffffffffffffffffffffffff8f8f61088d818f938f9060019f836108879261087c610877610898998561086a610882976120ad565b820361090557339c6120fd565b611d30565b9e6120fd565b612112565b9761216d565b9060ff87168a61263d565b6108be6108a489611d46565b956108b860065463ffffffff9060a01c1690565b90612a4f565b986108c7611f75565b63ffffffff8a1681529560208701526040998a870152850152600060808501521691612b2f565b91612c44565b015151906120c1565b950194610814565b309c6120fd565b508685146107fd565b3461030957600060031936011261030957602060405160018152f35b61ffff81160361030957565b90600182811c92168015610986575b602083101461095757565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f169161094c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116109d357604052565b610990565b60a0810190811067ffffffffffffffff8211176109d357604052565b6060810190811067ffffffffffffffff8211176109d357604052565b6040810190811067ffffffffffffffff8211176109d357604052565b6080810190811067ffffffffffffffff8211176109d357604052565b90601f601f19910116810190811067ffffffffffffffff8211176109d357604052565b90604051918260008254610a7e8161093d565b90818452602094600191600181169081600014610aec5750600114610aad575b5050506103a992500383610a48565b600090815285812095935091905b818310610ad45750506103a99350820101388080610a9e565b85548884018501529485019487945091830191610abb565b9150506103a99593507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101388080610a9e565b60005b838110610b405750506000910152565b8181015183820152602001610b30565b90601f19601f602093610b6e81518092818752878088019101610b2d565b0116010190565b906020610b86928181520190610b50565b90565b3461030957604060031936011261030957610bfb610be7610be2600435610baf8161050d565b63ffffffff60243591610bc183610931565b16600052600160205260406000209061ffff16600052602052604060002090565b610a6b565b604051918291602083526020830190610b50565b0390f35b346103095760206003193601126103095763ffffffff600435610c218161050d565b1660005260096020526020604060002054604051908152f35b34610309576040600319360112610309576020610c78600435610c5c8161050d565b6024359063ffffffff1660005260026020526040600020541490565b6040519015158152f35b346103095760206003193601126103095760043580151580910361030957610ca8612989565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060085416911617600855600080f35b3461030957600060031936011261030957602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346103095760206003193601126103095763ffffffff600435610d4d8161050d565b16600052600a6020526020604060002054604051908152f35b3461030957602060031936011261030957600435610d8381610380565b7fffffffffffffffffffffffff00000000000000000000000000000000000000006006549173ffffffffffffffffffffffffffffffffffffffff90610dcb8285163314612184565b16911617600655600080f35b67ffffffffffffffff81160361030957565b3461030957606060031936011261030957600435610e068161050d565b60243590604435610e1681610dd7565b610e1e612989565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b156103095767ffffffffffffffff60646000928360405195869485937feaeacd6300000000000000000000000000000000000000000000000000000000855263ffffffff8a1660048601528a60248601521660448401525af1801561076f57610f46575b5060085460ff16610ec957005b61001691610eea610ef99263ffffffff166000526007602052604060002090565b90600052602052604060002090565b610f13610f0e825467ffffffffffffffff1690565b6121cf565b67ffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000825416179055565b80610781610f53926109bf565b38610ebc565b3461030957600080600319360112610fd857610f73612989565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b610fe43661064b565b3033036110635760005b818110610ff757005b8061100560019284866121e8565b61103661103261101483611d30565b60208401359063ffffffff1660005260026020526040600020541490565b1590565b61105d578061104b60c061105793018261211c565b9160a081013590613035565b01610fee565b50611057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b346103095760406003193601126103095760206110bd6004356110b48161050d565b60243590612241565b67ffffffffffffffff60405191168152f35b3461030957600060031936011261030957602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b3461030957600060031936011261030957602073ffffffffffffffffffffffffffffffffffffffff60035416604051908152f35b60ff81160361030957565b60606003198201126103095760043561115a8161050d565b9160243561116781611137565b916044359067ffffffffffffffff82116103095761067691600401610352565b6100166111a76111f861119936611142565b9060ff83949693168661263d565b6111b084611d46565b6111c763ffffffff938460065460a01c1690612a4f565b90604051936111d5856109d8565b861684526020840152604083015260608201526000608082015233903490612b2f565b50612c44565b346103095761120c3661064b565b611214612989565b60005b81811061125557507fadc065f6ee2d84e4fc04873c88fe72b002dd1bf2faa49da18167494e909ca7e89161125060405192839283612480565b0390a1005b611260818385612285565b600361129661128f61128961128361127d6040968781019061211c565b906122c5565b9061230e565b60f01c90565b61ffff1690565b0361131757906113116112b96001936112b0848789612285565b9081019061211c565b9061130c6112e46112ce610877878a8c612285565b63ffffffff166000526001602052604060002090565b6112fa60206112f4888b8d612285565b01612352565b61ffff16600052602052604060002090565b6123b2565b01611217565b600490517f0280f177000000000000000000000000000000000000000000000000000000008152fd5b346103095760206003193601126103095763ffffffff6004356113628161050d565b1660005260026020526020604060002054604051908152f35b34610309576060600319360112610309576004356113988161050d565b6024356113a481610931565b6044359067ffffffffffffffff821161030957610bfb926113cc610be7933690600401610352565b92909161263d565b6100166114176113e336611142565b60069491929394549261140d73ffffffffffffffffffffffffffffffffffffffff85163314612184565b60ff85168661263d565b9161143661142485611d46565b9163ffffffff809460a01c1690612a4f565b9160405194611444866109d8565b1684526020840152604083015260608201526000608082015233903490612b2f565b60a06003193601126103095760043561147e81610380565b67ffffffffffffffff90604435828111610309576114a0903690600401610352565b9290916114ae606435610380565b608435918211610309576114c9611517923690600401610352565b50506114ee73ffffffffffffffffffffffffffffffffffffffff91823091161461277d565b7f00000000000000000000000000000000000000000000000000000000000000001633146127c8565b60ff6115238383612c61565b16600281036115425750505061001661153d600554612813565b600555565b6004036115d257610016916115649161155f61153d600554612813565b612c70565b61156d81612c44565b61157d611578612c82565b612d27565b61158682611d46565b60065461159b9060a01c63ffffffff166129ee565b906115b36115a7611f75565b63ffffffff9095168552565b6020840152604083015260608201526000608082015230903490612b2f565b60405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206d65737361676520747970650000000000000000000000006044820152606490fd5b346103095761162b6116af61119936611142565b9261163581611d46565b9361164d63ffffffff938460065460a01c1690612a4f565b604095869485519461165e866109d8565b1684526020840152838301526060820152600060808201528151809381927fddc28c580000000000000000000000000000000000000000000000000000000083528460048401526044830190612ade565b306024830152038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561076f57600091611719575b508051602091820151925190815290810191909152604090f35b6117399150823d841161173f575b6117318183610a48565b810190612e04565b386116ff565b503d611727565b34610309576020600319360112610309577f9bfd6b2fbc3428e14e9b2649314854ca348f45338b458b9a4e576760e7f405d5602073ffffffffffffffffffffffffffffffffffffffff60043561179b81610380565b6117a3612989565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006003541617600355604051908152a1005b346103095760206003193601126103095760043567ffffffffffffffff811161030957611808903690600401610352565b90611811612989565b7fffffffff0000000000000000000000000000000000000000000000000000000061183c8383612821565b167f20efd7220000000000000000000000000000000000000000000000000000000081149081156119c4575b811561199a575b8115611970575b8115611946575b811561191c575b50156118f257600091829161189e604051809381936125f3565b03908273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af16118e2612865565b90156118ea57005b602081519101fd5b60046040517f0fbdec0a000000000000000000000000000000000000000000000000000000008152fd5b7feaeacd630000000000000000000000000000000000000000000000000000000091501438611884565b7f965183d4000000000000000000000000000000000000000000000000000000008114915061187d565b7f66bf43d60000000000000000000000000000000000000000000000000000000081149150611876565b7fe16f964d000000000000000000000000000000000000000000000000000000008114915061186f565b7fb8849ac90000000000000000000000000000000000000000000000000000000081149150611868565b3461030957600060031936011261030957610bfb7fffff000000000000000000000000000000000000000000000000000000000000611b3e6025611a38611a33612c82565b612d6b565b604051602081019060208252600160408201527f3100000000000000000000000000000000000000000000000000000000000000606082015260608152611a7e81610a2c565b611a96600361ffff611a8f866130f9565b1614612cb7565b611b2f611aab611aa68351613212565b6125ca565b916040519785611ac58a975180926020808b019101610b2d565b8601937f0200000000000000000000000000000000000000000000000000000000000000602086015260f01b1660218401527f0300000000000000000000000000000000000000000000000000000000000000806023850152602484015251809386840190610b2d565b01036005810184520182610a48565b60405191829182610b75565b3461030957602060031936011261030957600435611b6781610380565b611b6f612989565b73ffffffffffffffffffffffffffffffffffffffff8091168015611be1576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b3461030957604060031936011261030957600435611c6881610380565b73ffffffffffffffffffffffffffffffffffffffff611c8c81600654163314612184565b600080808094819460243591165af1611ca3612865565b5015611cac5780f35b606460405162461bcd60e51b815260206004820152601c60248201527f4f6d6e69436f756e7465723a207769746864726177206661696c6564000000006044820152fd5b3461030957600060031936011261030957602073ffffffffffffffffffffffffffffffffffffffff60065416604051908152f35b600435610b868161050d565b35610b868161050d565b604435610b8681610dd7565b63ffffffff1690816000526002602052604060002054918215611d665750565b602490604051907f196fb6c00000000000000000000000000000000000000000000000000000000082526004820152fd5b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561030957016020813591019167ffffffffffffffff821161030957813603831361030957565b601f8260209493601f19938186528686013760008582860101520116010190565b6020928084830185845252604093604083019260408360051b8201019585600080935b868510611e3e5750505050505050505090565b9091929394959697987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082820301895289357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2185360301811215611f655787611f54600193878394019060e0809163ffffffff8435611ebc8161050d565b168152858401358682015267ffffffffffffffff8c850135611edd81610dd7565b168c820152611f0260608086013590611ef58261050d565b83019063ffffffff169052565b611f2e6080611f1281870161039e565b73ffffffffffffffffffffffffffffffffffffffff1690830152565b60a08085013590820152611f4760c09485810190611d97565b9390948201520191611de7565b9b0199019796950193929190611e2b565b8380fd5b6040513d6000823e3d90fd5b604051906103a9826109d8565b67ffffffffffffffff81116109d357601f01601f191660200190565b6020818303126103095780519067ffffffffffffffff8211610309570181601f82011215610309578051611fd181611f82565b92611fdf6040519485610a48565b8184526020828401011161030957610b869160208085019101610b2d565b1561200457565b606460405162461bcd60e51b815260206004820152601c60248201527f4f6d6e69436f756e7465723a206c656e677468206d69736d61746368000000006044820152fd5b60405190612055826109f4565b816000815260006020820152604080519161206f83610a10565b60008352600060208401520152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9060001982019182116120bc57565b61207e565b919082039182116120bc57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b919081101561210d5760051b0190565b6120ce565b35610b8681611137565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610309570180359067ffffffffffffffff82116103095760200191813603831361030957565b9082101561210d576106769160051b81019061211c565b1561218b57565b606460405162461bcd60e51b815260206004820152600a60248201527f6f6e6c792061646d696e000000000000000000000000000000000000000000006044820152fd5b67ffffffffffffffff8091169081146120bc5760010190565b919081101561210d5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2181360301821215610309570190565b90600167ffffffffffffffff809316019182116120bc57565b60085460ff161561227e5763ffffffff166000526007602052604060002090600052602052610b8667ffffffffffffffff60406000205416612228565b5050600090565b919081101561210d5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa181360301821215610309570190565b906002116103095790600290565b909291928360021161030957831161030957600201917ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0190565b7fffff000000000000000000000000000000000000000000000000000000000000903581811693926002811061234357505050565b60020360031b82901b16169150565b35610b8681610931565b90601f811161236a57505050565b6000916000526020600020906020601f850160051c830194106123a8575b601f0160051c01915b82811061239d57505050565b818155600101612391565b9092508290612388565b90929167ffffffffffffffff81116109d3576123d8816123d2845461093d565b8461235c565b6000601f821160011461241857819061240993949560009261240d575b50506000198260011b9260031b1c19161790565b9055565b0135905038806123f5565b601f1982169461242d84600052602060002090565b91805b87811061246857508360019596971061244e575b505050811b019055565b60001960f88560031b161c19910135169055388080612444565b90926020600181928686013581550194019101612430565b6020928084830185845252604093604083019260408360051b8201019585600080935b8685106124b65750505050505050505090565b9091929394959697987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082820301895289357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa185360301811215611f6557876125656001938783940161255660609163ffffffff81356125358161050d565b16845261ffff8682013561254881610931565b16868501528b810190611d97565b919092818c8201520191611de7565b9b01990197969501939291906124a3565b92919261258282611f82565b916125906040519384610a48565b829481845281830111610309578281602093846000960137010152565b80511561210d5760200190565b80516001101561210d5760210190565b90600261ffff809316019182116120bc57565b91909161ffff808094169116019182116120bc57565b908092918237016000815290565b602090836103a99395949560405196836126248995518092888089019101610b2d565b8401918583013701600083820152038085520183610a48565b909290918161267c575050610b8691612669610be29263ffffffff166000526001602052604060002090565b9061ffff16600052602052604060002090565b9161269f9193612669610be29263ffffffff166000526001602052604060002090565b805190919015612770576126b961128961128385846122c5565b61ffff61272b61128f6127136127096127036126fd6126d78a6125ad565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b60ff1690565b60081b61ff001690565b6127256127036126fd6126d78a6125ba565b906125dd565b9116036127465782610b8693612740926122d3565b91612601565b60046040517f0280f177000000000000000000000000000000000000000000000000000000008152fd5b9050610b86913691612576565b1561278457565b606460405162461bcd60e51b815260206004820152600560248201527f216f6170700000000000000000000000000000000000000000000000000000006044820152fd5b156127cf57565b606460405162461bcd60e51b815260206004820152600960248201527f21656e64706f696e7400000000000000000000000000000000000000000000006044820152fd5b90600182018092116120bc57565b7fffffffff00000000000000000000000000000000000000000000000000000000903581811693926004811061285657505050565b60040360031b82901b16169150565b3d15612890573d9061287682611f82565b916128846040519384610a48565b82523d6000602084013e565b606090565b91909163ffffffff8116600052600760205260406000208360005260205267ffffffffffffffff80604060002054169060ff60085416612931575b8316116128dc57505050565b6103a992610eea6128fd9263ffffffff166000526007602052604060002090565b9067ffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000825416179055565b8061293b83612228565b1681851603156128d057606460405162461bcd60e51b815260206004820152601360248201527f4f4170703a20696e76616c6964206e6f6e6365000000000000000000000000006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff6000541633036129aa57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b7fffffffff00000000000000000000000000000000000000000000000000000000604051917f0100000000000000000000000000000000000000000000000000000000000000602084015260e01b16602182015260058152610b8681610a10565b907fffffffff00000000000000000000000000000000000000000000000000000000907fff000000000000000000000000000000000000000000000000000000000000006040519360f81b16602084015260e01b16602182015260058152610b8681610a10565b919082604091031261030957604051612ace81610a10565b6020808294805184520151910152565b9063ffffffff825116815260208201516020820152608080612b24612b12604086015160a0604087015260a0860190610b50565b60608601518582036060870152610b50565b930151151591015290565b90608091612b3b612048565b50612b9573ffffffffffffffffffffffffffffffffffffffff928392604051968795869485937f2637a450000000000000000000000000000000000000000000000000000000008552604060048601526044850190612ade565b9116602483015203927f0000000000000000000000000000000000000000000000000000000000000000165af190811561076f57600091612bd4575090565b905060803d608011612c2e575b612beb8183610a48565b810160808282031261030957612c26906040805193612c09856109f4565b805185526020810151612c1b81610dd7565b602086015201612ab6565b604082015290565b503d612be1565b60001981146120bc5760010190565b63ffffffff16600052600a60205260406000206124098154612c35565b90600111610309573560f81c90565b90600511610309576001013560e01c90565b6040517e03000000000000000000000000000000000000000000000000000000000000602082015260028152610b8681610a10565b15612cbe57565b608460405162461bcd60e51b8152602060048201526024808201527f4f7074696f6e734275696c6465723a20696e76616c6964206f7074696f6e732060448201527f74797065000000000000000000000000000000000000000000000000000000006064820152fd5b610b8690612d3c600361ffff611a8f846130f9565b6040519072030d4000000000000000000000000000000000602083015260108252612d6682610a10565b61314d565b610b8690612d80600361ffff611a8f846130f9565b60405190706400000000000000000000000000000000806020840152603083015260208252612d6682610a10565b610b8690612dc3600361ffff611a8f846130f9565b6040519072030d40000000000000000000000000000000006020830152700a00000000000000000000000000000000603083015260208252612d6682610a10565b9060408282031261030957610b8691612ab6565b610b86949273ffffffffffffffffffffffffffffffffffffffff6080931682526020820152600060408201528160608201520191611de7565b15612e5857565b606460405162461bcd60e51b815260206004820152601f60248201527f4f6d6e69436f756e7465723a20696e73756666696369656e742076616c7565006044820152fd5b91909160ff612eab8385612c61565b1660018103612eee575050612ed690612ede92612ed1612ecc600454612c35565b600455565b613310565b341015612e51565b6103a9612ee9611d24565b61328b565b60028193929314801561302b575b15612fb65750612f10612ecc600454612c35565b612f1b612ee9611d24565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803b1561030957612f989360008094604051968795869485937f7cb590120000000000000000000000000000000000000000000000000000000085523060048601612e18565b03925af1801561076f57612fa95750565b806107816103a9926109bf565b6003141592506115d291505057612fd1612ecc600454612c35565b612fdc612ee9611d24565b612fec612fe7611d24565b612c44565b613028612fff612ffa612c82565b612dae565b613007611d24565b90613013610453611d24565b60065461159b9060a01c63ffffffff166132a8565b50565b5060048114612efc565b91929060ff6130448386612c61565b166001810361306c57505090610877612ed6612ee9936103a995612ed1612ecc600454612c35565b6002819492941480156130ef575b156130955750612ee9612f1b91610877612ecc600454612c35565b9150925060039150146000146115d257613028906130b7612ecc600454612c35565b6130c3612ee982611d30565b6130cf612fe782611d30565b6130da612ffa612c82565b6130136104536130e984611d30565b93611d30565b506004811461307a565b6002815110613109576002015190565b606460405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e64730000000000000000000000006044820152fd5b61ffff91613160600384611a8f856130f9565b60018361316d8351613212565b16019283116120bc57610b86916024916040519482613196879451809260208088019101610b2d565b8301907fffff0000000000000000000000000000000000000000000000000000000000007f01000000000000000000000000000000000000000000000000000000000000009182602085015260f01b16602183015260238201526132038251809360208785019101610b2d565b01036004810184520182610a48565b61ffff90818111613221571690565b608460405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f36206269747300000000000000000000000000000000000000000000000000006064820152fd5b63ffffffff16600052600960205260406000206124098154612c35565b7fffffffff00000000000000000000000000000000000000000000000000000000604051917f0100000000000000000000000000000000000000000000000000000000000000602084015260e01b166021820152600a602582015260258152610b86816109f4565b8160051161030957600501359060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb82011061334b575090565b6005600019916020030160031b1b169056fea2646970667358221220f6f0b1a4d7d6dc54df70399151fb6f15356f6d806a3ef85e363759238cfd5d0364736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "SimulationResult";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPreCrime";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "_simulateLzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "admin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_types";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_options";
            readonly type: "bytes[]";
        }];
        readonly name: "batchIncrement";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "brokenIncrement";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }];
        readonly name: "callEndpoint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "composedCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "count";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "msgType";
            readonly type: "uint16";
        }];
        readonly name: "enforcedOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTestArgs";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "inboundCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "count";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "increment";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "isPeer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oapp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "outboundCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "count";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }];
        readonly name: "setAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_orderedNonce";
            readonly type: "bool";
        }];
        readonly name: "setOrderedNonce";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skipInboundNonce";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OmniCounterInterface;
    static connect(address: string, runner?: ContractRunner | null): OmniCounter;
}

type OmniCounterPreCrimeConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OmniCounterPreCrime__factory extends ContractFactory {
    constructor(...args: OmniCounterPreCrimeConstructorParams);
    getDeployTransaction(_endpoint: AddressLike, _counter: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_endpoint: AddressLike, _counter: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<OmniCounterPreCrime & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): OmniCounterPreCrime__factory;
    static readonly bytecode = "0x60e080604052346200016c57604081620023cf803803809162000023828562000171565b8339810103126200016c576200004760206200003f83620001ab565b9201620001ab565b60008054336001600160a01b0319821681178355604051949293602093869360049385936001600160a01b0393909290919084167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08a80a360805260a081905263012639f160e31b8352165afa9182156200015f57819262000116575b8260c05260405161220e9081620001c18239608051818181611c370152611e9b015260a0518181816102930152818161072901528181610a0c01526115b0015260c0518181816101240152611c050152f35b9091506020813d60201162000156575b81620001356020938362000171565b8101031262000152576200014a9150620001ab565b3880620000c4565b5080fd5b3d915062000126565b50604051903d90823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200019557604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200016c5756fe6080604052600436101561001257600080fd5b60003560e01c80630931cf88146100f75780632913daa0146100f25780633ed242b4146100ed57806354fd4d50146100e8578063715018a6146100e357806374e6729e146100de5780638da5cb5b146100d95780638e9e7099146100d4578063afea44ef146100cf578063b9a1f5e7146100ca578063bf7b5d7a146100c5578063e01b6974146100c0578063f2fde38b146100bb5763f8bcddf6146100b657600080fd5b610c69565b610b9d565b610a30565b6109df565b61096d565b6108f7565b610711565b6106dd565b610577565b6104f5565b6104d3565b610234565b61014d565b3461014857600060031936011261014857602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b600080fd5b3461014857600060031936011261014857602067ffffffffffffffff60005460a01c16604051908152f35b9181601f840112156101485782359167ffffffffffffffff8311610148576020808501948460051b01011161014857565b6020600319820112610148576004359067ffffffffffffffff8211610148576101d491600401610178565b9091565b60005b8381106101eb5750506000910152565b81810151838201526020016101db565b90601f19601f602093610219815180928187528780880191016101d8565b0116010190565b9060206102319281815201906101fb565b90565b61023d366101a9565b61dead33036104a95761024f91611320565b80516000805467ffffffffffffffff929060a01c83168082116104605750508251610291575b61028d61028184611527565b60405191829182610220565b0390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16929181908180805b865181101561044b576102e38188610efe565b51888151916102f6835163ffffffff1690565b9261034c60208080930151604095865180809581947f5a0dfe4d00000000000000000000000000000000000000000000000000000000835260049b8c84016020909392919363ffffffff60408201951681520152565b03915afa908115610446578b91610419575b501561040d578151805163ffffffff908116929088168314801590610400575b6103de575b505090518201516103a0915067ffffffffffffffff165b9761149b565b96868089169116036103b85750506001905b016102d0565b517f50823c85000000000000000000000000000000000000000000000000000000008152fd5b015191985090955093506103a061039a826103f98888611bb8565b9992610383565b508881830151141561037e565b505050506001906103b2565b6104399150823d841161043f575b6104318183610db1565b810190611483565b3861035e565b503d610427565b61101d565b50505050505061028d91506102819091610275565b6040517f9db0860500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff9190911660048201526024810191909152604490fd5b0390fd5b60046040517f9cbfe066000000000000000000000000000000000000000000000000000000008152fd5b3461014857600060031936011261014857604080516002815260006020820152f35b34610148576000806003193601126105745761050f6116c3565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b346101485760406003193601126101485767ffffffffffffffff600435818111610148576105a9903690600401610178565b91602435908111610148576105c2903690600401610178565b91909261dead33036104a9576105d791611320565b916105e182610de3565b906105ef6040519283610db1565b8282526105fb83610de3565b926020601f1980950136602086013761061382610de3565b946106216040519687610db1565b82865261062d83610de3565b0160005b8181106106ce5750505060005b81811061065c575050506106558161065a946117af565b611906565b005b806106b26106ab6106706001948688610e2a565b816106a661069161068b610685858097610e8f565b90610eba565b60e01c90565b61069b888d610efe565b9063ffffffff169052565b610e9d565b3691610f2e565b6106bc8288610efe565b526106c78187610efe565b500161063e565b60608782018401528201610631565b3461014857600060031936011261014857602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b346101485760008060031936011261057457600180547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661076782610f84565b93805b8381106107975760405161028d90610281816107898a60208301611029565b03601f198101835282610db1565b6107ae6107a382610fd3565b505463ffffffff1690565b604080517f56a4728900000000000000000000000000000000000000000000000000000000815263ffffffff83166004808301919091529093929160209182866024818b5afa90811561044657848491610848988a946108c6575b50845198899283927f622f17f6000000000000000000000000000000000000000000000000000000008452830191909163ffffffff6020820193169052565b03818b5afa928315610446578a968894610897575b50610875610869610dd4565b63ffffffff9096168652565b8401528201526108858289610efe565b526108908188610efe565b500161076a565b816108b89295503d86116108bf575b6108b08183610db1565b81019061100e565b923861085d565b503d6108a6565b6108de919450833d85116108bf576108b08183610db1565b9238610809565b67ffffffffffffffff81160361014857565b3461014857602060031936011261014857600435610914816108e5565b61091c6116c3565b7fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff7bffffffffffffffff00000000000000000000000000000000000000006000549260a01b16911617600055600080f35b3461014857600060031936011261014857610986611083565b6040906040519060208083018184528251809152816040850193019160005b8281106109b25785850386f35b8351805163ffffffff168652808301518684015287015187860152606090940193928101926001016109a5565b3461014857600060031936011261014857602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461014857610a3e366101a9565b9061dead33036104a957600054604080517e0200000000000000000000000000000000000000000000000000000000000060208083019190915292831b7fffffffffffffffff000000000000000000000000000000000000000000000000166022820152600a815293601f19929190610ab8602a87610db1565b859481610b85575050610ac9611083565b945b855180610ae1575b6040518061028d8882610220565b610b0e949392955061ffff16938491610b0260405193849260208401611121565b03848101835282610db1565b936000955b84871015610ad3579091929394600190610b78610b3e610b338a86610efe565b515163ffffffff1690565b91610b6c87610b4d8c88610efe565b51015187610b5b8d89610efe565b5101519088519586948b8601611164565b03878101835282610db1565b9601959493929190610b13565b610b9791610b9291611320565b611a8c565b94610acb565b346101485760206003193601126101485760043573ffffffffffffffffffffffffffffffffffffffff811680820361014857610bd76116c3565b15610be55761065a90611742565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346101485760206003193601126101485767ffffffffffffffff6004358181116101485736602382011215610148578060040135918211610148576024810190602436916060850201011161014857610cc06116c3565b600190600154926000938460015580610cfd575b50835b818110610ce2578480f35b80610cf7610cf2869385876111e2565b611200565b01610cd7565b60039080600302906003820403610d5c57600186527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6908101905b818110610d46575050610cd4565b8087849255878782015587600282015501610d38565b6111b3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff821117610dac57604052565b610d61565b90601f601f19910116810190811067ffffffffffffffff821117610dac57604052565b60405190610de182610d90565b565b67ffffffffffffffff8111610dac5760051b60200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015610e8a5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561014857019081359167ffffffffffffffff8311610148576020018236038113610148579190565b610dfb565b906004116101485790600490565b909291928360041161014857831161014857600401916003190190565b7fffffffff000000000000000000000000000000000000000000000000000000009035818116939260048110610eef57505050565b60040360031b82901b16169150565b8051821015610e8a5760209160051b010190565b67ffffffffffffffff8111610dac57601f01601f191660200190565b929192610f3a82610f12565b91610f486040519384610db1565b829481845281830111610148578281602093846000960137010152565b60405190610f7282610d90565b60006040838281528260208201520152565b90610f8e82610de3565b610f9b6040519182610db1565b828152601f19610fab8294610de3565b019060005b828110610fbc57505050565b602090610fc7610f65565b82828501015201610fb0565b600154811015610e8a576003906001600052027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b90816020910312610148575190565b6040513d6000823e3d90fd5b60208082019080835283518092528060408094019401926000905b83821061105357505050505090565b8451805163ffffffff16875280840151878501528101518682015260609095019493820193600190910190611044565b6001906001549161109383610de3565b9260406110a36040519586610db1565b8185528460208091019160016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6906000935b8585106110e85750505050505050565b600384889284516110f881610d90565b63ffffffff875416815284870154838201526002870154868201528152019301940193916110d8565b60207fffff0000000000000000000000000000000000000000000000000000000000009161115860029594828151948592016101d8565b019160f01b1681520190565b60207fffffffff000000000000000000000000000000000000000000000000000000009161119d604497959694828151948592016101d8565b019360e01b168352600483015260248201520190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9190811015610e8a576060020190565b63ffffffff81160361014857565b60015468010000000000000000811015610dac576001810180600155811015610e8a57604060037fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf89260016000520292837fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60163ffffffff8235611283816111f2565b167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082541617905560208101357fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf78501550135910155565b6040519060a0820182811067ffffffffffffffff821117610dac576040526060608083611306610f65565b815260006020820152600060408201526000838201520152565b91909161132c83610de3565b90604061133c6040519384610db1565b848352601f1961134b86610de3565b0160005b81811061146c575050829460005b81811061136b575050505050565b611376818386610e2a565b6113819291926112db565b9080600d11610148576106ab81856113f26113a161144b95600199611ffe565b6113ab848461200d565b6113da6113b6610dd4565b600986013560e01c815291602093848401528d83019067ffffffffffffffff169052565b87526113e6848461201f565b63ffffffff1690870152565b61143761141b61140284846121c9565b73ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16868b0152565b6114418282612031565b6060860152612040565b608082015261145a8288610efe565b526114658187610efe565b500161135d565b6020906114776112db565b8282880101520161134f565b90816020910312610148575180151581036101485790565b67ffffffffffffffff809116908114610d5c5760010190565b3d156114df573d906114c582610f12565b916114d36040519384610db1565b82523d6000602084013e565b606090565b7fffffffff000000000000000000000000000000000000000000000000000000006004939260e01b16815261152282518093602086850191016101d8565b010190565b90604091604051602091828201947f5011e5b300000000000000000000000000000000000000000000000000000000865260448301846024850152825180915260648401918560648360051b8701019401926000915b838310611605575050505050600080610231949596846115df9403946115ab601f1996878101835282610db1565b5190347f00000000000000000000000000000000000000000000000000000000000000005af16115d96114b4565b90611d49565b926115f96115eb611e58565b9460405195869384016114e4565b03908101835282610db1565b909192939487806116b4837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c8b60019603018752895160e09080519067ffffffffffffffff8963ffffffff9384815116875288810151898801520151168985015285810151916060921682850152888101519161169c6080938487019073ffffffffffffffffffffffffffffffffffffffff169052565b81015160a08501520151918160c082015201906101fb565b9701930193019193929061157d565b73ffffffffffffffffffffffffffffffffffffffff6000541633036116e457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b8051611810575b506117d06117cc6117c5611e58565b8093611f04565b1590565b6117d75750565b6040517f01992f2a00000000000000000000000000000000000000000000000000000000815263ffffffff919091166004820152602490fd5b61181990611a8c565b60005b815181101561184c57611832610b338284610efe565b61183f6117cc8286611f04565b6117d7575060010161181c565b5050386117b6565b60209081818403126101485780519067ffffffffffffffff8211610148570182601f820112156101485780519161188a83610de3565b93604061189a6040519687610db1565b8486528286019183606080970286010194818611610148578401925b8584106118c7575050505050505090565b86848303126101485784879184516118de81610d90565b86516118e9816111f2565b8152828701518382015285870151868201528152019301926118b6565b61190e611e58565b60609263ffffffff821660005b8451811015611a2c578161194861193f6119358489610efe565b5163ffffffff1690565b63ffffffff1690565b146119555760010161191b565b8261197993949596506119689250610efe565b518051602080918301019101611854565b925b60005b8151811015611a25576119946119358284610efe565b6119b6856119af6119a86119688689610efe565b9389611f43565b5092611f43565b919050116119c65760010161197e565b6040517f1915975700000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f696e626f756e64436f756e74203e206f7574626f756e64436f756e74000000006044820152606490fd5b5050505050565b5050909161197b565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610d5c5760010190565b9060018201809211610d5c57565b90601f8201809211610d5c57565b6004019081600411610d5c57565b906060611a97611083565b611aa18451610f84565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9260005b8651811015611b5757611ae8611adc8289610efe565b51515163ffffffff1690565b611af28186611fa1565b9060008212159081611b42575b50611b0e575b50600101611ac6565b9490611b25611b1e600193611a35565b9686610efe565b51611b308786610efe565b52611b3b8685610efe565b5090611b05565b60009150611b509086611fa1565b1238611aff565b5094509190506000811215611b6a575050565b611b75919350611a62565b611b7e81610f84565b9260005b828110611b8e57505050565b80611b9b60019284610efe565b51611ba68288610efe565b52611bb18187610efe565b5001611b82565b63ffffffff606460209273ffffffffffffffffffffffffffffffffffffffff60405195869485937fa0dd43fc000000000000000000000000000000000000000000000000000000008552837f000000000000000000000000000000000000000000000000000000000000000016600486015216602484015260448301527f0000000000000000000000000000000000000000000000000000000000000000165afa90811561044657600091611c6b575090565b90506020813d602011611c98575b81611c8660209383610db1565b810103126101485751610231816108e5565b3d9150611c79565b90602082519201517fffffffff00000000000000000000000000000000000000000000000000000000908181169360048110610eef57505050565b906003198201918211610d5c57565b6020818303126101485780519067ffffffffffffffff8211610148570181601f82011215610148578051611d1d81610f12565b92611d2b6040519485610db1565b818452602082840101116101485761023191602080850191016101d8565b611dfa577f8351eea7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000611d9883611ca0565b1603611dc457611db581611daf6102319351611cdb565b9061213e565b60208082518301019101611cea565b6104a5906040519182917f614cbd8a00000000000000000000000000000000000000000000000000000000835260048301610220565b60646040517f614cbd8a00000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f2072657665727400000000000000000000000000000000000000000000006044820152fd5b6040517f416ecebf00000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561044657600091611ecf575090565b90506020813d602011611efc575b81611eea60209383610db1565b810103126101485751610231816111f2565b3d9150611edd565b9060005b8251811015611f3b5763ffffffff80611f218386610efe565b511690831614611f3357600101611f08565b505050600190565b505050600090565b9160005b8351811015611f975763ffffffff80611f608387610efe565b51511690841614611f7357600101611f47565b6040919250806020611f88611f919387610efe565b51015194610efe565b51015190565b5060009250829150565b9060005b8251811015611fd75763ffffffff80611fbe8386610efe565b51511690831614611fd157600101611fa5565b91505090565b5050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90565b90602d1161014857600d013590565b90600911610148576001013560c01c90565b9060311161014857602d013560e01c90565b90607111610148576051013590565b9190918260711161014857607101917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8f0190565b1561207b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152fd5b156120e057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152fd5b6121528261214b81611a70565b1015612074565b612167815161216084611a7e565b11156120d9565b8161217f575050604051600081526020810160405290565b60405191601f8116916004831560051b80858701019484860193010101905b8084106121b65750508252601f01601f191660405290565b909283518152602080910193019061219e565b9060511161014857603101359056fea26469706673582212207a22253e87762fc2dcc9f9470d927cbcba8d9e45a589baf18e0d22f382b7458d64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_counter";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "crime";
            readonly type: "bytes";
        }];
        readonly name: "CrimeFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "InvalidSimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyOffChain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "PacketOversize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PacketUnsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "SimulationFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "SimulationResultNotFound";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "buildSimulationResult";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPreCrimePeers";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "precrime";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "oapp";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PreCrimePeer[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "maxBatchSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oapp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulations";
            readonly type: "bytes[]";
        }];
        readonly name: "precrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_maxBatchSize";
            readonly type: "uint64";
        }];
        readonly name: "setMaxBatchSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "precrime";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "oapp";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PreCrimePeer[]";
            readonly name: "_precrimePeers";
            readonly type: "tuple[]";
        }];
        readonly name: "setPreCrimePeers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulator";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): OmniCounterPreCrimeInterface;
    static connect(address: string, runner?: ContractRunner | null): OmniCounterPreCrime;
}

type index$j_OmniCounterPreCrime__factory = OmniCounterPreCrime__factory;
declare const index$j_OmniCounterPreCrime__factory: typeof OmniCounterPreCrime__factory;
type index$j_OmniCounter__factory = OmniCounter__factory;
declare const index$j_OmniCounter__factory: typeof OmniCounter__factory;
declare namespace index$j {
  export {
    index$j_OmniCounterPreCrime__factory as OmniCounterPreCrime__factory,
    index$j_OmniCounter__factory as OmniCounter__factory,
  };
}

declare class IInspector__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "inspect";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "valid";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IInspectorInterface;
    static connect(address: string, runner?: ContractRunner | null): IInspector;
}

declare class IOApp__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPreCrime";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }];
        readonly name: "callEndpoint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IOAppInterface;
    static connect(address: string, runner?: ContractRunner | null): IOApp;
}

type index$i_IInspector__factory = IInspector__factory;
declare const index$i_IInspector__factory: typeof IInspector__factory;
type index$i_IOApp__factory = IOApp__factory;
declare const index$i_IOApp__factory: typeof IOApp__factory;
declare namespace index$i {
  export {
    index$i_IInspector__factory as IInspector__factory,
    index$i_IOApp__factory as IOApp__factory,
  };
}

type OptionsBuilderConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OptionsBuilder__factory extends ContractFactory {
    constructor(...args: OptionsBuilderConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<OptionsBuilder & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): OptionsBuilder__factory;
    static readonly bytecode = "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220375babe98941e49b13aaaf8e5562af80b7c03343de83c5792721bff852377a3464736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "InvalidSize";
        readonly type: "error";
    }];
    static createInterface(): OptionsBuilderInterface;
    static connect(address: string, runner?: ContractRunner | null): OptionsBuilder;
}

type index$h_OptionsBuilder__factory = OptionsBuilder__factory;
declare const index$h_OptionsBuilder__factory: typeof OptionsBuilder__factory;
declare namespace index$h {
  export {
    index$h_OptionsBuilder__factory as OptionsBuilder__factory,
  };
}

declare class IOFT__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amountLDSend";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "AmountSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LDMinusSD";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "SendOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "SetInspector";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "quoteSendFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IOFTInterface;
    static connect(address: string, runner?: ContractRunner | null): IOFT$4;
}

type index$g_IOFT__factory = IOFT__factory;
declare const index$g_IOFT__factory: typeof IOFT__factory;
declare namespace index$g {
  export {
    index$g_IOFT__factory as IOFT__factory,
  };
}

type TestOFTConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class TestOFT__factory extends ContractFactory {
    constructor(...args: TestOFTConstructorParams);
    getDeployTransaction(_name: string, _symbol: string, _localDecimals: BigNumberish, _endpoint: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_name: string, _symbol: string, _localDecimals: BigNumberish, _endpoint: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<TestOFT & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): TestOFT__factory;
    static readonly bytecode = "0x60c0604052346200041f57620032e2803803806200001d8162000424565b92833981016080828203126200041f5781516001600160401b0392908381116200041f57826200004f91830162000460565b60209283830151908582116200041f576200006c91840162000460565b9260408301519260ff84168094036200041f57606001516001600160a01b0380821695918690036200041f5760008054336001600160a01b0319821681178355604051929892939091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08980a360805260068510620004105750600519840160ff8111620003fc5760ff16604d8111620003fc57600a0a60a0528251918683116200030357600854926001948585811c95168015620003f1575b83861014620003dd578190601f9586811162000389575b5083908683116001146200032357899262000317575b5050600019600383901b1c191690851b176008555b815196871162000303576009548481811c91168015620002f8575b82821014620002e4578381116200029b575b5080928711600114620002305750948092819286976012979462000224575b50501b916000199060031b1c1916176009555b036200022157604051612e0f9081620004d382396080518181816105a001528181610c21015281816112890152818161145e0152818161241a0152612b10015260a05181818161280a015281816129260152612be50152f35b80fd5b015192503880620001b5565b909591601f19831696600987528287209287905b8982106200028357505083601297981062000269575b505050811b01600955620001c8565b015160001960f88460031b161c191690553880806200025a565b80878596829496860151815501950193019062000244565b6009875281872084808a0160051c820192848b10620002da575b0160051c019085905b828110620002ce57505062000196565b888155018590620002be565b92508192620002b5565b634e487b7160e01b87526022600452602487fd5b90607f169062000184565b634e487b7160e01b86526041600452602486fd5b01519050388062000154565b60088a52848a208894509190601f1984168b5b8782821062000372575050841162000358575b505050811b0160085562000169565b015160001960f88460031b161c1916905538808062000349565b8385015186558b9790950194938401930162000336565b909150600889528389208680850160051c820192868610620003d3575b918991869594930160051c01915b828110620003c45750506200013e565b8b8155859450899101620003b4565b92508192620003a6565b634e487b7160e01b88526022600452602488fd5b94607f169462000127565b634e487b7160e01b86526011600452602486fd5b6384564cb760e01b8152600490fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200044a57604052565b634e487b7160e01b600052604160045260246000fd5b919080601f840112156200041f5782516001600160401b0381116200044a5760209062000496601f8201601f1916830162000424565b928184528282870101116200041f5760005b818110620004be57508260009394955001015290565b8581018301518482018401528201620004a856fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461024b57806306fdde0314610246578063095ea7b31461024157806313137d651461023c57806318160ddd1461023757806323b872dd1461023257806326b27f841461022d578063313ce567146102285780633400288b14610223578063395093511461021e57806340c10f19146102195780634e5cbf611461021457806354fd4d501461020f5780635535d4611461020a5780635e280f111461020557806370a0823114610200578063715018a6146101fb5780637d25a05e146101f6578063857749b0146101f15780638da5cb5b146101ec578063950c8a74146101e757806395d89b41146101e2578063a457c2d7146101dd578063a9059cbb146101d8578063b98bd070146101d3578063bb0b6a53146101ce578063bc70b354146101c9578063c07f7c44146101c4578063d4243885146101bf578063dbcd3b91146101ba578063dd62ed3e146101b5578063ecd58732146101b0578063ed2cee9e146101ab578063f2fde38b146101a65763fc0c546a0361000e57611981565b61188d565b611866565b6115f9565b611594565b61138a565b611306565b61115b565b6110e7565b6110ac565b610f22565b610ef8565b610e2e565b610d86565b610d5f565b610d38565b610d1c565b610cf5565b610c83565b610c45565b610c01565b610b7e565b610973565b6108ef565b6108c6565b610863565b6107b5565b610799565b61076f565b61067f565b610661565b610539565b6104d6565b6103be565b34610352576020600319360112610352576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361035257807f36372b0700000000000000000000000000000000000000000000000000000000602092149081156102c2575b506040519015158152f35b7fd0a6af1c000000000000000000000000000000000000000000000000000000008114915081156102f5575b50386102b7565b7f411386e800000000000000000000000000000000000000000000000000000000811491508115610328575b50386102ee565b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501438610321565b600080fd5b600091031261035257565b60005b8381106103755750506000910152565b8181015183820152602001610365565b90601f19601f6020936103a381518092818752878088019101610362565b0116010190565b9060206103bb928181520190610385565b90565b34610352576000806003193601126104c2576040519080600854906103e28261099b565b80855291602091600191828116908115610477575060011461041f575b61041b8661040f81880382610b3e565b604051918291826103aa565b0390f35b9350600884527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee35b8385106104645750505050810160200161040f8261041b386103ff565b8054868601840152938201938101610447565b87965061041b9794506020935061040f9592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201019293386103ff565b80fd5b6001600160a01b0381160361035257565b34610352576040600319360112610352576105006004356104f6816104c5565b60243590336121c2565b602060405160018152f35b9181601f840112156103525782359167ffffffffffffffff8311610352576020838186019501011161035257565b600319360160e08112610352576060136103525767ffffffffffffffff6084358181116103525761056e90369060040161050b565b909161057b60a4356104c5565b60c4359081116103525761059390369060040161050b565b5050336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001603610631576105d56105d061199c565b6119d0565b916024358093036105ff5761001992506105ed61199c565b506105f66119c4565b5060643561235e565b6040517fc59a4f6400000000000000000000000000000000000000000000000000000000815260048101849052602490fd5b60246040517fab08c09e000000000000000000000000000000000000000000000000000000008152336004820152fd5b34610352576000600319360112610352576020600754604051908152f35b346103525760606003193601126103525760043561069c816104c5565b6024356106a8816104c5565b604435906001600160a01b03831660005260066020526106df336040600020906001600160a01b0316600052602052604060002090565b54926000198403610701575b6106f593506125c0565b60405160018152602090f35b82841061071d57610718836106f5950333836121c2565b6106eb565b606460405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b63ffffffff81160361035257565b346103525760206003193601126103525760206107916004356105d081610761565b604051908152f35b3461035257600060031936011261035257602060405160128152f35b346103525760408060031936011261035257600435906107d482610761565b63ffffffff602435926107e56126ef565b16600092818452600260205280838520541461083a57907fd81b9101f39c530fa8f18e6c9c5a64e4a3d7cb699e959f5d7abb5951c65e318f92918185526002602052808386205582519182526020820152a180f35b600483517f95567661000000000000000000000000000000000000000000000000000000008152fd5b3461035257604060031936011261035257600435610880816104c5565b3360005260066020526108aa816040600020906001600160a01b0316600052602052604060002090565b5460243581018091116108c15761050091336121c2565b611a21565b34610352576040600319360112610352576100196004356108e6816104c5565b60243590612747565b34610352576020600319360112610352577ff8b6b91dd680bf19d37570578ae915537e6e8cd2106736ad3ca05b30447a72b060206001600160a01b03600435610937816104c5565b61093f6126ef565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006004541617600455604051908152a1005b3461035257600060031936011261035257602060405160018152f35b61ffff81160361035257565b90600182811c921680156109e4575b60208310146109b557565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916109aa565b8054600093926109fd8261099b565b91828252602093600191600181169081600014610a655750600114610a24575b5050505050565b90939495506000929192528360002092846000945b838610610a5157505050500101903880808080610a1d565b805485870183015294019385908201610a39565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168685015250505090151560051b010191503880808080610a1d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117610aed57604052565b610aa2565b6060810190811067ffffffffffffffff821117610aed57604052565b6040810190811067ffffffffffffffff821117610aed57604052565b67ffffffffffffffff8111610aed57604052565b90601f601f19910116810190811067ffffffffffffffff821117610aed57604052565b90610b7c610b7592604051938480926109ee565b0383610b3e565b565b346103525760406003193601126103525761041b610be6610bed610bda600435610ba781610761565b63ffffffff60243591610bb98361098f565b16600052600160205260406000209061ffff16600052602052604060002090565b604051928380926109ee565b0382610b3e565b604051918291602083526020830190610385565b346103525760006003193601126103525760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610352576020600319360112610352576001600160a01b03600435610c6a816104c5565b1660005260056020526020604060002054604051908152f35b34610352576000806003193601126104c257610c9d6126ef565b806001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b3461035257604060031936011261035257610d11600435610761565b602060405160008152f35b3461035257600060031936011261035257602060405160068152f35b346103525760006003193601126103525760206001600160a01b0360005416604051908152f35b346103525760006003193601126103525760206001600160a01b0360035416604051908152f35b34610352576000806003193601126104c257604051908060095490610daa8261099b565b808552916020916001918281169081156104775750600114610dd65761041b8661040f81880382610b3e565b9350600984527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af5b838510610e1b5750505050810160200161040f8261041b386103ff565b8054868601840152938201938101610dfe565b3461035257604060031936011261035257600435610e4b816104c5565b60243590336000526006602052610e79816040600020906001600160a01b0316600052602052604060002090565b5491808310610e8e576106f5920390336121c2565b608460405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b3461035257604060031936011261035257610500600435610f18816104c5565b60243590336125c0565b34610352576020806003193601126103525760049060043567ffffffffffffffff918282116103525736602383011215610352578160040135928311610352576024820191602436918560051b01011161035257610f7e6126ef565b60005b838110610fbe576040517fadc065f6ee2d84e4fc04873c88fe72b002dd1bf2faa49da18167494e909ca7e89080610fb9878783611cf1565b0390a1005b610fc9818585611a7f565b6003610fff610ff8610ff2610fec610fe660409687810190611ac4565b90611b15565b90611b5e565b60f01c90565b61ffff1690565b03611084579061107e611022600193611019848989611a7f565b90810190611ac4565b9061107961105261103c611037878c8c611a7f565b6119a8565b63ffffffff166000526001602052604060002090565b61106788611061888d8d611a7f565b01611ba2565b61ffff16600052602052604060002090565b611c02565b01610f81565b8590517f0280f177000000000000000000000000000000000000000000000000000000008152fd5b346103525760206003193601126103525763ffffffff6004356110ce81610761565b1660005260026020526020604060002054604051908152f35b346103525760606003193601126103525760043561110481610761565b6024356111108161098f565b6044359067ffffffffffffffff82116103525761041b92611138610bed93369060040161050b565b92909161209f565b600319608091011261035257600490565b8015150361035257565b346103525760e06003193601126103525761117536611140565b67ffffffffffffffff6084358181116103525761119690369060040161050b565b9260a4356111a381611151565b60c435938411610352576111f96111c161127795369060040161050b565b909360409788966111f36060840135976111da89610761565b6111eb8a8601356020870135612801565b953691611e52565b926128d0565b9061120384610761565b61120c84610761565b611215846119d0565b63ffffffff86519561122687610ad1565b1685526020850152848401526060830152151560808201528151809381927fddc28c580000000000000000000000000000000000000000000000000000000083528460048401526044830190612a5b565b30602483015203816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115611301576000916112d4575b508051602091820151925190815290810191909152604090f35b6112f49150823d84116112fa575b6112ec8183610b3e565b810190612a47565b386112ba565b503d6112e2565b612352565b34610352576020600319360112610352577f9bfd6b2fbc3428e14e9b2649314854ca348f45338b458b9a4e576760e7f405d560206001600160a01b0360043561134e816104c5565b6113566126ef565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006003541617600355604051908152a1005b346103525760206003193601126103525760043567ffffffffffffffff8111610352576113bb90369060040161050b565b906113c46126ef565b7fffffffff000000000000000000000000000000000000000000000000000000006113ef8383612101565b167f20efd72200000000000000000000000000000000000000000000000000000000811490811561156a575b8115611540575b8115611516575b81156114ec575b81156114c2575b501561149857600091829161145160405180938193611ebc565b0390826001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1611488612145565b901561149057005b602081519101fd5b60046040517f0fbdec0a000000000000000000000000000000000000000000000000000000008152fd5b7feaeacd630000000000000000000000000000000000000000000000000000000091501438611437565b7f965183d40000000000000000000000000000000000000000000000000000000081149150611430565b7f66bf43d60000000000000000000000000000000000000000000000000000000081149150611429565b7fe16f964d0000000000000000000000000000000000000000000000000000000081149150611422565b7fb8849ac9000000000000000000000000000000000000000000000000000000008114915061141b565b346103525760406003193601126103525760206115f06004356115b6816104c5565b6001600160a01b03602435916115cb836104c5565b16600052600683526040600020906001600160a01b0316600052602052604060002090565b54604051908152f35b6101006003193601126103525761160f36611140565b67ffffffffffffffff906084358281116103525761163190369060040161050b565b919060a43561163f81611151565b60c4359461164c866104c5565b60e4359081116103525761166490369060040161050b565b94909161166f612175565b5060409460608101926116828435610761565b611693878301356020840135612801565b9533156117fd576117ad936117628861041b9c957f9ae5a085fcdd3a841fd4b8e8f114073db75391319202e87af5e7fe2fd6889cd898956117a6956111f38f8f9060008f92886116f6336001600160a01b03166000526005602052604060002090565b5461170382821015612d68565b03611721336001600160a01b03166000526005602052604060002090565b5561172f8960075403600755565b5188815233907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602090a33691611e52565b906117786105d0611772876119a8565b966119a8565b61178f611783611e29565b63ffffffff9097168752565b60208601528a850152606084015215156080830152565b3490612aac565b948551926117c186519283923397846121ab565b0390a3519182918291909160606020604060808401958051855267ffffffffffffffff8382015116838601520151805160408501520151910152565b6084885162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152fd5b346103525760006003193601126103525760206001600160a01b0360045416604051908152f35b34610352576020600319360112610352576004356118aa816104c5565b6118b26126ef565b6001600160a01b038091168015611917576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b34610352576000600319360112610352576020604051308152f35b6004356103bb81610761565b356103bb81610761565b67ffffffffffffffff81160361035257565b6044356103bb816119b2565b63ffffffff16908160005260026020526040600020549182156119f05750565b602490604051907f196fb6c00000000000000000000000000000000000000000000000000000000082526004820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015611abf5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa181360301821215610352570190565b611a50565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610352570180359067ffffffffffffffff82116103525760200191813603831361035257565b906002116103525790600290565b909291928360021161035257831161035257600201917ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0190565b7fffff0000000000000000000000000000000000000000000000000000000000009035818116939260028110611b9357505050565b60020360031b82901b16169150565b356103bb8161098f565b90601f8111611bba57505050565b6000916000526020600020906020601f850160051c83019410611bf8575b601f0160051c01915b828110611bed57505050565b818155600101611be1565b9092508290611bd8565b90929167ffffffffffffffff8111610aed57611c2881611c22845461099b565b84611bac565b6000601f8211600114611c68578190611c59939495600092611c5d575b50506000198260011b9260031b1c19161790565b9055565b013590503880611c45565b601f19821694611c7d84600052602060002090565b91805b878110611cb8575083600195969710611c9e575b505050811b019055565b60001960f88560031b161c19910135169055388080611c94565b90926020600181928686013581550194019101611c80565b601f8260209493601f19938186528686013760008582860101520116010190565b916020908082850183865252604091604085019460408360051b82010195856000925b858410611d2657505050505050505090565b90919293949596977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082820301845288357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18436030181121561035257830160609063ffffffff8135611d9881610761565b16835261ffff88820135611dab8161098f565b1688840152898101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561035257019087823592019267ffffffffffffffff8311610352578236038413610352576001938993838386958f611e179601520191611cd0565b9a019401940192969594939190611d14565b60405190610b7c82610ad1565b67ffffffffffffffff8111610aed57601f01601f191660200190565b929192611e5e82611e36565b91611e6c6040519384610b3e565b829481845281830111610352578281602093846000960137010152565b805115611abf5760200190565b805160011015611abf5760210190565b91909161ffff808094169116019182116108c157565b908092918237016000815290565b60209083610b7c939594956040519683611eed8995518092888089019101610362565b8401918583013701600083820152038085520183610b3e565b919081611f44575050611f3f611f2f6103bb9263ffffffff166000526001602052604060002090565b6001600052602052604060002090565b610b61565b9091611f3f611f2f611f669263ffffffff166000526001602052604060002090565b80519091901561203757611f80610ff2610fec8584611b15565b61ffff611ff2610ff8611fda611fd0611fca611fc4611f9e8a611e89565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b60ff1690565b60081b61ff001690565b611fec611fca611fc4611f9e8a611e96565b90611ea6565b91160361200d57826103bb9361200792611b23565b91611eca565b60046040517f0280f177000000000000000000000000000000000000000000000000000000008152fd5b90506103bb913691611e52565b91908161207d575050611f3f61206d6103bb9263ffffffff166000526001602052604060002090565b6002600052602052604060002090565b9091611f3f61206d611f669263ffffffff166000526001602052604060002090565b90929091816120de5750506103bb916120cb611f3f9263ffffffff166000526001602052604060002090565b9061ffff16600052602052604060002090565b91611f6691936120cb611f3f9263ffffffff166000526001602052604060002090565b7fffffffff00000000000000000000000000000000000000000000000000000000903581811693926004811061213657505050565b60040360031b82901b16169150565b3d15612170573d9061215682611e36565b916121646040519384610b3e565b82523d6000602084013e565b606090565b6040519061218282610af2565b816000815260006020820152604080519161219c83610b0e565b60008352600060208401520152565b6040906103bb949281528160208201520191611cd0565b906001600160a01b03918281169283156122bd578216938415612253578061223d7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259461222561224e956001600160a01b03166000526006602052604060002090565b906001600160a01b0316600052602052604060002090565b556040519081529081906020820190565b0390a3565b608460405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b6103bb93926001600160a01b036080931682526020820152600060408201528160608201520190610385565b6040513d6000823e3d90fd5b909161237961236d8285612ba5565b6001600160a01b031690565b9061238c6123878286612bb1565b612bd6565b809461239661199c565b506123a18285612747565b602883116123e9575b5050604051938452506001600160a01b0316917ffc1b5feb636aa495ed28914895ca443adffbd4e2da951d5694baa392b4ebd15890806020810161224e565b9061240f92916124096123fa6119c4565b9361240361199c565b92612c0b565b92612c45565b906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803b15610352576124816000939184926040519586809481937f7cb590120000000000000000000000000000000000000000000000000000000083528a8960048501612326565b03925af1908115611301577ffc1b5feb636aa495ed28914895ca443adffbd4e2da951d5694baa392b4ebd158926001600160a01b03926124c5575b859193506123aa565b806124d26124d892610b2a565b80610357565b386124bc565b156124e557565b608460405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b1561255657565b608460405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b91906001600160a01b03908184169283156126855761266f827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9461224e94169661260c8815156124de565b6126558461262d836001600160a01b03166000526005602052604060002090565b5461263a8282101561254f565b03916001600160a01b03166000526005602052604060002090565b556001600160a01b03166000526005602052604060002090565b8054820190556040519081529081906020820190565b608460405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b6001600160a01b0360005416330361270357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906001600160a01b0382169182156127bd57600754908282018092116108c1576000926127ae6020927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef946007556001600160a01b03166000526005602052604060002090565b818154019055604051908152a3565b606460405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b612835906128307f00000000000000000000000000000000000000000000000000000000000000008092612ccf565b612bc3565b90808210612841575090565b6040517fac7247ca00000000000000000000000000000000000000000000000000000000815260048101929092526024820152604490fd5b60209291815261289182518093858085019101610362565b010190565b9081602091031261035257516103bb81611151565b90916128c26103bb93604084526040840190610385565b916020818403910152610385565b909161295f93805115156000146129fc576129226129589261290261291061294b946040519283913360208401612879565b03601f198101835282610b3e565b9561291d606087016119a8565b612044565b955b7f000000000000000000000000000000000000000000000000000000000000000090612ccf565b67ffffffffffffffff1690565b9035612d08565b9161297561236d6004546001600160a01b031690565b6001600160a01b0381166129865750565b602060405180927f043a78eb00000000000000000000000000000000000000000000000000000000825281806129c0888a600484016128ab565b03915afa8015611301576129d15750565b6129f29060203d6020116129f5575b6129ea8183610b3e565b810190612896565b50565b503d6129e0565b92612a196129589261294b92612a14606087016119a8565b611f06565b95612924565b919082604091031261035257604051612a3781610b0e565b6020808294805184520151910152565b90604082820312610352576103bb91612a1f565b9063ffffffff825116815260208201516020820152608080612aa1612a8f604086015160a0604087015260a0860190610385565b60608601518582036060870152610385565b930151151591015290565b90608091612ab8612175565b50612b056001600160a01b03928392604051968795869485937f2637a450000000000000000000000000000000000000000000000000000000008552604060048601526044850190612a5b565b9116602483015203927f0000000000000000000000000000000000000000000000000000000000000000165af190811561130157600091612b44575090565b905060803d608011612b9e575b612b5b8183610b3e565b810160808282031261035257612b96906040805193612b7985610af2565b805185526020810151612b8b816119b2565b602086015201612a1f565b604082015290565b503d612b51565b90602011610352573590565b90602811610352576020013560c01c90565b818102929181159184041417156108c157565b6103bb9067ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000009116612bc3565b9080602811610352576103bb9160287fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd83693019101611e52565b7fffffffffffffffff000000000000000000000000000000000000000000000000936103bb937fffffffff00000000000000000000000000000000000000000000000000000000604c9460405197889560c01b16602086015260e01b166028840152602c830152612cbf8151809260208686019101610362565b810103602c810184520182610b3e565b8115612cd9570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6048906103bb92937fffffffffffffffff000000000000000000000000000000000000000000000000604051958693602085015260c01b166040830152612d588151809260208686019101610362565b8101036028810184520182610b3e565b15612d6f57565b608460405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152fdfea2646970667358221220eda8723ec2f14d41eb18784cbe9bc15f7883cfddb8aa248c75684f335b04294d64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "_symbol";
            readonly type: "string";
        }, {
            readonly internalType: "uint8";
            readonly name: "_localDecimals";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amountLDSend";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "AmountSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LDMinusSD";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "SendOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "SetInspector";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPreCrime";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }];
        readonly name: "callEndpoint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "subtractedValue";
            readonly type: "uint256";
        }];
        readonly name: "decreaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "msgType";
            readonly type: "uint16";
        }];
        readonly name: "enforcedOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "addedValue";
            readonly type: "uint256";
        }];
        readonly name: "increaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "inspector";
        readonly outputs: readonly [{
            readonly internalType: "contract IInspector";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "mint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "quoteSendFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "setInspector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): TestOFTInterface;
    static connect(address: string, runner?: ContractRunner | null): TestOFT;
}

type index$f_TestOFT__factory = TestOFT__factory;
declare const index$f_TestOFT__factory: typeof TestOFT__factory;
declare namespace index$f {
  export {
    index$f_TestOFT__factory as TestOFT__factory,
  };
}

declare class Fee__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "feeBp";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultFeeBp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "enabled";
            readonly type: "bool";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "feeBp";
            readonly type: "uint16";
        }];
        readonly name: "SetFeeBp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "feeOwner";
            readonly type: "address";
        }];
        readonly name: "SetFeeOwner";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "isEnabled";
            readonly type: "bool";
        }];
        readonly name: "SetFeesEnabled";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "BP_DENOMINATOR";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultFeeBp";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "dstEidToFeeBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "feeBP";
            readonly type: "uint16";
        }, {
            readonly internalType: "bool";
            readonly name: "enabled";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "feeOwner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "quoteOFTFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_feeBp";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultFeeBp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bool";
            readonly name: "_enabled";
            readonly type: "bool";
        }, {
            readonly internalType: "uint16";
            readonly name: "_feeBp";
            readonly type: "uint16";
        }];
        readonly name: "setFeeBp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_feeOwner";
            readonly type: "address";
        }];
        readonly name: "setFeeOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): FeeInterface;
    static connect(address: string, runner?: ContractRunner | null): Fee;
}

type OFTConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OFT__factory extends ContractFactory {
    constructor(...args: OFTConstructorParams);
    getDeployTransaction(_name: string, _symbol: string, _localDecimals: BigNumberish, _endpoint: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_name: string, _symbol: string, _localDecimals: BigNumberish, _endpoint: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<OFT & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): OFT__factory;
    static readonly bytecode = "0x60c0604052346200041f57620032a9803803806200001d8162000424565b92833981016080828203126200041f5781516001600160401b0392908381116200041f57826200004f91830162000460565b60209283830151908582116200041f576200006c91840162000460565b9260408301519260ff84168094036200041f57606001516001600160a01b0380821695918690036200041f5760008054336001600160a01b0319821681178355604051929892939091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08980a360805260068510620004105750600519840160ff8111620003fc5760ff16604d8111620003fc57600a0a60a0528251918683116200030357600854926001948585811c95168015620003f1575b83861014620003dd578190601f9586811162000389575b5083908683116001146200032357899262000317575b5050600019600383901b1c191690851b176008555b815196871162000303576009548481811c91168015620002f8575b82821014620002e4578381116200029b575b5080928711600114620002305750948092819286976012979462000224575b50501b916000199060031b1c1916176009555b036200022157604051612dd69081620004d3823960805181818161059001528181610be80152818161125001528181611425015281816123e10152612a1d015260a051818181612717015281816128330152612af20152f35b80fd5b015192503880620001b5565b909591601f19831696600987528287209287905b8982106200028357505083601297981062000269575b505050811b01600955620001c8565b015160001960f88460031b161c191690553880806200025a565b80878596829496860151815501950193019062000244565b6009875281872084808a0160051c820192848b10620002da575b0160051c019085905b828110620002ce57505062000196565b888155018590620002be565b92508192620002b5565b634e487b7160e01b87526022600452602487fd5b90607f169062000184565b634e487b7160e01b86526041600452602486fd5b01519050388062000154565b60088a52848a208894509190601f1984168b5b8782821062000372575050841162000358575b505050811b0160085562000169565b015160001960f88460031b161c1916905538808062000349565b8385015186558b9790950194938401930162000336565b909150600889528389208680850160051c820192868610620003d3575b918991869594930160051c01915b828110620003c45750506200013e565b8b8155859450899101620003b4565b92508192620003a6565b634e487b7160e01b88526022600452602488fd5b94607f169462000127565b634e487b7160e01b86526011600452602486fd5b6384564cb760e01b8152600490fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200044a57604052565b634e487b7160e01b600052604160045260246000fd5b919080601f840112156200041f5782516001600160401b0381116200044a5760209062000496601f8201601f1916830162000424565b928184528282870101116200041f5760005b818110620004be57508260009394955001015290565b8581018301518482018401528201620004a856fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461023b57806306fdde0314610236578063095ea7b31461023157806313137d651461022c57806318160ddd1461022757806323b872dd1461022257806326b27f841461021d578063313ce567146102185780633400288b14610213578063395093511461020e5780634e5cbf611461020957806354fd4d50146102045780635535d461146101ff5780635e280f11146101fa57806370a08231146101f5578063715018a6146101f05780637d25a05e146101eb578063857749b0146101e65780638da5cb5b146101e1578063950c8a74146101dc57806395d89b41146101d7578063a457c2d7146101d2578063a9059cbb146101cd578063b98bd070146101c8578063bb0b6a53146101c3578063bc70b354146101be578063c07f7c44146101b9578063d4243885146101b4578063dbcd3b91146101af578063dd62ed3e146101aa578063ecd58732146101a5578063ed2cee9e146101a0578063f2fde38b1461019b5763fc0c546a0361000e57611948565b611854565b61182d565b6115c0565b61155b565b611351565b6112cd565b611122565b6110ae565b611073565b610ee9565b610ebf565b610df5565b610d4d565b610d26565b610cff565b610ce3565b610cbc565b610c4a565b610c0c565b610bc8565b610b45565b61093a565b6108b6565b610853565b6107a5565b610789565b61075f565b61066f565b610651565b610529565b6104c6565b6103ae565b34610342576020600319360112610342576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361034257807f36372b0700000000000000000000000000000000000000000000000000000000602092149081156102b2575b506040519015158152f35b7fd0a6af1c000000000000000000000000000000000000000000000000000000008114915081156102e5575b50386102a7565b7f411386e800000000000000000000000000000000000000000000000000000000811491508115610318575b50386102de565b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501438610311565b600080fd5b600091031261034257565b60005b8381106103655750506000910152565b8181015183820152602001610355565b90601f19601f60209361039381518092818752878088019101610352565b0116010190565b9060206103ab928181520190610375565b90565b34610342576000806003193601126104b2576040519080600854906103d282610962565b80855291602091600191828116908115610467575060011461040f575b61040b866103ff81880382610b05565b6040519182918261039a565b0390f35b9350600884527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee35b838510610454575050505081016020016103ff8261040b386103ef565b8054868601840152938201938101610437565b87965061040b979450602093506103ff9592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201019293386103ef565b80fd5b6001600160a01b0381160361034257565b34610342576040600319360112610342576104f06004356104e6816104b5565b6024359033612189565b602060405160018152f35b9181601f840112156103425782359167ffffffffffffffff8311610342576020838186019501011161034257565b600319360160e08112610342576060136103425767ffffffffffffffff6084358181116103425761055e9036906004016104fb565b909161056b60a4356104b5565b60c435908111610342576105839036906004016104fb565b5050336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001603610621576105c56105c0611963565b611997565b916024358093036105ef5761001992506105dd611963565b506105e661198b565b50606435612325565b6040517fc59a4f6400000000000000000000000000000000000000000000000000000000815260048101849052602490fd5b60246040517fab08c09e000000000000000000000000000000000000000000000000000000008152336004820152fd5b34610342576000600319360112610342576020600754604051908152f35b346103425760606003193601126103425760043561068c816104b5565b602435610698816104b5565b604435906001600160a01b03831660005260066020526106cf336040600020906001600160a01b0316600052602052604060002090565b549260001984036106f1575b6106e59350612587565b60405160018152602090f35b82841061070d57610708836106e595033383612189565b6106db565b606460405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b63ffffffff81160361034257565b346103425760206003193601126103425760206107816004356105c081610751565b604051908152f35b3461034257600060031936011261034257602060405160128152f35b346103425760408060031936011261034257600435906107c482610751565b63ffffffff602435926107d56126b6565b16600092818452600260205280838520541461082a57907fd81b9101f39c530fa8f18e6c9c5a64e4a3d7cb699e959f5d7abb5951c65e318f92918185526002602052808386205582519182526020820152a180f35b600483517f95567661000000000000000000000000000000000000000000000000000000008152fd5b3461034257604060031936011261034257600435610870816104b5565b33600052600660205261089a816040600020906001600160a01b0316600052602052604060002090565b5460243581018091116108b1576104f09133612189565b6119e8565b34610342576020600319360112610342577ff8b6b91dd680bf19d37570578ae915537e6e8cd2106736ad3ca05b30447a72b060206001600160a01b036004356108fe816104b5565b6109066126b6565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006004541617600455604051908152a1005b3461034257600060031936011261034257602060405160018152f35b61ffff81160361034257565b90600182811c921680156109ab575b602083101461097c57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610971565b8054600093926109c482610962565b91828252602093600191600181169081600014610a2c57506001146109eb575b5050505050565b90939495506000929192528360002092846000945b838610610a18575050505001019038808080806109e4565b805485870183015294019385908201610a00565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168685015250505090151560051b0101915038808080806109e4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117610ab457604052565b610a69565b6060810190811067ffffffffffffffff821117610ab457604052565b6040810190811067ffffffffffffffff821117610ab457604052565b67ffffffffffffffff8111610ab457604052565b90601f601f19910116810190811067ffffffffffffffff821117610ab457604052565b90610b43610b3c92604051938480926109b5565b0383610b05565b565b346103425760406003193601126103425761040b610bad610bb4610ba1600435610b6e81610751565b63ffffffff60243591610b8083610956565b16600052600160205260406000209061ffff16600052602052604060002090565b604051928380926109b5565b0382610b05565b604051918291602083526020830190610375565b346103425760006003193601126103425760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610342576020600319360112610342576001600160a01b03600435610c31816104b5565b1660005260056020526020604060002054604051908152f35b34610342576000806003193601126104b257610c646126b6565b806001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b3461034257604060031936011261034257610cd8600435610751565b602060405160008152f35b3461034257600060031936011261034257602060405160068152f35b346103425760006003193601126103425760206001600160a01b0360005416604051908152f35b346103425760006003193601126103425760206001600160a01b0360035416604051908152f35b34610342576000806003193601126104b257604051908060095490610d7182610962565b808552916020916001918281169081156104675750600114610d9d5761040b866103ff81880382610b05565b9350600984527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af5b838510610de2575050505081016020016103ff8261040b386103ef565b8054868601840152938201938101610dc5565b3461034257604060031936011261034257600435610e12816104b5565b60243590336000526006602052610e40816040600020906001600160a01b0316600052602052604060002090565b5491808310610e55576106e592039033612189565b608460405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b34610342576040600319360112610342576104f0600435610edf816104b5565b6024359033612587565b34610342576020806003193601126103425760049060043567ffffffffffffffff918282116103425736602383011215610342578160040135928311610342576024820191602436918560051b01011161034257610f456126b6565b60005b838110610f85576040517fadc065f6ee2d84e4fc04873c88fe72b002dd1bf2faa49da18167494e909ca7e89080610f80878783611cb8565b0390a1005b610f90818585611a46565b6003610fc6610fbf610fb9610fb3610fad60409687810190611a8b565b90611adc565b90611b25565b60f01c90565b61ffff1690565b0361104b5790611045610fe9600193610fe0848989611a46565b90810190611a8b565b90611040611019611003610ffe878c8c611a46565b61196f565b63ffffffff166000526001602052604060002090565b61102e88611028888d8d611a46565b01611b69565b61ffff16600052602052604060002090565b611bc9565b01610f48565b8590517f0280f177000000000000000000000000000000000000000000000000000000008152fd5b346103425760206003193601126103425763ffffffff60043561109581610751565b1660005260026020526020604060002054604051908152f35b34610342576060600319360112610342576004356110cb81610751565b6024356110d781610956565b6044359067ffffffffffffffff82116103425761040b926110ff610bb49336906004016104fb565b929091612066565b600319608091011261034257600490565b8015150361034257565b346103425760e06003193601126103425761113c36611107565b67ffffffffffffffff6084358181116103425761115d9036906004016104fb565b9260a43561116a81611118565b60c435938411610342576111c061118861123e9536906004016104fb565b909360409788966111ba6060840135976111a189610751565b6111b28a860135602087013561270e565b953691611e19565b926127dd565b906111ca84610751565b6111d384610751565b6111dc84611997565b63ffffffff8651956111ed87610a98565b1685526020850152848401526060830152151560808201528151809381927fddc28c580000000000000000000000000000000000000000000000000000000083528460048401526044830190612968565b30602483015203816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9081156112c85760009161129b575b508051602091820151925190815290810191909152604090f35b6112bb9150823d84116112c1575b6112b38183610b05565b810190612954565b38611281565b503d6112a9565b612319565b34610342576020600319360112610342577f9bfd6b2fbc3428e14e9b2649314854ca348f45338b458b9a4e576760e7f405d560206001600160a01b03600435611315816104b5565b61131d6126b6565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006003541617600355604051908152a1005b346103425760206003193601126103425760043567ffffffffffffffff8111610342576113829036906004016104fb565b9061138b6126b6565b7fffffffff000000000000000000000000000000000000000000000000000000006113b683836120c8565b167f20efd722000000000000000000000000000000000000000000000000000000008114908115611531575b8115611507575b81156114dd575b81156114b3575b8115611489575b501561145f57600091829161141860405180938193611e83565b0390826001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af161144f61210c565b901561145757005b602081519101fd5b60046040517f0fbdec0a000000000000000000000000000000000000000000000000000000008152fd5b7feaeacd6300000000000000000000000000000000000000000000000000000000915014386113fe565b7f965183d400000000000000000000000000000000000000000000000000000000811491506113f7565b7f66bf43d600000000000000000000000000000000000000000000000000000000811491506113f0565b7fe16f964d00000000000000000000000000000000000000000000000000000000811491506113e9565b7fb8849ac900000000000000000000000000000000000000000000000000000000811491506113e2565b346103425760406003193601126103425760206115b760043561157d816104b5565b6001600160a01b0360243591611592836104b5565b16600052600683526040600020906001600160a01b0316600052602052604060002090565b54604051908152f35b610100600319360112610342576115d636611107565b67ffffffffffffffff90608435828111610342576115f89036906004016104fb565b919060a43561160681611118565b60c43594611613866104b5565b60e4359081116103425761162b9036906004016104fb565b94909161163661213c565b5060409460608101926116498435610751565b61165a87830135602084013561270e565b9533156117c457611774936117298861040b9c957f9ae5a085fcdd3a841fd4b8e8f114073db75391319202e87af5e7fe2fd6889cd8989561176d956111ba8f8f9060008f92886116bd336001600160a01b03166000526005602052604060002090565b546116ca82821015612c75565b036116e8336001600160a01b03166000526005602052604060002090565b556116f68960075403600755565b5188815233907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602090a33691611e19565b9061173f6105c06117398761196f565b9661196f565b61175661174a611df0565b63ffffffff9097168752565b60208601528a850152606084015215156080830152565b34906129b9565b948551926117888651928392339784612172565b0390a3519182918291909160606020604060808401958051855267ffffffffffffffff8382015116838601520151805160408501520151910152565b6084885162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152fd5b346103425760006003193601126103425760206001600160a01b0360045416604051908152f35b3461034257602060031936011261034257600435611871816104b5565b6118796126b6565b6001600160a01b0380911680156118de576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b34610342576000600319360112610342576020604051308152f35b6004356103ab81610751565b356103ab81610751565b67ffffffffffffffff81160361034257565b6044356103ab81611979565b63ffffffff16908160005260026020526040600020549182156119b75750565b602490604051907f196fb6c00000000000000000000000000000000000000000000000000000000082526004820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015611a865760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa181360301821215610342570190565b611a17565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610342570180359067ffffffffffffffff82116103425760200191813603831361034257565b906002116103425790600290565b909291928360021161034257831161034257600201917ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0190565b7fffff0000000000000000000000000000000000000000000000000000000000009035818116939260028110611b5a57505050565b60020360031b82901b16169150565b356103ab81610956565b90601f8111611b8157505050565b6000916000526020600020906020601f850160051c83019410611bbf575b601f0160051c01915b828110611bb457505050565b818155600101611ba8565b9092508290611b9f565b90929167ffffffffffffffff8111610ab457611bef81611be98454610962565b84611b73565b6000601f8211600114611c2f578190611c20939495600092611c24575b50506000198260011b9260031b1c19161790565b9055565b013590503880611c0c565b601f19821694611c4484600052602060002090565b91805b878110611c7f575083600195969710611c65575b505050811b019055565b60001960f88560031b161c19910135169055388080611c5b565b90926020600181928686013581550194019101611c47565b601f8260209493601f19938186528686013760008582860101520116010190565b916020908082850183865252604091604085019460408360051b82010195856000925b858410611ced57505050505050505090565b90919293949596977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082820301845288357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18436030181121561034257830160609063ffffffff8135611d5f81610751565b16835261ffff88820135611d7281610956565b1688840152898101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561034257019087823592019267ffffffffffffffff8311610342578236038413610342576001938993838386958f611dde9601520191611c97565b9a019401940192969594939190611cdb565b60405190610b4382610a98565b67ffffffffffffffff8111610ab457601f01601f191660200190565b929192611e2582611dfd565b91611e336040519384610b05565b829481845281830111610342578281602093846000960137010152565b805115611a865760200190565b805160011015611a865760210190565b91909161ffff808094169116019182116108b157565b908092918237016000815290565b60209083610b43939594956040519683611eb48995518092888089019101610352565b8401918583013701600083820152038085520183610b05565b919081611f0b575050611f06611ef66103ab9263ffffffff166000526001602052604060002090565b6001600052602052604060002090565b610b28565b9091611f06611ef6611f2d9263ffffffff166000526001602052604060002090565b805190919015611ffe57611f47610fb9610fb38584611adc565b61ffff611fb9610fbf611fa1611f97611f91611f8b611f658a611e50565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b60ff1690565b60081b61ff001690565b611fb3611f91611f8b611f658a611e5d565b90611e6d565b911603611fd457826103ab93611fce92611aea565b91611e91565b60046040517f0280f177000000000000000000000000000000000000000000000000000000008152fd5b90506103ab913691611e19565b919081612044575050611f066120346103ab9263ffffffff166000526001602052604060002090565b6002600052602052604060002090565b9091611f06612034611f2d9263ffffffff166000526001602052604060002090565b90929091816120a55750506103ab91612092611f069263ffffffff166000526001602052604060002090565b9061ffff16600052602052604060002090565b91611f2d9193612092611f069263ffffffff166000526001602052604060002090565b7fffffffff0000000000000000000000000000000000000000000000000000000090358181169392600481106120fd57505050565b60040360031b82901b16169150565b3d15612137573d9061211d82611dfd565b9161212b6040519384610b05565b82523d6000602084013e565b606090565b6040519061214982610ab9565b816000815260006020820152604080519161216383610ad5565b60008352600060208401520152565b6040906103ab949281528160208201520191611c97565b906001600160a01b039182811692831561228457821693841561221a57806122047f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925946121ec612215956001600160a01b03166000526006602052604060002090565b906001600160a01b0316600052602052604060002090565b556040519081529081906020820190565b0390a3565b608460405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b6103ab93926001600160a01b036080931682526020820152600060408201528160608201520190610375565b6040513d6000823e3d90fd5b90916123406123348285612ab2565b6001600160a01b031690565b9061235361234e8286612abe565b612ae3565b809461235d611963565b506123688285612ce6565b602883116123b0575b5050604051938452506001600160a01b0316917ffc1b5feb636aa495ed28914895ca443adffbd4e2da951d5694baa392b4ebd158908060208101612215565b906123d692916123d06123c161198b565b936123ca611963565b92612b18565b92612b52565b906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803b15610342576124486000939184926040519586809481937f7cb590120000000000000000000000000000000000000000000000000000000083528a89600485016122ed565b03925af19081156112c8577ffc1b5feb636aa495ed28914895ca443adffbd4e2da951d5694baa392b4ebd158926001600160a01b039261248c575b85919350612371565b8061249961249f92610af1565b80610347565b38612483565b156124ac57565b608460405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b1561251d57565b608460405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b91906001600160a01b039081841692831561264c57612636827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef946122159416966125d38815156124a5565b61261c846125f4836001600160a01b03166000526005602052604060002090565b5461260182821015612516565b03916001600160a01b03166000526005602052604060002090565b556001600160a01b03166000526005602052604060002090565b8054820190556040519081529081906020820190565b608460405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b6001600160a01b036000541633036126ca57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6127429061273d7f00000000000000000000000000000000000000000000000000000000000000008092612bdc565b612ad0565b9080821061274e575090565b6040517fac7247ca00000000000000000000000000000000000000000000000000000000815260048101929092526024820152604490fd5b60209291815261279e82518093858085019101610352565b010190565b9081602091031261034257516103ab81611118565b90916127cf6103ab93604084526040840190610375565b916020818403910152610375565b909161286c93805115156000146129095761282f6128659261280f61281d612858946040519283913360208401612786565b03601f198101835282610b05565b9561282a6060870161196f565b61200b565b955b7f000000000000000000000000000000000000000000000000000000000000000090612bdc565b67ffffffffffffffff1690565b9035612c15565b916128826123346004546001600160a01b031690565b6001600160a01b0381166128935750565b602060405180927f043a78eb00000000000000000000000000000000000000000000000000000000825281806128cd888a600484016127b8565b03915afa80156112c8576128de5750565b6128ff9060203d602011612902575b6128f78183610b05565b8101906127a3565b50565b503d6128ed565b9261292661286592612858926129216060870161196f565b611ecd565b95612831565b91908260409103126103425760405161294481610ad5565b6020808294805184520151910152565b90604082820312610342576103ab9161292c565b9063ffffffff8251168152602082015160208201526080806129ae61299c604086015160a0604087015260a0860190610375565b60608601518582036060870152610375565b930151151591015290565b906080916129c561213c565b50612a126001600160a01b03928392604051968795869485937f2637a450000000000000000000000000000000000000000000000000000000008552604060048601526044850190612968565b9116602483015203927f0000000000000000000000000000000000000000000000000000000000000000165af19081156112c857600091612a51575090565b905060803d608011612aab575b612a688183610b05565b810160808282031261034257612aa3906040805193612a8685610ab9565b805185526020810151612a9881611979565b60208601520161292c565b604082015290565b503d612a5e565b90602011610342573590565b90602811610342576020013560c01c90565b818102929181159184041417156108b157565b6103ab9067ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000009116612ad0565b9080602811610342576103ab9160287fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd83693019101611e19565b7fffffffffffffffff000000000000000000000000000000000000000000000000936103ab937fffffffff00000000000000000000000000000000000000000000000000000000604c9460405197889560c01b16602086015260e01b166028840152602c830152612bcc8151809260208686019101610352565b810103602c810184520182610b05565b8115612be6570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6048906103ab92937fffffffffffffffff000000000000000000000000000000000000000000000000604051958693602085015260c01b166040830152612c658151809260208686019101610352565b8101036028810184520182610b05565b15612c7c57565b608460405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152fd5b906001600160a01b038216918215612d5c57600754908282018092116108b157600092612d4d6020927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef946007556001600160a01b03166000526005602052604060002090565b818154019055604051908152a3565b606460405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fdfea2646970667358221220da7f823eedeaeea3a3e88102e6f7a6d1903ec3939d0d961b666a8be88e17f3de64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "_symbol";
            readonly type: "string";
        }, {
            readonly internalType: "uint8";
            readonly name: "_localDecimals";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amountLDSend";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "AmountSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LDMinusSD";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "SendOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "SetInspector";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPreCrime";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }];
        readonly name: "callEndpoint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "subtractedValue";
            readonly type: "uint256";
        }];
        readonly name: "decreaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "msgType";
            readonly type: "uint16";
        }];
        readonly name: "enforcedOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "addedValue";
            readonly type: "uint256";
        }];
        readonly name: "increaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "inspector";
        readonly outputs: readonly [{
            readonly internalType: "contract IInspector";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "quoteSendFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "setInspector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OFTInterface;
    static connect(address: string, runner?: ContractRunner | null): OFT;
}

type OFTAdapterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OFTAdapter__factory extends ContractFactory {
    constructor(...args: OFTAdapterConstructorParams);
    getDeployTransaction(_token: AddressLike, _localDecimals: BigNumberish, _endpoint: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_token: AddressLike, _localDecimals: BigNumberish, _endpoint: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<OFTAdapter & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): OFTAdapter__factory;
    static readonly bytecode = "0x60e06040908082523462000236576060816200284380380380916200002582856200023b565b83398101031262000236576200003b8162000275565b9060206200005884620000508385016200028a565b930162000275565b60008054336001600160a01b031982168117835587519296929592936001600160a01b039360ff93909285929183167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08b80a316608052169360068510620002275750600519840160ff8111620002135760ff16604d81116200021357600a0a60a052811660c052845163313ce56760e01b838201908152600482526001600160401b03929180880184811182821017620001ff5788525186928392905afa3d15620001f5573d918211620001e1578551916200013f601f8201601f19168501846200023b565b82523d858484013e5b15620001dd578181805181010312620001dd5760ff916200016a91016200028a565b1603620001da5750516125a990816200029a823960805181818161030a0152818161082001528181610cb101528181610e8601528181611c7001526120b5015260a051818181611daf01528181611ecb015261218a015260c0518181816110d9015281816112f801526122130152f35b80fd5b8380fd5b634e487b7160e01b85526041600452602485fd5b6060915062000148565b634e487b7160e01b88526041600452602488fd5b634e487b7160e01b86526011600452602486fd5b6384564cb760e01b8152600490fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200025f57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200023657565b519060ff82168203620002365756fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461018b57806313137d651461018657806326b27f84146101815780633400288b1461017c5780634e5cbf611461017757806354fd4d50146101725780635535d4611461016d5780635e280f1114610168578063715018a6146101635780637d25a05e1461015e578063857749b0146101595780638da5cb5b14610154578063950c8a741461014f578063b98bd0701461014a578063bb0b6a5314610145578063bc70b35414610140578063c07f7c441461013b578063d424388514610136578063dbcd3b9114610131578063ecd587321461012c578063ed2cee9e14610127578063f2fde38b146101225763fc0c546a0361000e576112d8565b6111ca565b6111a3565b610fbc565b610db2565b610d2e565b610b83565b610b0f565b610ad4565b61094a565b610923565b6108fc565b6108e0565b6108b9565b610844565b610800565b61078a565b610544565b6104b5565b610407565b6103dd565b6102a3565b3461025f57602060031936011261025f576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361025f57807fd0a6af1c0000000000000000000000000000000000000000000000000000000060209214908115610202575b506040519015158152f35b7f411386e800000000000000000000000000000000000000000000000000000000811491508115610235575b50386101f7565b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150143861022e565b600080fd5b9181601f8401121561025f5782359167ffffffffffffffff831161025f576020838186019501011161025f57565b6001600160a01b0381160361025f57565b600319360160e0811261025f5760601361025f5767ffffffffffffffff60843581811161025f576102d8903690600401610264565b90916102e560a435610292565b60c43590811161025f576102fd903690600401610264565b5050336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000160361039f5761033f61033a61131c565b611353565b9160243580930361036957610019925061035761131c565b50610360611347565b50606435611bb9565b6040517fc59a4f6400000000000000000000000000000000000000000000000000000000815260048101849052602490fd5b0390fd5b60246040517fab08c09e000000000000000000000000000000000000000000000000000000008152336004820152fd5b63ffffffff81160361025f57565b3461025f57602060031936011261025f5760206103ff60043561033a816103cf565b604051908152f35b3461025f5760408060031936011261025f5760043590610426826103cf565b63ffffffff60243592610437611d34565b16600092818452600260205280838520541461048c57907fd81b9101f39c530fa8f18e6c9c5a64e4a3d7cb699e959f5d7abb5951c65e318f92918185526002602052808386205582519182526020820152a180f35b600483517f95567661000000000000000000000000000000000000000000000000000000008152fd5b3461025f57602060031936011261025f577ff8b6b91dd680bf19d37570578ae915537e6e8cd2106736ad3ca05b30447a72b060206001600160a01b036004356104fd81610292565b610505611d34565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006004541617600455604051908152a1005b600091031261025f57565b3461025f57600060031936011261025f57602060405160018152f35b61ffff81160361025f57565b90600182811c921680156105b5575b602083101461058657565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f169161057b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761060a57604052565b6105bf565b6060810190811067ffffffffffffffff82111761060a57604052565b6040810190811067ffffffffffffffff82111761060a57604052565b67ffffffffffffffff811161060a57604052565b90601f601f19910116810190811067ffffffffffffffff82111761060a57604052565b906040519182600082546106918161056c565b9081845260209460019160018116908160001461070157506001146106c2575b5050506106c09250038361065b565b565b600090815285812095935091905b8183106106e95750506106c093508201013880806106b1565b855488840185015294850194879450918301916106d0565b9150506106c09593507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880806106b1565b60005b8381106107555750506000910152565b8181015183820152602001610745565b90601f19601f60209361078381518092818752878088019101610742565b0116010190565b3461025f57604060031936011261025f576107fc6107e86107e36004356107b0816103cf565b63ffffffff602435916107c283610560565b16600052600160205260406000209061ffff16600052602052604060002090565b61067e565b604051918291602083526020830190610765565b0390f35b3461025f57600060031936011261025f5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461025f576000806003193601126108b65761085e611d34565b806001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b3461025f57604060031936011261025f576108d56004356103cf565b602060405160008152f35b3461025f57600060031936011261025f57602060405160068152f35b3461025f57600060031936011261025f5760206001600160a01b0360005416604051908152f35b3461025f57600060031936011261025f5760206001600160a01b0360035416604051908152f35b3461025f5760208060031936011261025f5760049060043567ffffffffffffffff9182821161025f573660238301121561025f57816004013592831161025f576024820191602436918560051b01011161025f576109a6611d34565b60005b8381106109e6576040517fadc065f6ee2d84e4fc04873c88fe72b002dd1bf2faa49da18167494e909ca7e890806109e1878783611681565b0390a1005b6109f18185856113d3565b6003610a27610a20610a1a610a14610a0e60409687810190611418565b90611469565b906114b2565b60f01c90565b61ffff1690565b03610aac5790610aa6610a4a600193610a418489896113d3565b90810190611418565b90610aa1610a7a610a64610a5f878c8c6113d3565b61132b565b63ffffffff166000526001602052604060002090565b610a8f88610a89888d8d6113d3565b016114f6565b61ffff16600052602052604060002090565b611556565b016109a9565b8590517f0280f177000000000000000000000000000000000000000000000000000000008152fd5b3461025f57602060031936011261025f5763ffffffff600435610af6816103cf565b1660005260026020526020604060002054604051908152f35b3461025f57606060031936011261025f57600435610b2c816103cf565b602435610b3881610560565b6044359067ffffffffffffffff821161025f576107fc92610b606107e8933690600401610264565b929091611a5e565b600319608091011261025f57600490565b8015150361025f57565b3461025f5760e060031936011261025f57610b9d36610b68565b67ffffffffffffffff60843581811161025f57610bbe903690600401610264565b9260a435610bcb81610b79565b60c43593841161025f57610c21610be9610c9f953690600401610264565b90936040978896610c1b606084013597610c02896103cf565b610c138a8601356020870135611da6565b9536916117e2565b92611e75565b90610c2b846103cf565b610c34846103cf565b610c3d84611353565b63ffffffff865195610c4e876105ee565b1685526020850152848401526060830152151560808201528151809381927fddc28c580000000000000000000000000000000000000000000000000000000083528460048401526044830190612000565b30602483015203816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610d2957600091610cfc575b508051602091820151925190815290810191909152604090f35b610d1c9150823d8411610d22575b610d14818361065b565b810190611fec565b38610ce2565b503d610d0a565b611bad565b3461025f57602060031936011261025f577f9bfd6b2fbc3428e14e9b2649314854ca348f45338b458b9a4e576760e7f405d560206001600160a01b03600435610d7681610292565b610d7e611d34565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006003541617600355604051908152a1005b3461025f57602060031936011261025f5760043567ffffffffffffffff811161025f57610de3903690600401610264565b90610dec611d34565b7fffffffff00000000000000000000000000000000000000000000000000000000610e178383611ac0565b167f20efd722000000000000000000000000000000000000000000000000000000008114908115610f92575b8115610f68575b8115610f3e575b8115610f14575b8115610eea575b5015610ec0576000918291610e7960405180938193611880565b0390826001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1610eb0611b04565b9015610eb857005b602081519101fd5b60046040517f0fbdec0a000000000000000000000000000000000000000000000000000000008152fd5b7feaeacd630000000000000000000000000000000000000000000000000000000091501438610e5f565b7f965183d40000000000000000000000000000000000000000000000000000000081149150610e58565b7f66bf43d60000000000000000000000000000000000000000000000000000000081149150610e51565b7fe16f964d0000000000000000000000000000000000000000000000000000000081149150610e4a565b7fb8849ac90000000000000000000000000000000000000000000000000000000081149150610e43565b61010060031936011261025f57610fd236610b68565b67ffffffffffffffff9060843582811161025f57610ff4903690600401610264565b60a4359361100185610b79565b60c4359461100e86610292565b60e43591821161025f576107fc9561110494611149611150936110567f9ae5a085fcdd3a841fd4b8e8f114073db75391319202e87af5e7fe2fd6889cd8963690600401610264565b809a829a9299611064611b34565b50606082019661107488356103cf565b610c1b61108960408501356020860135611da6565b9d8e956110fd6040517f23b872dd000000000000000000000000000000000000000000000000000000006020820152336024820152306044820152886064820152606481526110d7816105ee565b7f0000000000000000000000000000000000000000000000000000000000000000612394565b36916117e2565b9061111a61033a6111148761132b565b9661132b565b6111316111256117b9565b63ffffffff9097168752565b60208601526040850152606084015215156080830152565b3490612051565b93845192611165604051928392339784611b6a565b0390a36040519182918291909160606020604060808401958051855267ffffffffffffffff8382015116838601520151805160408501520151910152565b3461025f57600060031936011261025f5760206001600160a01b0360045416604051908152f35b3461025f57602060031936011261025f576004356111e781610292565b6111ef611d34565b6001600160a01b038091168015611254576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b3461025f57600060031936011261025f5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b600435611328816103cf565b90565b35611328816103cf565b67ffffffffffffffff81160361025f57565b60443561132881611335565b63ffffffff16908160005260026020526040600020549182156113735750565b602490604051907f196fb6c00000000000000000000000000000000000000000000000000000000082526004820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908110156114135760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18136030182121561025f570190565b6113a4565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561025f570180359067ffffffffffffffff821161025f5760200191813603831361025f57565b9060021161025f5790600290565b909291928360021161025f57831161025f57600201917ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0190565b7fffff00000000000000000000000000000000000000000000000000000000000090358181169392600281106114e757505050565b60020360031b82901b16169150565b3561132881610560565b90601f811161150e57505050565b6000916000526020600020906020601f850160051c8301941061154c575b601f0160051c01915b82811061154157505050565b818155600101611535565b909250829061152c565b90929167ffffffffffffffff811161060a5761157c81611576845461056c565b84611500565b6000601f82116001146115da5781906115cb9394956000926115cf575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790565b9055565b013590503880611599565b601f198216946115ef84600052602060002090565b91805b878110611648575083600195969710611610575b505050811b019055565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88560031b161c19910135169055388080611606565b909260206001819286860135815501940191016115f2565b601f8260209493601f19938186528686013760008582860101520116010190565b916020908082850183865252604091604085019460408360051b82010195856000925b8584106116b657505050505050505090565b90919293949596977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082820301845288357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18436030181121561025f57830160609063ffffffff8135611728816103cf565b16835261ffff8882013561173b81610560565b1688840152898101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561025f57019087823592019267ffffffffffffffff831161025f57823603841361025f576001938993838386958f6117a79601520191611660565b9a0194019401929695949391906116a4565b604051906106c0826105ee565b67ffffffffffffffff811161060a57601f01601f191660200190565b9291926117ee826117c6565b916117fc604051938461065b565b82948184528183011161025f578281602093846000960137010152565b8051156114135760200190565b8051600110156114135760210190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91909161ffff8080941691160191821161187b57565b611836565b908092918237016000815290565b602090836106c09395949560405196836118b18995518092888089019101610742565b840191858301370160008382015203808552018361065b565b9190816119035750506107e36118f36113289263ffffffff166000526001602052604060002090565b6001600052602052604060002090565b90916107e36118f36119259263ffffffff166000526001602052604060002090565b8051909190156119f65761193f610a1a610a148584611469565b61ffff6119b1610a2061199961198f61198961198361195d8a611819565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b60ff1690565b60081b61ff001690565b6119ab61198961198361195d8a611826565b90611865565b9116036119cc5782611328936119c692611477565b9161188e565b60046040517f0280f177000000000000000000000000000000000000000000000000000000008152fd5b90506113289136916117e2565b919081611a3c5750506107e3611a2c6113289263ffffffff166000526001602052604060002090565b6002600052602052604060002090565b90916107e3611a2c6119259263ffffffff166000526001602052604060002090565b9092909181611a9d57505061132891611a8a6107e39263ffffffff166000526001602052604060002090565b9061ffff16600052602052604060002090565b916119259193611a8a6107e39263ffffffff166000526001602052604060002090565b7fffffffff000000000000000000000000000000000000000000000000000000009035818116939260048110611af557505050565b60040360031b82901b16169150565b3d15611b2f573d90611b15826117c6565b91611b23604051938461065b565b82523d6000602084013e565b606090565b60405190611b418261060f565b8160008152600060208201526040805191611b5b8361062b565b60008352600060208401520152565b604090611328949281528160208201520191611660565b61132893926001600160a01b036080931682526020820152600060408201528160608201520190610765565b6040513d6000823e3d90fd5b9091611bd4611bc8828561214a565b6001600160a01b031690565b90611bf9611bea611be58387612156565b61217b565b611bf261131c565b50836121b0565b809460288311611c3f575b5050604051938452506001600160a01b0316917ffc1b5feb636aa495ed28914895ca443adffbd4e2da951d5694baa392b4ebd15890602090a3565b90611c659291611c5f611c50611347565b93611c5961131c565b92612237565b92612271565b906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803b1561025f57611cd76000939184926040519586809481937f7cb590120000000000000000000000000000000000000000000000000000000083528a8960048501611b81565b03925af1908115610d29577ffc1b5feb636aa495ed28914895ca443adffbd4e2da951d5694baa392b4ebd158926001600160a01b0392611d1b575b85919350611c04565b80611d28611d2e92610647565b80610539565b38611d12565b6001600160a01b03600054163303611d4857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b611dda90611dd57f000000000000000000000000000000000000000000000000000000000000000080926122fb565b612168565b90808210611de6575090565b6040517fac7247ca00000000000000000000000000000000000000000000000000000000815260048101929092526024820152604490fd5b602092918152611e3682518093858085019101610742565b010190565b9081602091031261025f575161132881610b79565b9091611e6761132893604084526040840190610765565b916020818403910152610765565b9091611f049380511515600014611fa157611ec7611efd92611ea7611eb5611ef0946040519283913360208401611e1e565b03601f19810183528261065b565b95611ec26060870161132b565b611a03565b955b7f0000000000000000000000000000000000000000000000000000000000000000906122fb565b67ffffffffffffffff1690565b9035612334565b91611f1a611bc86004546001600160a01b031690565b6001600160a01b038116611f2b5750565b602060405180927f043a78eb0000000000000000000000000000000000000000000000000000000082528180611f65888a60048401611e50565b03915afa8015610d2957611f765750565b611f979060203d602011611f9a575b611f8f818361065b565b810190611e3b565b50565b503d611f85565b92611fbe611efd92611ef092611fb96060870161132b565b6118ca565b95611ec9565b919082604091031261025f57604051611fdc8161062b565b6020808294805184520151910152565b9060408282031261025f5761132891611fc4565b9063ffffffff825116815260208201516020820152608080612046612034604086015160a0604087015260a0860190610765565b60608601518582036060870152610765565b930151151591015290565b9060809161205d611b34565b506120aa6001600160a01b03928392604051968795869485937f2637a450000000000000000000000000000000000000000000000000000000008552604060048601526044850190612000565b9116602483015203927f0000000000000000000000000000000000000000000000000000000000000000165af1908115610d29576000916120e9575090565b905060803d608011612143575b612100818361065b565b810160808282031261025f5761213b90604080519361211e8561060f565b80518552602081015161213081611335565b602086015201611fc4565b604082015290565b503d6120f6565b9060201161025f573590565b9060281161025f576020013560c01c90565b8181029291811591840414171561187b57565b6113289067ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000009116612168565b6001600160a01b03604051917fa9059cbb00000000000000000000000000000000000000000000000000000000602084015216602482015281604482015260448152608081019080821067ffffffffffffffff83111761060a57611328916040527f0000000000000000000000000000000000000000000000000000000000000000612394565b908060281161025f576113289160287fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd836930191016117e2565b7fffffffffffffffff00000000000000000000000000000000000000000000000093611328937fffffffff00000000000000000000000000000000000000000000000000000000604c9460405197889560c01b16602086015260e01b166028840152602c8301526122eb8151809260208686019101610742565b810103602c81018452018261065b565b8115612305570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60489061132892937fffffffffffffffff000000000000000000000000000000000000000000000000604051958693602085015260c01b1660408301526123848151809260208686019101610742565b810103602881018452018261065b565b6040516123f2916001600160a01b03166123ad8261062b565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16123ec611b04565b916124a7565b80519082821592831561248f575b5050501561240b5750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b61249f9350820181019101611e3b565b388281612400565b9192901561252257508151156124bb575090565b3b156124c45790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156125355750805190602001fd5b61039b906040519182917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152602483019061076556fea2646970667358221220b14997ba6f3523e611bd093ff830c3f9abcef535ee888f7db3cc588c688ee76364736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "uint8";
            readonly name: "_localDecimals";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amountLDSend";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "AmountSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LDMinusSD";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "SendOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "SetInspector";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPreCrime";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }];
        readonly name: "callEndpoint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "msgType";
            readonly type: "uint16";
        }];
        readonly name: "enforcedOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "inspector";
        readonly outputs: readonly [{
            readonly internalType: "contract IInspector";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "quoteSendFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "setInspector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OFTAdapterInterface;
    static connect(address: string, runner?: ContractRunner | null): OFTAdapter;
}

declare class OFTCore__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amountLDSend";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "AmountSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LDMinusSD";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "SendOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "SetInspector";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPreCrime";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }];
        readonly name: "callEndpoint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "msgType";
            readonly type: "uint16";
        }];
        readonly name: "enforcedOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "inspector";
        readonly outputs: readonly [{
            readonly internalType: "contract IInspector";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "quoteSendFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "setInspector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OFTCoreInterface;
    static connect(address: string, runner?: ContractRunner | null): OFTCore;
}

type index$e_Fee__factory = Fee__factory;
declare const index$e_Fee__factory: typeof Fee__factory;
type index$e_OFTAdapter__factory = OFTAdapter__factory;
declare const index$e_OFTAdapter__factory: typeof OFTAdapter__factory;
type index$e_OFTCore__factory = OFTCore__factory;
declare const index$e_OFTCore__factory: typeof OFTCore__factory;
type index$e_OFT__factory = OFT__factory;
declare const index$e_OFT__factory: typeof OFT__factory;
declare namespace index$e {
  export {
    index$e_Fee__factory as Fee__factory,
    index$e_OFTAdapter__factory as OFTAdapter__factory,
    index$e_OFTCore__factory as OFTCore__factory,
    index$e_OFT__factory as OFT__factory,
    index$g as interfaces,
    index$f as mocks,
  };
}

declare class IPreCrimeV2__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "crime";
            readonly type: "bytes";
        }];
        readonly name: "CrimeFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "InvalidSimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyOffChain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "PacketOversize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PacketUnsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "SimulationFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "SimulationResultNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "buildSimulationResult";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulations";
            readonly type: "bytes[]";
        }];
        readonly name: "precrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IPreCrimeV2Interface;
    static connect(address: string, runner?: ContractRunner | null): IPreCrimeV2;
}

declare class IPreCrimeV2Simulator__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "SimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "isPeer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oapp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IPreCrimeV2SimulatorInterface;
    static connect(address: string, runner?: ContractRunner | null): IPreCrimeV2Simulator;
}

type index$d_IPreCrimeV2Simulator__factory = IPreCrimeV2Simulator__factory;
declare const index$d_IPreCrimeV2Simulator__factory: typeof IPreCrimeV2Simulator__factory;
type index$d_IPreCrimeV2__factory = IPreCrimeV2__factory;
declare const index$d_IPreCrimeV2__factory: typeof IPreCrimeV2__factory;
declare namespace index$d {
  export {
    index$d_IPreCrimeV2Simulator__factory as IPreCrimeV2Simulator__factory,
    index$d_IPreCrimeV2__factory as IPreCrimeV2__factory,
  };
}

declare class PreCrimeV2__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "crime";
            readonly type: "bytes";
        }];
        readonly name: "CrimeFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "InvalidSimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyOffChain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "max";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "PacketOversize";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PacketUnsorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "SimulationFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "SimulationResultNotFound";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "buildSimulationResult";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPreCrimePeers";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "precrime";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "oapp";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PreCrimePeer[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "maxBatchSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oapp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulations";
            readonly type: "bytes[]";
        }];
        readonly name: "precrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_maxBatchSize";
            readonly type: "uint64";
        }];
        readonly name: "setMaxBatchSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "precrime";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "oapp";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct PreCrimePeer[]";
            readonly name: "_precrimePeers";
            readonly type: "tuple[]";
        }];
        readonly name: "setPreCrimePeers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "_packets";
            readonly type: "bytes[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulator";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): PreCrimeV2Interface;
    static connect(address: string, runner?: ContractRunner | null): PreCrimeV2;
}

declare class PreCrimeV2Simulator__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "SimulationResult";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "_simulateLzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "isPeer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Origin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct InboundPacket[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oapp";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PreCrimeV2SimulatorInterface;
    static connect(address: string, runner?: ContractRunner | null): PreCrimeV2Simulator;
}

type index$c_PreCrimeV2Simulator__factory = PreCrimeV2Simulator__factory;
declare const index$c_PreCrimeV2Simulator__factory: typeof PreCrimeV2Simulator__factory;
type index$c_PreCrimeV2__factory = PreCrimeV2__factory;
declare const index$c_PreCrimeV2__factory: typeof PreCrimeV2__factory;
declare namespace index$c {
  export {
    index$c_PreCrimeV2Simulator__factory as PreCrimeV2Simulator__factory,
    index$c_PreCrimeV2__factory as PreCrimeV2__factory,
    index$d as interfaces,
  };
}

declare namespace index$b {
  export {
    index$e as oft,
    index$c as precrime,
  };
}

declare class EnforcedOptions__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "msgType";
            readonly type: "uint16";
        }];
        readonly name: "enforcedOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): EnforcedOptionsInterface;
    static connect(address: string, runner?: ContractRunner | null): EnforcedOptions;
}

declare class OApp__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidEndpointCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOptions";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPreCrime";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }];
        readonly name: "callEndpoint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_msgType";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }];
        readonly name: "combineOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint16";
            readonly name: "msgType";
            readonly type: "uint16";
        }];
        readonly name: "enforcedOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "msgType";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPreCrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OAppInterface;
    static connect(address: string, runner?: ContractRunner | null): OApp;
}

type index$a_EnforcedOptions__factory = EnforcedOptions__factory;
declare const index$a_EnforcedOptions__factory: typeof EnforcedOptions__factory;
type index$a_OApp__factory = OApp__factory;
declare const index$a_OApp__factory: typeof OApp__factory;
declare namespace index$a {
  export {
    index$a_EnforcedOptions__factory as EnforcedOptions__factory,
    index$a_OApp__factory as OApp__factory,
    index$j as examples,
    index$i as interfaces,
    index$h as libs,
    index$b as standards,
  };
}

declare namespace index$9 {
  export {
    index$a as contracts,
  };
}

declare class ILayerZeroComposer__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroComposerInterface;
    static connect(address: string, runner?: ContractRunner | null): ILayerZeroComposer;
}

declare class ILayerZeroEndpointV2__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "ComposeDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposeSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeAlert";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveAlert";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "LzTokenSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "PacketDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encodedPayload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sendLibrary";
            readonly type: "address";
        }];
        readonly name: "PacketSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketVerified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "clear";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "composeQueue";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "executable";
        readonly outputs: readonly [{
            readonly internalType: "enum ExecutionState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "hasPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "payInLzToken";
                readonly type: "bool";
            }];
            readonly internalType: "struct MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "payInLzToken";
                readonly type: "bool";
            }];
            readonly internalType: "struct MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "sendCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_timeout";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }];
        readonly name: "setLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroEndpointV2Interface;
    static connect(address: string, runner?: ContractRunner | null): ILayerZeroEndpointV2;
}

declare class ILayerZeroReceiver__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroReceiverInterface;
    static connect(address: string, runner?: ContractRunner | null): ILayerZeroReceiver;
}

declare class IMessageLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_config";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IMessageLibInterface;
    static connect(address: string, runner?: ContractRunner | null): IMessageLib;
}

declare class IMessageLibManager__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_timeout";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMessageLibManagerInterface;
    static connect(address: string, runner?: ContractRunner | null): IMessageLibManager;
}

declare class IMessagingChannel__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "hasPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMessagingChannelInterface;
    static connect(address: string, runner?: ContractRunner | null): IMessagingChannel;
}

declare class IMessagingComposer__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "ComposeDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposeSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeAlert";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "composeQueue";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "sendCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMessagingComposerInterface;
    static connect(address: string, runner?: ContractRunner | null): IMessagingComposer;
}

declare class IMessagingContext__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IMessagingContextInterface;
    static connect(address: string, runner?: ContractRunner | null): IMessagingContext;
}

declare class ISendLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "encodedPacket";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_config";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ISendLibInterface;
    static connect(address: string, runner?: ContractRunner | null): ISendLib;
}

type index$8_ILayerZeroComposer__factory = ILayerZeroComposer__factory;
declare const index$8_ILayerZeroComposer__factory: typeof ILayerZeroComposer__factory;
type index$8_ILayerZeroEndpointV2__factory = ILayerZeroEndpointV2__factory;
declare const index$8_ILayerZeroEndpointV2__factory: typeof ILayerZeroEndpointV2__factory;
type index$8_ILayerZeroReceiver__factory = ILayerZeroReceiver__factory;
declare const index$8_ILayerZeroReceiver__factory: typeof ILayerZeroReceiver__factory;
type index$8_IMessageLibManager__factory = IMessageLibManager__factory;
declare const index$8_IMessageLibManager__factory: typeof IMessageLibManager__factory;
type index$8_IMessageLib__factory = IMessageLib__factory;
declare const index$8_IMessageLib__factory: typeof IMessageLib__factory;
type index$8_IMessagingChannel__factory = IMessagingChannel__factory;
declare const index$8_IMessagingChannel__factory: typeof IMessagingChannel__factory;
type index$8_IMessagingComposer__factory = IMessagingComposer__factory;
declare const index$8_IMessagingComposer__factory: typeof IMessagingComposer__factory;
type index$8_IMessagingContext__factory = IMessagingContext__factory;
declare const index$8_IMessagingContext__factory: typeof IMessagingContext__factory;
type index$8_ISendLib__factory = ISendLib__factory;
declare const index$8_ISendLib__factory: typeof ISendLib__factory;
declare namespace index$8 {
  export {
    index$8_ILayerZeroComposer__factory as ILayerZeroComposer__factory,
    index$8_ILayerZeroEndpointV2__factory as ILayerZeroEndpointV2__factory,
    index$8_ILayerZeroReceiver__factory as ILayerZeroReceiver__factory,
    index$8_IMessageLibManager__factory as IMessageLibManager__factory,
    index$8_IMessageLib__factory as IMessageLib__factory,
    index$8_IMessagingChannel__factory as IMessagingChannel__factory,
    index$8_IMessagingComposer__factory as IMessagingComposer__factory,
    index$8_IMessagingContext__factory as IMessagingContext__factory,
    index$8_ISendLib__factory as ISendLib__factory,
  };
}

type ErrorsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Errors__factory extends ContractFactory {
    constructor(...args: ErrorsConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<Errors & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): Errors__factory;
    static readonly bytecode = "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122020fe0da502373999de19cc206a18f2b051ba8876d7381727064a65ead9b9aa0d64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ComposeExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "ComposeNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DefaultReceiveLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DefaultSendLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requiredNative";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "suppliedNative";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredLzToken";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "suppliedLzToken";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "required";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "supplied";
            readonly type: "uint256";
        }];
        readonly name: "InvalidAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidArgument";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidExpiry";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InvalidNonce";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidReceiveLibrary";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidSizeForAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyAltToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyNonDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyReceiveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyRegisteredLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyRegisteredOrDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySendLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "PayloadHashNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "SameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "SendReentrancy";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UnsupportedInterface";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ZeroLzTokenFee";
        readonly type: "error";
    }];
    static createInterface(): ErrorsInterface;
    static connect(address: string, runner?: ContractRunner | null): Errors;
}

type TransferConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Transfer__factory extends ContractFactory {
    constructor(...args: TransferConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<Transfer & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): Transfer__factory;
    static readonly bytecode = "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220034e5c435511ee7b2c01010e82a040e0cc4e84e428c5d1453ba721c8b0b6a7b064736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }];
    static createInterface(): TransferInterface;
    static connect(address: string, runner?: ContractRunner | null): Transfer;
}

type index$7_Errors__factory = Errors__factory;
declare const index$7_Errors__factory: typeof Errors__factory;
type index$7_Transfer__factory = Transfer__factory;
declare const index$7_Transfer__factory: typeof Transfer__factory;
declare namespace index$7 {
  export {
    index$7_Errors__factory as Errors__factory,
    index$7_Transfer__factory as Transfer__factory,
  };
}

type ExecutorOptionsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ExecutorOptions__factory extends ContractFactory {
    constructor(...args: ExecutorOptionsConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ExecutorOptions & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): ExecutorOptions__factory;
    static readonly bytecode = "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212208d71cd1b814bf13b1f3cdcf142ed8e1b9c7283ae3cb94496c775b7ec62b42cf264736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidLzComposeOption";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLzReceiveOption";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidNativeDropOption";
        readonly type: "error";
    }];
    static createInterface(): ExecutorOptionsInterface;
    static connect(address: string, runner?: ContractRunner | null): ExecutorOptions;
}

type index$6_ExecutorOptions__factory = ExecutorOptions__factory;
declare const index$6_ExecutorOptions__factory: typeof ExecutorOptions__factory;
declare namespace index$6 {
  export {
    index$6_ExecutorOptions__factory as ExecutorOptions__factory,
  };
}

type BlockedMessageLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class BlockedMessageLib__factory extends ContractFactory {
    constructor(...args: BlockedMessageLibConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<BlockedMessageLib & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): BlockedMessageLib__factory;
    static readonly bytecode = "0x60808060405234610016576101d0908161001c8239f35b600080fdfe60806040908082526004361015610045575b503461004057600490517fd6234725000000000000000000000000000000000000000000000000000000008152fd5b600080fd5b600090813560e01c90816301ffc9a7146100f6575080631881d94d146100da57806354fd4d50146100a957636750cd4c036100115790346100a55760206003193601126100a55760043563ffffffff8116036100a5576020905160018152f35b5080fd5b5090346100a557816003193601126100a557806002606092519167ffffffffffffffff835260ff6020840152820152f35b5090346100a557816003193601126100a5576020905160028152f35b9050346100a55760206003193601126100a5576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361019657602092507f97f0258400000000000000000000000000000000000000000000000000000000811490811561016c575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483610165565b8280fdfea26469706673582212208ab35b37910f030dd558ed99e904687530ed8a07713d95eb657134cf419cb3da64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "NotImplemented";
        readonly type: "error";
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): BlockedMessageLibInterface;
    static connect(address: string, runner?: ContractRunner | null): BlockedMessageLib;
}

type SimpleMessageLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class SimpleMessageLib__factory extends ContractFactory {
    constructor(...args: SimpleMessageLibConstructorParams);
    getDeployTransaction(_endpoint: AddressLike, _treasury: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_endpoint: AddressLike, _treasury: AddressLike, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<SimpleMessageLib & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): SimpleMessageLib__factory;
    static readonly bytecode = "0x60e080604052346200017657604081620018aa80380380916200002382856200017b565b83398101031262000176576200004760206200003f83620001b5565b9201620001b5565b60008054336001600160a01b0319821681178355604051949293602093869360049385936001600160a01b03939290919084167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08a80a3608082905260a05263416ecebf60e01b8352165afa9182156200016957819262000118575b8260c052606360025560646003556040516116df9081620001cb82396080518181816101b90152818161078c01528181610a4001528181610b0f0152610ea2015260a051816109ef015260c051816108d20152f35b9091506020813d60201162000160575b8162000137602093836200017b565b810103126200015c57519063ffffffff821682036200015957503880620000c3565b80fd5b5080fd5b3d915062000128565b50604051903d90823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200019f57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001765756fe6080604081815260049182361015610041575b50361561003f57517fd6234725000000000000000000000000000000000000000000000000000000008152fd5b005b60009060e08235811c91826301ffc9a71461101b5750816312cc947f14610deb5781631881d94d14610dcf5781631c7c294e14610d9a578163334993ff14610d735781634389e58f14610a8c57816354fd4d5014610a645781635e280f1114610a1357816361d027b3146109c25781636251b637146109a65781636750cd4c14610975578163715018a6146108f657816372607537146108b557816372d71322146108805781638da5cb5b1461084d5781638f58aa7a1461071f5781639095323814610700578163996f79c0146106e1578163aec336e61461067d578163d80e9bd9146105df57508063dabca063146103f4578063f2fde38b146102d85763fd9be522036100125791346102d457816003193601126102d457610162611367565b916024359061016f6113b6565b73ffffffffffffffffffffffffffffffffffffffff808516156102ac5781517fe1758bd80000000000000000000000000000000000000000000000000000000081526020818681857f0000000000000000000000000000000000000000000000000000000000000000165afa9081156102a2578791610273575b50168061026257508480808085885af16102016115ad565b501561020e575050505080f35b517f2c024f9200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909316918301918252602082015281906040010390fd5b0390fd5b905061027093919250611435565b80f35b610295915060203d60201161029b575b61028d8183611133565b81019061138a565b386101e9565b503d610283565b83513d89823e3d90fd5b8382517f3d3496e1000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b5091346102d45760206003193601126102d4576102f3611367565b906102fc6113b6565b73ffffffffffffffffffffffffffffffffffffffff809216928315610371575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8382346105dc5760209160206003193601126105d85767ffffffffffffffff81358181116105d45761042990369084016111a9565b936104326113b6565b84519182116105a857610445835461122f565b601f8111610546575b50602090601f83116001146104a8575083948293949261049d575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c191617905580f35b015190508480610469565b90601f198316958486527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9286905b88821061052e575050836001959697106104f7575b505050811b01905580f35b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690558480806104ec565b806001859682949686015181550195019301906104d7565b8385527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c8101916020851061059e575b601f0160051c01905b818110610593575061044e565b858155600101610586565b909150819061057d565b6024846041857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8380fd5b5080fd5b80fd5b849150346102d457600319906060823601126105d45767ffffffffffffffff91833583811161067957360301126102d4576024359081116102d457610626913691016110ba565b50506106306111c7565b90600060208451610640816110e8565b8281520152600354911561067457506002545b60208351610660816110e8565b838152019081528251918252516020820152f35b610653565b8580fd5b82346105dc5760206003193601126105dc5773ffffffffffffffffffffffffffffffffffffffff6106ac611367565b6106b46113b6565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600154161760015580f35b8284346105d857816003193601126105d8576020906003549051908152f35b8284346105d857816003193601126105d8576020906002549051908152f35b505090346105d857806003193601126105d85761073a611367565b6107426113b6565b73ffffffffffffffffffffffffffffffffffffffff808216156108255782517fe4fe1d940000000000000000000000000000000000000000000000000000000081526020818781857f0000000000000000000000000000000000000000000000000000000000000000165afa90811561081b5785916107fc575b50169182156107d45750906102709160243591611435565b8490517f54c1781b000000000000000000000000000000000000000000000000000000008152fd5b610815915060203d60201161029b5761028d8183611133565b386107bc565b84513d87823e3d90fd5b8483517f3d3496e1000000000000000000000000000000000000000000000000000000008152fd5b8284346105d857816003193601126105d85773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b8284346105d857816003193601126105d8576108b19061089e611282565b90519182916020835260208301906111f9565b0390f35b8284346105d857816003193601126105d8576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b82346105dc57806003193601126105dc5761090f6113b6565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b838584346105dc5760206003193601126105dc57503563ffffffff8116036109a1576020905160018152f35b600080fd5b8284346105d857816003193601126105d8576020905160018152f35b8284346105d857816003193601126105d8576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8284346105d857816003193601126105d8576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8284346105d857816003193601126105d8579060028260609351928084526020840152820152f35b838584346105dc576003196060813601126105d85782359467ffffffffffffffff918287116105d457819087360301126102d4576024358281116105d457610ad790369086016111a9565b91610ae06111c7565b94600060208851610af0816110e8565b828152015273ffffffffffffffffffffffffffffffffffffffff9033827f00000000000000000000000000000000000000000000000000000000000000001603610d4c5787519380850185811085821117610d1e578952898201358481168103610d1a578552610b6260248b0161121e565b99602086019a8b5260448101359380851685036109a1578a8701948552610b8b6064830161121e565b916060880192835260808801946084820135865260a089019760a4830135895260c4830135908111610d1657958d9e957fffffffffffffffff0000000000000000000000000000000000000000000000009a956108b19e9f95610bfe610cf99e9c96610ca99c9660919c369201016111a9565b978860c082015251985194511690519251945195519b8c987f010000000000000000000000000000000000000000000000000000000000000060208b015260c01b1660218901527fffffffff000000000000000000000000000000000000000000000000000000008094831b166029890152602d8801521b16604d85015260518401526071830152610c9981518092602086860191016111d6565b8101036071810185520183611133565b8051610d105750610cb8611282565b925b6003549515610d0757506080600254965b60208151610cd8816110e8565b888152019788528051978897885251602088015286015260808501906111f9565b9083820360608501526111f9565b60809096610ccb565b92610cba565b8b80fd5b8780fd5b6041837f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b87517f7eb966c8000000000000000000000000000000000000000000000000000000008152fd5b828585346102d4576003193601126105d857610d8d6113b6565b3560035560243560025580f35b8284346105d857816003193601126105d85760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b8284346105d857816003193601126105d8576020905160028152f35b90508284346105d45760206003193601126105d45767ffffffffffffffff813581811161067957610e1f90369084016110ba565b73ffffffffffffffffffffffffffffffffffffffff959186600154168015159081611010575b50610fe85781600d11610d1a5781602d11610d1a5781600911610d1a578551926060840184811086821117610fbc5790899493929188526009820135901c83526020830197600d820135895287840191600181013560c01c8352817f0000000000000000000000000000000000000000000000000000000000000000169380605111610fb857610efc907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf36910160518401611172565b6020815191012092843b15610fb85787908a519b8c977fa825d7470000000000000000000000000000000000000000000000000000000089525163ffffffff168b8901525160248801525116604486015260310135166064840152608483015281835a9260a493f18015610fae57610f72578480f35b8311610f82575052818080808480f35b8360416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b83513d87823e3d90fd5b8680fd5b60248a6041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8486517f70b216ec000000000000000000000000000000000000000000000000000000008152fd5b905033141589610e45565b839086346102d45760206003193601126102d457357fffffffff0000000000000000000000000000000000000000000000000000000081168091036102d457602092507f97f02584000000000000000000000000000000000000000000000000000000008114908115611090575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483611089565b9181601f840112156109a15782359167ffffffffffffffff83116109a157602083818601950101116109a157565b6040810190811067ffffffffffffffff82111761110457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff82111761110457604052565b67ffffffffffffffff811161110457601f01601f191660200190565b92919261117e82611156565b9161118c6040519384611133565b8294818452818301116109a1578281602093846000960137010152565b9080601f830112156109a1578160206111c493359101611172565b90565b6044359081151582036109a157565b60005b8381106111e95750506000910152565b81810151838201526020016111d9565b90601f19601f602093611217815180928187528780880191016111d6565b0116010190565b359063ffffffff821682036109a157565b90600182811c92168015611278575b602083101461124957565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f169161123e565b60405190600082600454916112968361122f565b8083529260209060019081811690811561132457506001146112c3575b50506112c192500383611133565b565b91509260046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b936000925b82841061130c57506112c194505050810160200138806112b3565b855488850183015294850194879450928101926112f1565b9050602093506112c19592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010138806112b3565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036109a157565b908160209103126109a1575173ffffffffffffffffffffffffffffffffffffffff811681036109a15790565b73ffffffffffffffffffffffffffffffffffffffff6000541633036113d757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602080830191825273ffffffffffffffffffffffffffffffffffffffff9485166024840152604480840196909652948252926114ea9261149a606484611133565b16604051916114a8836110e8565b8583527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656486840152600080958192519082855af16114e46115ad565b916115dd565b805191821591848315611589575b5050509050156115055750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9193818094500103126105d8578201519081151582036105dc5750803880846114f8565b3d156115d8573d906115be82611156565b916115cc6040519384611133565b82523d6000602084013e565b606090565b9192901561165857508151156115f1575090565b3b156115fa5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b82519091501561166b5750805190602001fd5b61025e906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260248301906111f956fea2646970667358221220fcb49cd576f17f4a3ef7d878688712c29e0912715244be185382b9004d47f0bd64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "expected";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "actual";
            readonly type: "address";
        }];
        readonly name: "InvalidEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzTokenIsAddressZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotImplemented";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyEndpoint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyWhitelistCaller";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToIsAddressZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "PACKET_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultOption";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "localEid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzTokenFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageLibType";
        readonly outputs: readonly [{
            readonly internalType: "enum MessageLibType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "fee";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "encodedPacket";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_defaultOption";
            readonly type: "bytes";
        }];
        readonly name: "setDefaultOption";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_lzTokenFee";
            readonly type: "uint256";
        }];
        readonly name: "setMessagingFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_whitelistCaller";
            readonly type: "address";
        }];
        readonly name: "setWhitelistCaller";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "packetBytes";
            readonly type: "bytes";
        }];
        readonly name: "validatePacket";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "whitelistCaller";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): SimpleMessageLibInterface;
    static connect(address: string, runner?: ContractRunner | null): SimpleMessageLib;
}

type index$5_BlockedMessageLib__factory = BlockedMessageLib__factory;
declare const index$5_BlockedMessageLib__factory: typeof BlockedMessageLib__factory;
type index$5_SimpleMessageLib__factory = SimpleMessageLib__factory;
declare const index$5_SimpleMessageLib__factory: typeof SimpleMessageLib__factory;
declare namespace index$5 {
  export {
    index$5_BlockedMessageLib__factory as BlockedMessageLib__factory,
    index$5_SimpleMessageLib__factory as SimpleMessageLib__factory,
    index$6 as libs,
  };
}

type EndpointV2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class EndpointV2__factory extends ContractFactory {
    constructor(...args: EndpointV2ConstructorParams);
    getDeployTransaction(_eid: BigNumberish, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(_eid: BigNumberish, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<EndpointV2 & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): EndpointV2__factory;
    static readonly bytecode = "0x60c0604081815234620002c75781620049928038038091620000228285620002cc565b8339602093849181010312620002c757519163ffffffff83168303620002c757600080546001600160a01b0319808216339081178455855193966001600160a01b0394929390919085167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08980a36080526101ec818101906001600160401b03821183831017620002b357908291620047a68339039086f08015620002a9578216918260a052339086541603620002675783516301ffc9a760e01b81526325fc096160e21b60048083019190915295908481602481875afa9081156200025d5782916200021c575b50156200020c578281526005845260ff8582205416620001fc5782815260058452848120805460ff1916600117905585549068010000000000000000821015620001e95760018201808855821015620001d6579084827f6b374d56679ca9463f27c85c6311e2bb7fde69bf201d3da39d53f10bd9d78af597988694522001918254161790558351908152a16001600d555161449f9081620003078239608051818181610b8e01528181610bd5015281816117db015281816129620152612c40015260a0518161229b0152f35b634e487b7160e01b815260328752602490fd5b634e487b7160e01b815260418752602490fd5b8451630ea075bf60e21b81528690fd5b84516331d5783360e11b81528690fd5b90508481813d831162000255575b620002368183620002cc565b8101031262000251575180151581036200025157386200010a565b5080fd5b503d6200022a565b86513d84823e3d90fd5b60648385519062461bcd60e51b825280600483015260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b84513d87823e3d90fd5b634e487b7160e01b88526041600452602488fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620002f057604052565b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60009060e08235811c9182630c0c389e1461333a5750816314f651a9146132dd57816320efd722146130ac5781632637a45014612b5a5781632b3197b914612a3d57816335d330b0146129ca578163402f846814612986578163416ecebf146129455781634b4b2efb146129085781635b17bb70146128b657816366bf43d6146126495781636750cd4c146125e7578163697fe6b6146124c95781636bf73fa3146123b2575080636e83f5bb146123645780636f50a80314612326578063715018a6146122bf578063733180911461227b57806379624ca9146122595780637cb59012146121155780638da5cb5b146120ef5780639132e5c31461202957806391d20fa114611e11578063965183d414611d5b5780639c6d734014611d095780639d7f977514611cc7578063a0dd43fc14611c9b578063a718531b14611a04578063a7229fd9146119b2578063a825d74714611808578063aafe5e0714611781578063aafea3121461156f578063b8849ac914611203578063b96a277f146111cb578063c28e0eed14611154578063c9a54a99146110ce578063c9fc7bcd1461106d578063d4b4ec8f14610dc4578063dc706a6214610d87578063dc93c8a214610d30578063ddc28c5814610acb578063e16f964d14610822578063e1758bd814610806578063e361b59c1461079c578063e4fe1d9414610775578063e8964e811461051e578063eaeacd6314610408578063ef667aa11461038a578063f2fde38b146102895763f64be4c71461024957600080fd5b34610286576020600319360112610286576001600160a01b03604060209263ffffffff6102746135a6565b16815260098452205416604051908152f35b80fd5b5034610286576020600319360112610286576102a36134f3565b6102ab614047565b6001600160a01b03809116908115610306576000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b5034610286576040600319360112610286576103a46134f3565b9063ffffffff60406103b4613593565b926001600160a01b038095168152600860205220911660005260205260016040600020918254169101549061040460405192839283602090939291936001600160a01b0360408201951681520152565b0390f35b5034610286576060600319360112610286576104226135a6565b6024356044359067ffffffffffffffff8083168093036105195761044f61044a838633613bd6565b613cce565b1682036104e857916080917f28f40053783033ef755556a0c3315379141f51a33aed8334174ffbadd90bde4893338652600160205263ffffffff6040872093169283600052602052604060002081875260205260408620827fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000082541617905560405192835260208301523360408301526060820152a180f35b602482604051907f5c33785a0000000000000000000000000000000000000000000000000000000082526004820152fd5b600080fd5b50346102865760209081600319360112610286576001600160a01b036105426134f3565b61054a614047565b16916040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f97f025840000000000000000000000000000000000000000000000000000000060048201528181602481875afa90811561076a57839161073d575b5015610713578282526005815260ff6040832054166106e957828252600581526040822060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905560045492680100000000000000008410156106bc57600184018060045584101561068f57829360047f6b374d56679ca9463f27c85c6311e2bb7fde69bf201d3da39d53f10bd9d78af594527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018173ffffffffffffffffffffffffffffffffffffffff19825416179055604051908152a180f35b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b60046040517f3a81d6fc000000000000000000000000000000000000000000000000000000008152fd5b60046040517f63aaf066000000000000000000000000000000000000000000000000000000008152fd5b61075d9150823d8411610763575b61075581836137e8565b810190613adf565b386105ae565b503d61074b565b6040513d85823e3d90fd5b503461028657806003193601126102865760206001600160a01b03600e5416604051908152f35b50346102865760206107fc6107b0366136ca565b929190604093916001600160a01b03600094168452600260205263ffffffff8585209116845260205283832090835260205267ffffffffffffffff838320911682526020522054151590565b6040519015158152f35b5034610286578060031936011261028657602090604051908152f35b50346102865760406003193601126102865761083c6135a6565b6001600160a01b03908161084e613509565b16918284526020906005825260ff6040862054161580610ac2575b610a98578390811515806109e0575b610937575b3386526006835263ffffffff60408720941693846000528352604060002054161461090d577f4cff966ebee29a156dcb34cf72c1d06231fb1777f6bdf6e8089819232f002b1c92606092338652600683526040862081600052835260406000208273ffffffffffffffffffffffffffffffffffffffff19825416179055604051923384528301526040820152a180f35b60046040517fc23f6ccb000000000000000000000000000000000000000000000000000000008152fd5b90506040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff841660048201528281602481885afa9081156109d55786916109b8575b501561098e57839061087d565b60046040517f9153304b000000000000000000000000000000000000000000000000000000008152fd5b6109cf9150833d85116107635761075581836137e8565b38610981565b6040513d88823e3d90fd5b91506040517f1881d94d0000000000000000000000000000000000000000000000000000000081528381600481895afa8015610a8d576001918891610a60575b50610a2a81613623565b14610a36578491610878565b60046040517f3885d603000000000000000000000000000000000000000000000000000000008152fd5b610a809150853d8711610a86575b610a7881836137e8565b810190613ac7565b38610a20565b503d610a6e565b6040513d89823e3d90fd5b60046040517f4fb58e15000000000000000000000000000000000000000000000000000000008152fd5b50831515610869565b503461028657610ada3661354d565b9060006020604051610aeb816137cc565b8281520152610afc608082016138e8565b80610d1d575b610cf35760806040916001600160a01b03610c2f8582610bcc97168852600360205285882063ffffffff610b3586613729565b166000526020528560002060208501358952602052610c1b610b6367ffffffffffffffff888b205416613cce565b67ffffffffffffffff610b7587613729565b63ffffffff610bb360208a0135610b8b8b613729565b887f0000000000000000000000000000000000000000000000000000000000000000886140b9565b91610bc08c8b018b613d60565b9490958d519e8f613794565b168d528c6020837f0000000000000000000000000000000000000000000000000000000000000000169101528c8c8a89169101521660608c01526020880135898c015260a08b01523691613af7565b60c0880152610c2984613729565b90613ce7565b1690610c4a610c416060830183613d60565b949092016138e8565b94610c838551968795869485947fd80e9bd900000000000000000000000000000000000000000000000000000000865260048601613dd9565b03915afa908115610ce8578291610caa575b60408260208251918051835201516020820152f35b905060403d604011610ce1575b610cc181836137e8565b8101916040828403126102865750604091610cdb91613db1565b38610c95565b503d610cb7565b6040513d84823e3d90fd5b60046040517f5373352a000000000000000000000000000000000000000000000000000000008152fd5b506001600160a01b03600e541615610b02565b503461028657604060031936011261028657602090610d4d6134f3565b9063ffffffff6040610d5d613593565b926001600160a01b0380951681526006865220911660005282526040600020541615604051908152f35b50346102865760206003193601126102865760ff60406020926001600160a01b03610db06134f3565b168152600584522054166040519015158152f35b503461028657610dd336613693565b916001600160a01b0382168085526020906005825260ff604087205416156110435780151580610fa7575b610f13575b610e0b614047565b84610e8357507f55b28633cdb29709386f555dfc54418592ad475ce7a65a78ac5928af60ffb8f893600b610e7d9263ffffffff8516885252600060016040882082815501555b604051938493846001600160a01b0360409295949363ffffffff60608401971683521660208201520152565b0390a180f35b9343811115610ee9578060017f55b28633cdb29709386f555dfc54418592ad475ce7a65a78ac5928af60ffb8f896600b610e7d9563ffffffff88168b5252604089209073ffffffffffffffffffffffffffffffffffffffff198254161781550155610e51565b60046040517fd36c8500000000000000000000000000000000000000000000000000000000008152fd5b6040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff841660048201528281602481855afa908115610a8d578791610f8a575b50610e035760046040517f9153304b000000000000000000000000000000000000000000000000000000008152fd5b610fa19150833d85116107635761075581836137e8565b38610f5b565b6040517f1881d94d0000000000000000000000000000000000000000000000000000000081528381600481865afa90811561103857889161101b575b50610fed81613623565b610dfe5760046040517f78653622000000000000000000000000000000000000000000000000000000008152fd5b6110329150843d8611610a8657610a7881836137e8565b38610fe3565b6040513d8a823e3d90fd5b60046040517f8cd5e2c6000000000000000000000000000000000000000000000000000000008152fd5b50346102865767ffffffffffffffff60406001600160a01b0392611090366136ca565b969092168352600260205263ffffffff8484209116600052602052826000209082526020522091166000526020526020604060002054604051908152f35b503461028657600319360160808112611150576060136102865760206107fc6110f56134dd565b6110fd613716565b9061110661373a565b916024359190916040926001600160a01b03600093168352600160205263ffffffff8484209116835260205282822090825260205267ffffffffffffffff91829120541691161190565b5080fd5b5034610286576020600319360112610286577fd476ec5ec1ac11cec3714d41e7ea49419471aceb9bd0dff1becfc3e363a6239660206001600160a01b036111996134f3565b6111a1614047565b168073ffffffffffffffffffffffffffffffffffffffff19600e541617600e55604051908152a180f35b50346102865760406003193601126102865760206111f26111ea6134f3565b610c29613593565b6001600160a01b0360405191168152f35b50346102865761121236613693565b90916001600160a01b03809316928385526020926005845260ff6040872054161580611566575b610a98578415938415806114ca575b611436575b338752600781526040872063ffffffff85169081600052825283604060002054169587871461090d5733895260078352604089208260005283527fc0833c35bb1d0beadca36bed54c7098819e109542a6d233d33c7c2039c8ec9aa608060406000209973ffffffffffffffffffffffffffffffffffffffff199a818c8254161790556040519033825285878301528a60408301526060820152a183156113d25786159081156113ca575b506113a0577f661366f82fca66289bddc34462b3ab39d252b761599537d722a632d1bb066b8e96610e7d9461132e60019543613c92565b926040519461133c866137cc565b898652808601948552338c526008815260408c20916000525260406000209351169083541617825551918291015560405193849333859060609295949363ffffffff60808401976001600160a01b0380941685521660208401521660408201520152565b60046040517f78142dd2000000000000000000000000000000000000000000000000000000008152fd5b9050386112f7565b50915092507f661366f82fca66289bddc34462b3ab39d252b761599537d722a632d1bb066b8e94506080939150338652600883526040862081600052835260006001604082208281550155604051923384528301526040820152836060820152a180f35b6040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff8516600482015281816024818a5afa9081156110385788916114ad575b5061124d5760046040517f9153304b000000000000000000000000000000000000000000000000000000008152fd5b6114c49150823d84116107635761075581836137e8565b3861147e565b6040517f1881d94d00000000000000000000000000000000000000000000000000000000815282816004818b5afa90811561155b57899161153e575b5061151081613623565b6112485760046040517f78653622000000000000000000000000000000000000000000000000000000008152fd5b6115559150833d8511610a8657610a7881836137e8565b38611506565b6040513d8b823e3d90fd5b50841515611239565b5034610286576040600319360112610286576115896135a6565b611591613509565b611599614047565b6001600160a01b03918282168085526020936005855260ff6040872054161561104357811515806116ed575b611659575b8163ffffffff841691828852600987526040882054161461090d577f16aa0f528038ab41019e95bae5b418a50ba8532c5800e3b7ea2f517d3fa625f594600991875252604085209073ffffffffffffffffffffffffffffffffffffffff19825416179055610e7d604051928392839092916001600160a01b0360209163ffffffff604085019616845216910152565b6040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff841660048201528581602481865afa908115610a8d5787916116d0575b506115ca5760046040517f9153304b000000000000000000000000000000000000000000000000000000008152fd5b6116e79150863d88116107635761075581836137e8565b386116a1565b6040517f1881d94d0000000000000000000000000000000000000000000000000000000081528681600481875afa8015611038576001918991611764575b5061173581613623565b036115c55760046040517f3885d603000000000000000000000000000000000000000000000000000000008152fd5b61177b9150883d8a11610a8657610a7881836137e8565b3861172b565b50346102865761180067ffffffffffffffff60209260406117d96117a43661365c565b95919390946001600160a01b03851681526003895281812063ffffffff87166000528952816000208782528952205416613cce565b7f0000000000000000000000000000000000000000000000000000000000000000906140b9565b604051908152f35b503461028657600319360160a08112611150576060136102865761182a6134dd565b60843590611841611839613716565b339083613b2e565b156119885761184e613716565b6118a5602435918261185e61373a565b918590916040926001600160a01b03600093168352600160205263ffffffff8484209116835260205282822090825260205267ffffffffffffffff91829120541691161190565b15611946577f0d87345f3d1c929caba93e1c3821b54ff3512e12b66aa3cfe54b6bcbc17e59b49260a0926118d7613716565b926001600160a01b036118e861373a565b921693848852600260205263ffffffff604089209116600052602052604060002090875260205267ffffffffffffffff60408720911660005260205280604060002055604051916119388361380b565b60608301526080820152a180f35b602461195061373a565b67ffffffffffffffff604051917f5c33785a000000000000000000000000000000000000000000000000000000008352166004820152fd5b60046040517f82ceb50e000000000000000000000000000000000000000000000000000000008152fd5b5034610286576060600319360112610286576119cc6134f3565b6119d4613509565b604435906119e0614047565b6001600160a01b0383166119fb576119f89250614188565b80f35b6119f892614224565b503461028657611a1336613693565b9091611a1d614047565b6001600160a01b038093168085526020926005845260ff604087205416156110435781151580611c0a575b611b76575b63ffffffff831694858752600a85526040872054169382851461090d57857f55b28633cdb29709386f555dfc54418592ad475ce7a65a78ac5928af60ffb8f8968852600a82527f9914edfad6b7eac2e388f49bae232bd0e1954fbe92f5ed1ab975fc270f27cea5606060408a209573ffffffffffffffffffffffffffffffffffffffff199681888254161790556040519084825289868301526040820152a18215611b4657600192600b610e7d9593611b15938b52528660408a209384541617835543613c92565b9182910155604051938493846001600160a01b0360409295949363ffffffff60608401971683521660208201520152565b935090506060939150828652600b815260006001604088208281550155604051928352820152836040820152a180f35b6040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff841660048201528481602481865afa908115610a8d578791611bed575b50611a4d5760046040517f9153304b000000000000000000000000000000000000000000000000000000008152fd5b611c049150853d87116107635761075581836137e8565b38611bbe565b6040517f1881d94d0000000000000000000000000000000000000000000000000000000081528581600481875afa908115611038578891611c7e575b50611c5081613623565b611a485760046040517f78653622000000000000000000000000000000000000000000000000000000008152fd5b611c959150863d8811610a8657610a7881836137e8565b38611c46565b5034610286576020611cb5611caf3661365c565b91613bd6565b67ffffffffffffffff60405191168152f35b503461028657606060031936011261028657611ce16134f3565b611ce9613593565b906044356001600160a01b0381168103610519576020926107fc92613b2e565b50346102865767ffffffffffffffff60406020926001600160a01b03611d2e3661365c565b9290911683526003865263ffffffff84842091166000528552826000209082528452205416604051908152f35b503461028657600319360160a08112611150576060136102865760843567ffffffffffffffff8111611150576040611dc6611d9d611de193369060040161351f565b9290838251948592606435602085015284840137810186838201520360208101845201826137e8565b611dce613716565b611dd661373a565b906024359033613e6d565b507f3cd5e48f9730b129dc7550f0fcea9c767b7be37837cd10e55eb35f734f4bca0460405180610e7d3382613863565b5060031960c08136011261115057611e276134f3565b90611e30613509565b91604435611e3c613612565b9167ffffffffffffffff60843581811161202557611e5e90369060040161351f565b95909160a43590811161202157611e7990369060040161351f565b6001600160a01b0397919780951697888b52602095600c875260408c209a16998a60005286526040600020878c52865261ffff60408c20981697886000528652604060002054611eca368588613af7565b878151910120808203611fea575050908a94939291898652600c8752604086208b6000528752604060002088875287526040862089600052875260016040600020558a3b15611fe65785938a92611f7a92611f6560405198899788977fd0a1026000000000000000000000000000000000000000000000000000000000895260048901528d602489015260a0604489015260a4880191613842565b92336064870152858403016084860152613842565b0381348b5af18015610ce857611fca575b507e36c98efcf9e6641dfbc9051f66f405253e8e0c2ab4a24dccda15595b7378c860808686868a8760405194855284015260408301526060820152a180f35b611fd8909594939295613751565b611fe6579091928538611f8b565b8580fd5b60449250604051917f9e3e058300000000000000000000000000000000000000000000000000000000835260048301526024820152fd5b8880fd5b8780fd5b503461028657806003193601126102865760405180916004549081835260208093018092600483527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90835b8181106120d2575050508461208b9103856137e8565b60405193838594850191818652518092526040850193925b8281106120b257505050500390f35b83516001600160a01b0316855286955093810193928101926001016120a3565b82546001600160a01b031684529286019260019283019201612075565b50346102865780600319360112610286576001600160a01b036020915416604051908152f35b50346102865760806003193601126102865761212f6134f3565b602435906044359161ffff83168093036105195760643567ffffffffffffffff81116122555761216390369060040161351f565b9190338652602092600c84526001600160a01b0360408820951694856000528452604060002083885284526040872086600052845260406000205461222b577f3d52ff888d033fd3dd1d8057da59e850c91d91a72c41dfa445b247dfedeb6dc195610e7d936121d3368486613af7565b868151910120338a52600c875260408a208860005287526040600020828b52875260408a208360005287526040600020556040519687963388528701526040860152606085015260a0608085015260a0840191613842565b60046040517f895fdbee000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b503461028657806003193601126102865760206001600d541415604051908152f35b503461028657806003193601126102865760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346102865780600319360112610286576122d8614047565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610286576020600319360112610286576001600160a01b03604060209263ffffffff6123526135a6565b168152600a8452205416604051908152f35b50346102865760206003193601126102865760409063ffffffff6123866135a6565b168152600b60209081529190208054600190910154604080516001600160a01b03909316835292820152f35b90503461115057600319360161014081126124c557606013611150576123d66134dd565b9067ffffffffffffffff60e435818111612255576123f890369060040161351f565b610104358381116124c15761241190369060040161351f565b61012495919535948511612025576124a06124bb926124557f7edfa10fe10193301ad8a8bea7e968c7bcabcc64981f368e3aeada40ce26ae2c97369060040161351f565b93909861249360405198899861012061246d8b61380b565b60843560608c015260a43560808c015260c43560a08c01528060c08c01528a0191613842565b9287840390880152613842565b908382036101008501526001600160a01b0333981696613842565b0390a380f35b8680fd5b8280fd5b90503461115057610120600319360112611150576124e56134f3565b6124ed613509565b916124f6613612565b9067ffffffffffffffff9060c4358281116124c15761251990369060040161351f565b93909160e4358481116120215761253490369060040161351f565b919093610104359586116125e3576125c861ffff956125dd946125ba61257f7f8a0b1dce321c5c5fb42349bce46d18087c04140de520917661fb923e44a904b99a369060040161351f565b95909b6001600160a01b03976040519b8c9b6044358d521660208c015260843560408c015260a43560608c01528060808c01528a0191613842565b9187830360a0890152613842565b9184830360c086015280339a16981696613842565b0390a480f35b8980fd5b82346102865760206003193601126102865760209063ffffffff6126096135a6565b168152600982526001600160a01b038060408320541615159182612634575b50506040519015158152f35b6040919250600a845220541615158280612628565b82346102865761265836613693565b916001600160a01b0382168085526020906005825260ff604087205416156110435780151580612825575b612791575b6126928333613956565b90506113a0578461271f57507f661366f82fca66289bddc34462b3ab39d252b761599537d722a632d1bb066b8e93610e7d9133875260088152604087209063ffffffff851660005252600060016040822082815501555b60405193849333859060609295949363ffffffff60808401976001600160a01b0380941685521660208401521660408201520152565b9343811115610ee9578060017f661366f82fca66289bddc34462b3ab39d252b761599537d722a632d1bb066b8e96610e7d94338a526008815260408a209063ffffffff88166000525260406000209073ffffffffffffffffffffffffffffffffffffffff1982541617815501556126e9565b6040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff841660048201528281602481855afa908115610a8d578791612808575b506126885760046040517f9153304b000000000000000000000000000000000000000000000000000000008152fd5b61281f9150833d85116107635761075581836137e8565b876127d9565b6040517f1881d94d0000000000000000000000000000000000000000000000000000000081528381600481865afa908115611038578891612899575b5061286b81613623565b6126835760046040517f78653622000000000000000000000000000000000000000000000000000000008152fd5b6128b09150843d8611610a8657610a7881836137e8565b88612861565b82346102865767ffffffffffffffff60406020926001600160a01b036128db3661365c565b9290911683526001865263ffffffff84842091166000528552826000209082528452205416604051908152f35b8234610286576003193601608081126111505760601361028657602061293461292f6134dd565b6139d6565b6040519061294181613623565b8152f35b8234610286578060031936011261028657602060405163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b82346102865760406003193601126102865760406129b36129a56134f3565b6129ad613593565b90613956565b6001600160a01b0383519216825215156020820152f35b82346102865760806003193601126102865761ffff60406129e96134f3565b926129f2613509565b6129fa613612565b946001600160a01b038091168352600c60205283832091166000526020528160002060443582526020522091166000526020526020604060002054604051908152f35b823461028657608060031936011261028657612a576134f3565b90612a60613509565b916044359063ffffffff80831680930361051957606435908116809103610519576001600160a01b0380951692838552600560205260ff6040862054161561104357849360649260405197889586947f9c33abf7000000000000000000000000000000000000000000000000000000008652600486015216602484015260448301525afa908115612b4e578091612b08575b60405160208082528190610404908201856135ed565b90503d8082843e612b1981846137e8565b8201916020818403126111505780519167ffffffffffffffff8311610286575091612b48916104049301613911565b82612af2565b604051903d90823e3d90fd5b82612b643661354d565b91612b6d6138b2565b50612b7782613729565b6001600d54036130825760a01b77ffffffff0000000000000000000000000000000000000000163317600d55612baf608083016138e8565b8061306f575b610cf357612bc16138b2565b50612bcb82613729565b81612ca4612ccc602086013533845260036020526040842063ffffffff809616600052602052604060002081855260205267ffffffffffffffff876040862092835497889484600181881601167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000087161790557f000000000000000000000000000000000000000000000000000000000000000081612c6985613729565b91866001612c97612c8c88612c7d8b613729565b8d8787878133941601166140b9565b986040810190613d60565b99909a6040519d8e613794565b1601168a52166020890152336040890152166060870152608086015260a08501523691613af7565b60c0820152612ce3612cdd86613729565b33613ce7565b90612cf16060870187613d60565b612d00608089989398016138e8565b96612d3960405198899384937f4389e58f0000000000000000000000000000000000000000000000000000000085528760048601613dd9565b0381836001600160a01b0387165af1801561076a5783958491612fe4575b5060a0612dff927f1ab700d4ced0c005b164c0f789fd09fcbb0156d4c2041b8a3bfbcd961cd1567f612daa608094612db8612d968d6060810190613d60565b6040519485946060865260608601906135ed565b918483036020860152613842565b6001600160a01b03891660408301520390a101519660405197612dda896137b0565b885267ffffffffffffffff60018160208b0198160116865260408801968752016138e8565b8290612f23575b5083519586513481118015612f16575b612ecf5760808760208867ffffffffffffffff8989898985515180612ec0575b348110612eae575b506001600160a01b03600e5416918787510151908180612e9d575b85915010612e89575b505050506001600d5560405194518552511682840152518051604084015201516060820152f35b612e94930391614224565b86808080612e62565b612ea79185614224565b8a81612e59565b612eba90340382614188565b89612e3e565b612eca8184614188565b612e36565b6084908460208a0151604051927fe273c847000000000000000000000000000000000000000000000000000000008452600484015234602484015260448301526064820152fd5b5083602089015111612e16565b9150602460206001600160a01b03600e5416604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa928315612b4e578093612fad575b50508115612f835786612e06565b60046040517fe8016043000000000000000000000000000000000000000000000000000000008152fd5b909192506020823d602011612fdc575b81612fca602093836137e8565b81010312610286575051908680612f75565b3d9150612fbd565b9550503d948584823e612ff786826137e8565b606081878101031261306b5761300f86820182613db1565b9560408201519067ffffffffffffffff8211611fe657927f1ab700d4ced0c005b164c0f789fd09fcbb0156d4c2041b8a3bfbcd961cd1567f612daa6130608560a095612dff98608098019101613911565b945050509250612d57565b8380fd5b506001600160a01b03600e541615612bb5565b60046040517f9633fed3000000000000000000000000000000000000000000000000000000008152fd5b8234610286576040600319360112610286576130c66134f3565b9067ffffffffffffffff60243511610286573660236024350112156102865767ffffffffffffffff6024356004013511610286576024356004013560051b91366024848135010111611150576001600160a01b0381168252600560205260ff60408320541615611043576001600160a01b0381163b1561115057604051907f20efd72200000000000000000000000000000000000000000000000000000000825260448201336004840152604060248401526024356004013590526064808301948301016024803501845b6024356004013581106131d157858086818180880381836001600160a01b038c165af18015610ce8576131c15750f35b6131ca90613751565b6102865780f35b90917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c85820301875282357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7d6024353603018112156124c1576024350160609063ffffffff80613243602484016135b9565b168452613252604483016135b9565b16602084015260648101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbd8236030181121561202157019167ffffffffffffffff60248401351161202557602483013536036044840113612025576132cf60019383836020956040879601520190604460248201359101613842565b940197019101959095613191565b8234610286578060031936011261028657600d54906001821461333257506001600160a01b0381169060a01c63ffffffff165b6040805163ffffffff9290921682526001600160a01b03929092166020820152f35b809150613310565b90915082600319918236018481126124c5576060136111505761335b6134dd565b9367ffffffffffffffff9060843560a435838111611fe65761338190369060040161351f565b94909660c4359485116124c15761339f6133e795369060040161351f565b9590926133aa613716565b6133b261373a565b90866020840152898c60408501376133dd6040848d8d820190838201520360208101865201846137e8565b602435908d613e6d565b506001600160a01b03891694853b15612025576134639261344e6040519a8b998a9889987f13137d65000000000000000000000000000000000000000000000000000000008a5261343a60048b0161380b565b60648a0152608489015260e4880191613842565b923360a48701528584030160c4860152613842565b039134905af1801561076a576134a6575b50610e7d7f3cd5e48f9730b129dc7550f0fcea9c767b7be37837cd10e55eb35f734f4bca049160405191829182613863565b7f3cd5e48f9730b129dc7550f0fcea9c767b7be37837cd10e55eb35f734f4bca0491926134d5610e7d92613751565b929150613474565b606435906001600160a01b038216820361051957565b600435906001600160a01b038216820361051957565b602435906001600160a01b038216820361051957565b9181601f840112156105195782359167ffffffffffffffff8311610519576020838186019501011161051957565b60031990604082820112610519576004359167ffffffffffffffff8311610519578260a09203011261051957600401906024356001600160a01b03811681036105195790565b6024359063ffffffff8216820361051957565b6004359063ffffffff8216820361051957565b359063ffffffff8216820361051957565b60005b8381106135dd5750506000910152565b81810151838201526020016135cd565b90601f19601f60209361360b815180928187528780880191016135ca565b0116010190565b6064359061ffff8216820361051957565b6003111561362d57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003196060910112610519576004356001600160a01b0381168103610519579060243563ffffffff81168103610519579060443590565b60031960609101126105195760043563ffffffff8116810361051957906024356001600160a01b0381168103610519579060443590565b6003196080910112610519576004356001600160a01b0381168103610519579060243563ffffffff8116810361051957906044359060643567ffffffffffffffff811681036105195790565b60043563ffffffff811681036105195790565b3563ffffffff811681036105195790565b60443567ffffffffffffffff811681036105195790565b67ffffffffffffffff811161376557604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60e0810190811067ffffffffffffffff82111761376557604052565b6060810190811067ffffffffffffffff82111761376557604052565b6040810190811067ffffffffffffffff82111761376557604052565b90601f601f19910116810190811067ffffffffffffffff82111761376557604052565b60043563ffffffff811680910361051957815260243560208201526044359067ffffffffffffffff82168092036105195760400152565b601f8260209493601f19938186528686013760008582860101520116010190565b919091608081019260043563ffffffff8116809103610519578252602435602083015260443567ffffffffffffffff8116809103610519576060916001600160a01b0391604085015216910152565b604051906138bf826137b0565b81600081526000602082015260408051916138d9836137cc565b60008352600060208401520152565b3580151581036105195790565b67ffffffffffffffff811161376557601f01601f191660200190565b81601f82011215610519578051613927816138f5565b9261393560405194856137e8565b818452602082840101116105195761395391602080850191016135ca565b90565b916000916001600160a01b03809416600052600760205263ffffffff6040600020911660005260205282604060002054169283156139915750565b600a602052604060002054169250905081156139ac57600190565b60046040517ffbc6a95a000000000000000000000000000000000000000000000000000000008152fd5b60043563ffffffff81169182821415918261051957602435906044359367ffffffffffffffff9485811696878214159182610519576001600160a01b038716600090815260026020908152604080832063ffffffff891684528252808320898452825280832067ffffffffffffffff9490941683529290522054159081613a8b575b50613a7f576105195761051957613a6e92613bd6565b161015613a7a57600090565b600190565b50505050505050600290565b9250505060006001600160a01b038516815260016020526040812081928252602052604081208482526020528560408220541687111538613a58565b90816020910312610519575160038110156105195790565b90816020910312610519575180151581036105195790565b929192613b03826138f5565b91613b1160405193846137e8565b829481845281830111610519578281602093846000960137010152565b91613b398284613956565b6001600160a01b03928316939183168414613bcc5782602095600092600014613bac5750505063ffffffff16600052600b83526040600020905b600160405191613b82836137cc565b8354169283835201549384910152149081613ba2575b50613a7a57600090565b9050431038613b98565b16815260088552604080822063ffffffff90931682529185522090613b73565b5050505050600190565b90604092916000926001600160a01b03821684526001948594600160205281812063ffffffff8616825260205281812083825260205267ffffffffffffffff918291205416955b613c2a575b505050505090565b6001600160a01b038316600090815260026020908152604080832063ffffffff8816845282528083208584528252808320888a01851667ffffffffffffffff81168552925290912054909795969015613c8857508596959496613c1d565b9550849650613c22565b91908201809211613c9f57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90600167ffffffffffffffff80931601918211613c9f57565b91906001600160a01b03809316600052600660205263ffffffff604060002091166000526020528160406000205416918215613d205750565b60096020526040600020541691508115613d3657565b60046040517fb6f3253d000000000000000000000000000000000000000000000000000000008152fd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610519570180359067ffffffffffffffff82116105195760200191813603831361051957565b919082604091031261051957604051613dc9816137cc565b6020808294805184520151910152565b9291604092613e5760c0613e65949897986060885267ffffffffffffffff8151166060890152602081015163ffffffff80911660808a01526001600160a01b03888301511660a08a015260608201511682890152608081015160e089015260a0810151610100890152015160e06101208801526101408701906135ed565b918583036020870152613842565b931515910152565b90949391946001600160a01b03821695600094878652600194602093600185526040968789209363ffffffff831694858b528752888a20868b52875267ffffffffffffffff9283808b8d205416921698828a11613f54575b5050505050838151910120978087526002845285872082885284528587208388528452858720858852845285872054898103613f1e57508652600283528486209086528252838520908552815282842091845252812055565b6044908a8851917fe4bb0ca100000000000000000000000000000000000000000000000000000000835260048301526024820152fd5b90916001018416835b613fb3575b50505050508887526001845285872082885284528587208388528452858720857fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008254161790553880808080613ec5565b8481168a8111614041576001600160a01b038316600090815260026020908152604080832063ffffffff8816845282528083208c8452825280832067ffffffffffffffff861684529091529020541561401157508301841683613f5d565b6024908c51907f5c33785a0000000000000000000000000000000000000000000000000000000082526004820152fd5b50613f62565b6001600160a01b0360005416330361405b57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9391926001600160a01b03604051947fffffffffffffffff000000000000000000000000000000000000000000000000602087019760c01b1687527fffffffff00000000000000000000000000000000000000000000000000000000809460e01b16602887015216602c85015260e01b16604c8301526050820152605081526080810181811067ffffffffffffffff8211176137655760405251902090565b3d15614183573d90614169826138f5565b9161417760405193846137e8565b82523d6000602084013e565b606090565b6001600160a01b038116156141fa57600080808085855af16141a8614158565b50156141b2575050565b6040517f2c024f920000000000000000000000000000000000000000000000000000000081526001600160a01b039190911660048201526024810191909152604490fd5b0390fd5b60046040517f32fa6a1d000000000000000000000000000000000000000000000000000000008152fd5b906001600160a01b03808216156141fa576142e892166000806040519361429f856142916020998a8301947fa9059cbb00000000000000000000000000000000000000000000000000000000865260248401602090939291936001600160a01b0360408201951681520152565b03601f1981018752866137e8565b604051946142ac866137cc565b8786527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656488870152519082855af16142e2614158565b9161439d565b805190828215928315614385575b505050156143015750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6143959350820181019101613adf565b3882816142f6565b9192901561441857508151156143b1575090565b3b156143ba5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b82519091501561442b5750805190602001fd5b6141f6906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260248301906135ed56fea26469706673582212208eb93be1833042f7327a1409b18b33d185385be07e9fd39f5bb27e7d1a12a2a664736f6c6343000816003360808060405234610016576101d0908161001c8239f35b600080fdfe60806040908082526004361015610045575b503461004057600490517fd6234725000000000000000000000000000000000000000000000000000000008152fd5b600080fd5b600090813560e01c90816301ffc9a7146100f6575080631881d94d146100da57806354fd4d50146100a957636750cd4c036100115790346100a55760206003193601126100a55760043563ffffffff8116036100a5576020905160018152f35b5080fd5b5090346100a557816003193601126100a557806002606092519167ffffffffffffffff835260ff6020840152820152f35b5090346100a557816003193601126100a5576020905160028152f35b9050346100a55760206003193601126100a5576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361019657602092507f97f0258400000000000000000000000000000000000000000000000000000000811490811561016c575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483610165565b8280fdfea26469706673582212208ab35b37910f030dd558ed99e904687530ed8a07713d95eb657134cf419cb3da64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "AlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ComposeExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "ComposeNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DefaultReceiveLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DefaultSendLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "requiredNative";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "suppliedNative";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "requiredLzToken";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "suppliedLzToken";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientFee";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidExpiry";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InvalidNonce";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidReceiveLibrary";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LzTokenUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyNonDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyReceiveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyRegisteredLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyRegisteredOrDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySendLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "PayloadHashNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "SameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "SendReentrancy";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToAddressIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }];
        readonly name: "TransferNativeFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UnsupportedInterface";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ZeroLzTokenFee";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "ComposeDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposeSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeAlert";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveAlert";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "LzTokenSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "PacketDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encodedPayload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sendLibrary";
            readonly type: "address";
        }];
        readonly name: "PacketSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct Origin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketVerified";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "blockedLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "clear";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "composeQueue";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "executable";
        readonly outputs: readonly [{
            readonly internalType: "enum ExecutionState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "hasPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "inboundNonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_actualReceiveLib";
            readonly type: "address";
        }];
        readonly name: "isValidReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "lazyInboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_reason";
            readonly type: "bytes";
        }];
        readonly name: "lzComposeAlert";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_reason";
            readonly type: "bytes";
        }];
        readonly name: "lzReceiveAlert";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "payInLzToken";
                readonly type: "bool";
            }];
            readonly internalType: "struct MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "recoverToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "payInLzToken";
                readonly type: "bool";
            }];
            readonly internalType: "struct MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "sendCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }];
        readonly name: "setLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "verifiable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Origin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): EndpointV2Interface;
    static connect(address: string, runner?: ContractRunner | null): EndpointV2;
}

declare class MessageLibManager__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DefaultReceiveLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DefaultSendLibUnavailable";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidExpiry";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyNonDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyReceiveLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyRegisteredLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlyRegisteredOrDefaultLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OnlySendLib";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "SameValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UnsupportedEid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UnsupportedInterface";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "blockedLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_actualReceiveLib";
            readonly type: "address";
        }];
        readonly name: "isValidReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MessageLibManagerInterface;
    static connect(address: string, runner?: ContractRunner | null): MessageLibManager;
}

declare class MessagingChannel__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InvalidNonce";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "hasPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "inboundNonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }];
        readonly name: "lazyInboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MessagingChannelInterface;
    static connect(address: string, runner?: ContractRunner | null): MessagingChannel;
}

declare class MessagingComposer__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "ComposeExists";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "ComposeNotFound";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "ComposeDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposeSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "gas";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeAlert";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "index";
            readonly type: "uint16";
        }];
        readonly name: "composeQueue";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_reason";
            readonly type: "bytes";
        }];
        readonly name: "lzComposeAlert";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "_index";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "sendCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MessagingComposerInterface;
    static connect(address: string, runner?: ContractRunner | null): MessagingComposer;
}

declare class MessagingContext__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MessagingContextInterface;
    static connect(address: string, runner?: ContractRunner | null): MessagingContext;
}

type index$4_EndpointV2__factory = EndpointV2__factory;
declare const index$4_EndpointV2__factory: typeof EndpointV2__factory;
type index$4_MessageLibManager__factory = MessageLibManager__factory;
declare const index$4_MessageLibManager__factory: typeof MessageLibManager__factory;
type index$4_MessagingChannel__factory = MessagingChannel__factory;
declare const index$4_MessagingChannel__factory: typeof MessagingChannel__factory;
type index$4_MessagingComposer__factory = MessagingComposer__factory;
declare const index$4_MessagingComposer__factory: typeof MessagingComposer__factory;
type index$4_MessagingContext__factory = MessagingContext__factory;
declare const index$4_MessagingContext__factory: typeof MessagingContext__factory;
declare namespace index$4 {
  export {
    index$4_EndpointV2__factory as EndpointV2__factory,
    index$4_MessageLibManager__factory as MessageLibManager__factory,
    index$4_MessagingChannel__factory as MessagingChannel__factory,
    index$4_MessagingComposer__factory as MessagingComposer__factory,
    index$4_MessagingContext__factory as MessagingContext__factory,
    index$8 as interfaces,
    index$7 as libs,
    index$5 as messagelib,
  };
}

declare namespace index$3 {
  export {
    index$4 as contracts,
  };
}

declare namespace index$2 {
  export {
    index$k as messagelib,
    index$9 as oapp,
    index$3 as protocol,
  };
}

declare namespace index$1 {
  export {
    index$2 as contracts,
    index$u as openzeppelin,
  };
}

declare namespace index {
  export {
    index$1 as artifacts,
    node_modules as nodeModules,
  };
}

export { AccessControl, AccessControlUpgradeable, AccessControlUpgradeable__factory, AccessControl__factory, BlockedMessageLib, BlockedMessageLib__factory, ContextUpgradeable, ContextUpgradeable__factory, DVN, DVNFeeLib, DVNFeeLib__factory, DVNOptions, DVNOptions__factory, DVN__factory, ERC165, ERC165Upgradeable, ERC165Upgradeable__factory, ERC165__factory, ERC1967Proxy, ERC1967Proxy__factory, ERC1967Upgrade, ERC1967Upgrade__factory, ERC20, ERC20__factory, EndpointV2, EndpointV2__factory, EnforcedOptions, EnforcedOptions__factory, Errors, Errors__factory, Executor, ExecutorFeeLib, ExecutorFeeLib__factory, ExecutorOptions, ExecutorOptions__factory, Executor__factory, Fee, Fee__factory, IAccessControl, IAccessControlUpgradeable, IAccessControlUpgradeable__factory, IAccessControl__factory, IBeacon, IBeacon__factory, IDVN$1 as IDVN, IDVNFeeLib, IDVNFeeLib__factory, IDVN__factory, IERC165, IERC165Upgradeable, IERC165Upgradeable__factory, IERC165__factory, IERC1822Proxiable, IERC1822Proxiable__factory, IERC1967, IERC1967__factory, IERC20, IERC20Metadata, IERC20Metadata__factory, IERC20Permit, IERC20Permit__factory, IERC20__factory, IExecutor$3 as IExecutor, IExecutorFeeLib$1 as IExecutorFeeLib, IExecutorFeeLib__factory, IExecutor__factory, IInspector, IInspector__factory, ILayerZeroComposer, ILayerZeroComposer__factory, ILayerZeroDVN, ILayerZeroDVN__factory, ILayerZeroEndpointV2, ILayerZeroEndpointV2__factory, ILayerZeroExecutor, ILayerZeroExecutor__factory, ILayerZeroPriceFeed$1 as ILayerZeroPriceFeed, ILayerZeroPriceFeed__factory, ILayerZeroReceiver, ILayerZeroReceiver__factory, ILayerZeroTreasury, ILayerZeroTreasury__factory, ILayerZeroUltraLightNodeV2, ILayerZeroUltraLightNodeV2__factory, IMessageLib, IMessageLibManager, IMessageLibManager__factory, IMessageLib__factory, IMessagingChannel, IMessagingChannel__factory, IMessagingComposer, IMessagingComposer__factory, IMessagingContext, IMessagingContext__factory, IOApp, IOApp__factory, IOFT$4 as IOFT, IOFT__factory, IPreCrimeV2, IPreCrimeV2Simulator, IPreCrimeV2Simulator__factory, IPreCrimeV2__factory, ISendLib, ISendLib__factory, IUltraLightNode, IUltraLightNode__factory, IWorker, IWorker__factory, Initializable, Initializable__factory, MessageLibBase, MessageLibBase__factory, MessageLibManager, MessageLibManager__factory, MessagingChannel, MessagingChannel__factory, MessagingComposer, MessagingComposer__factory, MessagingContext, MessagingContext__factory, MultiSig, MultiSig__factory, OApp, OApp__factory, OFT, OFTAdapter, OFTAdapter__factory, OFTCore, OFTCore__factory, OFT__factory, OmniCounter, OmniCounterPreCrime, OmniCounterPreCrime__factory, OmniCounter__factory, OptionsBuilder, OptionsBuilder__factory, Ownable, OwnableUpgradeable, OwnableUpgradeable__factory, Ownable__factory, Pausable, PausableUpgradeable, PausableUpgradeable__factory, Pausable__factory, PreCrimeV2, PreCrimeV2Simulator, PreCrimeV2Simulator__factory, PreCrimeV2__factory, PriceFeed, PriceFeed__factory, Proxy, ProxyAdmin, ProxyAdmin__factory, Proxy__factory, ReceiveLibBaseE2, ReceiveLibBaseE2__factory, ReceiveUln302, ReceiveUln302__factory, ReceiveUlnBase, ReceiveUlnBase__factory, ReentrancyGuardUpgradeable, ReentrancyGuardUpgradeable__factory, SendLibBase, SendLibBaseE2, SendLibBaseE2__factory, SendLibBase__factory, SendUln302, SendUln302__factory, SendUlnBase, SendUlnBase__factory, SimpleMessageLib, SimpleMessageLib__factory, TestOFT, TestOFT__factory, Transfer, Transfer__factory, TransparentUpgradeableProxy, TransparentUpgradeableProxy__factory, Treasury, Treasury__factory, UlnBase, UlnBase__factory, UlnOptions, UlnOptions__factory, Worker, WorkerUpgradeable, WorkerUpgradeable__factory, Worker__factory, index$P as artifacts, index$Q as contracts, index as factories, index$1g as openzeppelin };
